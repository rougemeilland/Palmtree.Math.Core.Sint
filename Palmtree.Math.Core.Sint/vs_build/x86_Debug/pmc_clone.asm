; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_clone.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__9A9B1567_pmc_clone@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_Clone_X@8
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_clone.c
;	COMDAT _PMC_Clone_X@8
_TEXT	SEGMENT
_no$ = -36						; size = 4
_result$ = -24						; size = 4
_nx$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_Clone_X@8 PROC					; COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9A9B1567_pmc_clone@c
	call	@__CheckForDebuggerJustMyCode@4

; 32   :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@PMC_Clone_

; 33   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Clone_
$LN2@PMC_Clone_:

; 34   :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@PMC_Clone_

; 35   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Clone_
$LN3@PMC_Clone_:

; 36   :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], eax

; 37   :     PMC_STATUS_CODE result;
; 38   :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Clone_

; 39   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Clone_
$LN4@PMC_Clone_:

; 40   :     NUMBER_HEADER* no;
; 41   :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN5@PMC_Clone_

; 42   :         no = &number_zero;

	mov	DWORD PTR _no$[ebp], OFFSET _number_zero
	jmp	SHORT $LN6@PMC_Clone_
$LN5@PMC_Clone_:

; 43   :     else
; 44   :     {
; 45   :         if ((result = DuplicateNumber(nx, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Clone_

; 46   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Clone_
$LN6@PMC_Clone_:

; 47   :     }
; 48   :     *o = (PMC_HANDLE_SINT)no;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax], ecx

; 49   : #ifdef _DEBUG
; 50   :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Clone_

; 51   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Clone_
$LN8@PMC_Clone_:

; 52   : #endif
; 53   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Clone_:

; 54   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@PMC_Clone_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@PMC_Clone_:
	DD	1
	DD	$LN11@PMC_Clone_
$LN11@PMC_Clone_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN10@PMC_Clone_
$LN10@PMC_Clone_:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_Clone_X@8 ENDP
_TEXT	ENDS
END
