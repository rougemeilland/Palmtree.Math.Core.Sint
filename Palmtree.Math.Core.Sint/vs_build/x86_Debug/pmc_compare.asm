; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_compare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__C8C7A597_pmc_compare@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_Compare_I_X@12
PUBLIC	_PMC_Compare_L_X@16
PUBLIC	_PMC_Compare_UX_X@12
PUBLIC	_PMC_Compare_X_I@12
PUBLIC	_PMC_Compare_X_L@16
PUBLIC	_PMC_Compare_X_UX@12
PUBLIC	_PMC_Compare_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _CompareU_X_X_Imp
_TEXT	SEGMENT
_temp_w$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_CompareU_X_X_Imp PROC					; COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 67   :     PMC_STATUS_CODE result;
; 68   :     _INT32_T temp_w;
; 69   :     if ((result = ep_uint.Compare_X_X(u, v, &temp_w)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _temp_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+220
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@CompareU_X

; 70   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 71   :     if (sign > 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 72   :         *w = temp_w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _temp_w$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 73   : #ifdef _DEBUG
; 74   :     else if (sign == 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 75   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN4@CompareU_X
$LN5@CompareU_X:

; 76   : #endif
; 77   :     else
; 78   :         *w = -temp_w;

	mov	eax, DWORD PTR _temp_w$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@CompareU_X:

; 79   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 80   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CompareU_X
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@CompareU_X:
	DD	1
	DD	$LN9@CompareU_X
$LN9@CompareU_X:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@CompareU_X
$LN8@CompareU_X:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
_CompareU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _CompareU_X_L_Imp
_TEXT	SEGMENT
_temp_w$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_CompareU_X_L_Imp PROC					; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 50   :     PMC_STATUS_CODE result;
; 51   :     _INT32_T temp_w;
; 52   :     if ((result = ep_uint.Compare_X_L(u, v, &temp_w)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _temp_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+216
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@CompareU_X

; 53   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 54   :     if (sign > 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 55   :         *w = temp_w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _temp_w$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 56   : #ifdef _DEBUG
; 57   :     else if (sign == 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 58   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN4@CompareU_X
$LN5@CompareU_X:

; 59   : #endif
; 60   :     else
; 61   :         *w = -temp_w;

	mov	eax, DWORD PTR _temp_w$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@CompareU_X:

; 62   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 63   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CompareU_X
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@CompareU_X:
	DD	1
	DD	$LN9@CompareU_X
$LN9@CompareU_X:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@CompareU_X
$LN8@CompareU_X:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
_CompareU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _CompareU_X_I_Imp
_TEXT	SEGMENT
_temp_w$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_CompareU_X_I_Imp PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     PMC_STATUS_CODE result;
; 34   :     _INT32_T temp_w;
; 35   :     if ((result = ep_uint.Compare_X_I(u, v, &temp_w)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _temp_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+212
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@CompareU_X

; 36   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 37   :     if (sign > 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 38   :         *w = temp_w;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _temp_w$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 39   : #ifdef _DEBUG
; 40   :     else if (sign == 0)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 41   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN4@CompareU_X
$LN5@CompareU_X:

; 42   : #endif
; 43   :     else
; 44   :         *w = -temp_w;

	mov	eax, DWORD PTR _temp_w$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@CompareU_X:

; 45   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CompareU_X
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@CompareU_X:
	DD	1
	DD	$LN9@CompareU_X
$LN9@CompareU_X:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@CompareU_X
$LN8@CompareU_X:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
_CompareU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_X_X@12
_TEXT	SEGMENT
_nv$ = -32						; size = 4
_nu$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_X@12 PROC				; COMDAT

; 456  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 457  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 458  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 459  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 460  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 461  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 462  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 463  :     PMC_STATUS_CODE result;
; 464  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 465  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 466  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 467  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 468  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 469  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 470  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Compar

; 471  :     {
; 472  :         // u == 0 の場合
; 473  : 
; 474  :         // v の符号の反対を返す
; 475  :         *w = -nv->SIGN;

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], ecx

; 476  :     }

	jmp	$LN8@PMC_Compar
$LN7@PMC_Compar:

; 477  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN9@PMC_Compar

; 478  :     {
; 479  :         // u > 0 の場合
; 480  : 
; 481  :         if (nv->SIGN <= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jg	SHORT $LN11@PMC_Compar

; 482  :         {
; 483  :             // v == 0 の場合
; 484  : 
; 485  :             // 1 を返す
; 486  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 487  :         }

	jmp	SHORT $LN12@PMC_Compar
$LN11@PMC_Compar:

; 488  :         else
; 489  :         {
; 490  :             // v > 0 の場合
; 491  : 
; 492  :             // abs(u) と abs(v) の比較結果を返す
; 493  :             if ((result = CompareU_X_X_Imp(1, nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_CompareU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Compar

; 494  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN12@PMC_Compar:

; 495  :         }
; 496  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN9@PMC_Compar:

; 497  :     else
; 498  :     {
; 499  :         // u < 0 の場合
; 500  : 
; 501  :         if (nv->SIGN >= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jl	SHORT $LN14@PMC_Compar

; 502  :         {
; 503  :             // v == 0 の場合
; 504  : 
; 505  :             // -1 を返す
; 506  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 507  :         }

	jmp	SHORT $LN8@PMC_Compar
$LN14@PMC_Compar:

; 508  :         else
; 509  :         {
; 510  :             // v < 0 の場合
; 511  : 
; 512  :             // -abs(u) と -abs(v) の比較結果を返す
; 513  :             if ((result = CompareU_X_X_Imp(-1, nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_CompareU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Compar

; 514  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN8@PMC_Compar:

; 515  :         }
; 516  :     }
; 517  : #ifdef _DEBUG
; 518  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN17@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN17@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN17@PMC_Compar

; 519  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN17@PMC_Compar:

; 520  : #endif
; 521  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 522  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_X_UX@12
_TEXT	SEGMENT
_nu$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_UX@12 PROC				; COMDAT

; 391  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 392  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 393  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 394  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 395  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 396  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 397  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 398  :     PMC_STATUS_CODE result;
; 399  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 400  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 401  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 402  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_Compar

; 403  :     {
; 404  :         // u == 0 の場合
; 405  : 
; 406  :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN8@PMC_Compar

; 407  :         {
; 408  :             // v == 0 の場合
; 409  : 
; 410  :             // 0 を返す
; 411  :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 412  :         }

	jmp	SHORT $LN9@PMC_Compar
$LN8@PMC_Compar:

; 413  :         else
; 414  :         {
; 415  :             // v > 0 の場合
; 416  : 
; 417  :             // -1 を返す
; 418  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
$LN9@PMC_Compar:

; 419  :         }
; 420  :     }

	jmp	SHORT $LN7@PMC_Compar
$LN6@PMC_Compar:

; 421  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN10@PMC_Compar

; 422  :     {
; 423  :         // u > 0 の場合
; 424  : 
; 425  :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN12@PMC_Compar

; 426  :         {
; 427  :             // v == 0 の場合
; 428  : 
; 429  :             // 1 を返す
; 430  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 431  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 432  :         else
; 433  :         {
; 434  :             // v > 0 の場合
; 435  : 
; 436  :             // abs(u) と abs(v) の比較結果を返す
; 437  :             if ((result = CompareU_X_X_Imp(1, nu->ABS, v, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_CompareU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Compar

; 438  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN13@PMC_Compar:

; 439  :         }
; 440  :     }

	jmp	SHORT $LN7@PMC_Compar
$LN10@PMC_Compar:

; 441  :     else
; 442  :     {
; 443  :         // u < 0 の場合
; 444  : 
; 445  :         // -1 を返す
; 446  :         *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
$LN7@PMC_Compar:

; 447  :     }
; 448  : #ifdef _DEBUG
; 449  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN15@PMC_Compar

; 450  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 451  : #endif
; 452  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 453  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_X_L@16
_TEXT	SEGMENT
_v_abs$ = -52						; size = 8
_v_sign$ = -33						; size = 1
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Compare_X_L@16 PROC				; COMDAT

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 326  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 327  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 328  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 329  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 330  :     PMC_STATUS_CODE result;
; 331  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 332  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Compar

; 333  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 334  :     char v_sign;
; 335  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 336  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Compar

; 337  :     {
; 338  :         // u == 0 の場合
; 339  : 
; 340  :         // v の符号の反対を返す
; 341  :         *w = -v_sign;

	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax

; 342  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 343  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN7@PMC_Compar

; 344  :     {
; 345  :         // u > 0 の場合
; 346  : 
; 347  :         if (v_sign <= 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 348  :         {
; 349  :             // v == 0 の場合
; 350  : 
; 351  :             // 1 を返す
; 352  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 353  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 354  :         else
; 355  :         {
; 356  :             // v > 0 の場合
; 357  : 
; 358  :             // abs(u) と abs(v) の比較結果を返す
; 359  :             if ((result = CompareU_X_L_Imp(1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_CompareU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Compar

; 360  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 361  :         }
; 362  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN7@PMC_Compar:

; 363  :     else
; 364  :     {
; 365  :         // u < 0 の場合
; 366  : 
; 367  :         if (v_sign >= 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 368  :         {
; 369  :             // v == 0 の場合
; 370  : 
; 371  :             // -1 を返す
; 372  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 373  :         }

	jmp	SHORT $LN6@PMC_Compar
$LN12@PMC_Compar:

; 374  :         else
; 375  :         {
; 376  :             // v < 0 の場合
; 377  : 
; 378  :             // -abs(u) と -abs(v) の比較結果を返す
; 379  :             if ((result = CompareU_X_L_Imp(-1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_CompareU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 380  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN6@PMC_Compar:

; 381  :         }
; 382  :     }
; 383  : #ifdef _DEBUG
; 384  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN15@PMC_Compar

; 385  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 386  : #endif
; 387  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 388  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN19@PMC_Compar:
	DD	1
	DD	$LN18@PMC_Compar
$LN18@PMC_Compar:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN17@PMC_Compar
$LN17@PMC_Compar:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_Compare_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_X_I@12
_TEXT	SEGMENT
_v_abs$ = -48						; size = 4
_v_sign$ = -33						; size = 1
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_I@12 PROC				; COMDAT

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 260  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 262  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 263  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 264  :     PMC_STATUS_CODE result;
; 265  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 266  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Compar

; 267  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 268  :     char v_sign;
; 269  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 270  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Compar

; 271  :     {
; 272  :         // u == 0 の場合
; 273  : 
; 274  :         // v の符号の反対を返す
; 275  :         *w = -v_sign;

	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax

; 276  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 277  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN7@PMC_Compar

; 278  :     {
; 279  :         // u > 0 の場合
; 280  : 
; 281  :         if (v_sign <= 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 282  :         {
; 283  :             // v == 0 の場合
; 284  : 
; 285  :             // 1 を返す
; 286  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 287  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 288  :         else
; 289  :         {
; 290  :             // v > 0 の場合
; 291  : 
; 292  :             // abs(u) と abs(v) の比較結果を返す
; 293  :             if ((result = CompareU_X_I_Imp(1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_CompareU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Compar

; 294  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 295  :         }
; 296  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN7@PMC_Compar:

; 297  :     else
; 298  :     {
; 299  :         // u < 0 の場合
; 300  : 
; 301  :         if (v_sign >= 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 302  :         {
; 303  :             // v == 0 の場合
; 304  : 
; 305  :             // -1 を返す
; 306  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 307  :         }

	jmp	SHORT $LN6@PMC_Compar
$LN12@PMC_Compar:

; 308  :         else
; 309  :         {
; 310  :             // v < 0 の場合
; 311  : 
; 312  :             // -abs(u) と -abs(v) の比較結果を返す
; 313  :             if ((result = CompareU_X_I_Imp(-1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_CompareU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 314  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN6@PMC_Compar:

; 315  :         }
; 316  :     }
; 317  : #ifdef _DEBUG
; 318  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN15@PMC_Compar

; 319  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 320  : #endif
; 321  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 322  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN19@PMC_Compar:
	DD	1
	DD	$LN18@PMC_Compar
$LN18@PMC_Compar:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN17@PMC_Compar
$LN17@PMC_Compar:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_Compare_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_UX_X@12
_TEXT	SEGMENT
_nv$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_UX_X@12 PROC				; COMDAT

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 216  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 217  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 218  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 219  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 220  :     PMC_STATUS_CODE result;
; 221  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 222  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Compar

; 223  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 224  :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN5@PMC_Compar

; 225  :     {
; 226  :         // u == 0 の場合
; 227  : 
; 228  :         // v の符号の反対を返す
; 229  :         *w = -nv->SIGN;

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], ecx

; 230  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN5@PMC_Compar:

; 231  :     else
; 232  :     {
; 233  :         // u > 0 の場合
; 234  : 
; 235  :         if (nv->SIGN <= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jg	SHORT $LN7@PMC_Compar

; 236  :         {
; 237  :             // v == 0 の場合
; 238  : 
; 239  :             // 1 を返す
; 240  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 241  :         }

	jmp	SHORT $LN6@PMC_Compar
$LN7@PMC_Compar:

; 242  :         else
; 243  :         {
; 244  :             // v > 0 の場合
; 245  : 
; 246  :             // abs(u) と abs(v) の比較結果を返す
; 247  :             if ((result = CompareU_X_X_Imp(1, u, nv->ABS, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_CompareU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 248  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN6@PMC_Compar:

; 249  :         }
; 250  :     }
; 251  : #ifdef _DEBUG
; 252  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN10@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN10@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN10@PMC_Compar

; 253  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 254  : #endif
; 255  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 256  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_L_X@16
_TEXT	SEGMENT
_u_abs$ = -52						; size = 8
_u_sign$ = -33						; size = 1
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Compare_L_X@16 PROC				; COMDAT

; 149  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 150  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 151  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 152  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 153  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 154  :     PMC_STATUS_CODE result;
; 155  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 156  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Compar

; 157  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 158  :     char u_sign;
; 159  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 160  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 161  :     {
; 162  :         // u == 0 の場合
; 163  : 
; 164  :         // v の符号の反対を返す
; 165  :         *w = - nv->SIGN;

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], ecx

; 166  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 167  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 168  :     {
; 169  :         // u > 0 の場合
; 170  : 
; 171  :         if (nv->SIGN <= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jg	SHORT $LN9@PMC_Compar

; 172  :         {
; 173  :             // v <= 0 の場合
; 174  : 
; 175  :             // 1 を返す
; 176  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 177  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 178  :         else
; 179  :         {
; 180  :             // v > 0 の場合
; 181  : 
; 182  :             // abs(u) と abs(v) の比較結果を返す
; 183  :             if ((result = CompareU_X_L_Imp(-1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_CompareU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Compar

; 184  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 185  :         }
; 186  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN7@PMC_Compar:

; 187  :     else
; 188  :     {
; 189  :         // u < 0 の場合
; 190  : 
; 191  :         if (nv->SIGN >= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jl	SHORT $LN12@PMC_Compar

; 192  :         {
; 193  :             // v == 0 の場合
; 194  : 
; 195  :             // -1 を返す
; 196  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 197  :         }

	jmp	SHORT $LN6@PMC_Compar
$LN12@PMC_Compar:

; 198  :         else
; 199  :         {
; 200  :             // v < 0 の場合
; 201  : 
; 202  :             // -abs(u) と -abs(v) の比較結果を返す
; 203  :             if ((result = CompareU_X_L_Imp(1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_CompareU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 204  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN6@PMC_Compar:

; 205  :         }
; 206  :     }
; 207  : #ifdef _DEBUG
; 208  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN15@PMC_Compar

; 209  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 210  : #endif
; 211  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 212  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_Compar:
	DD	1
	DD	$LN18@PMC_Compar
$LN18@PMC_Compar:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN17@PMC_Compar
$LN17@PMC_Compar:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_Compare_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT _PMC_Compare_I_X@12
_TEXT	SEGMENT
_u_abs$ = -48						; size = 4
_u_sign$ = -33						; size = 1
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_I_X@12 PROC				; COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C8C7A597_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 84   :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 85   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 86   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 87   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 88   :     PMC_STATUS_CODE result;
; 89   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 90   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Compar

; 91   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 92   :     char u_sign;
; 93   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 94   :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 95   :     {
; 96   :         // u == 0 の場合
; 97   : 
; 98   :         // v の符号の反対を返す
; 99   :         *w = - nv->SIGN;

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], ecx

; 100  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 101  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 102  :     {
; 103  :         // u > 0 の場合
; 104  : 
; 105  :         if (nv->SIGN <= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jg	SHORT $LN9@PMC_Compar

; 106  :         {
; 107  :             // v <= 0 の場合
; 108  : 
; 109  :             // 1 を返す
; 110  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 111  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 112  :         else
; 113  :         {
; 114  :             // v > 0 の場合
; 115  : 
; 116  :             // abs(u) と abs(v) の比較結果を返す
; 117  :             if ((result = CompareU_X_I_Imp(-1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_CompareU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Compar

; 118  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 119  :         }
; 120  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN7@PMC_Compar:

; 121  :     else
; 122  :     {
; 123  :         // u < 0 の場合
; 124  : 
; 125  :         if (nv->SIGN >= 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jl	SHORT $LN12@PMC_Compar

; 126  :         {
; 127  :             // v >= 0 の場合
; 128  : 
; 129  :             // -1 を返す
; 130  :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 131  :         }

	jmp	SHORT $LN6@PMC_Compar
$LN12@PMC_Compar:

; 132  :         else
; 133  :         {
; 134  :             // v < 0 の場合
; 135  : 
; 136  :             // -abs(u) と -abs(v) の比較結果を返す
; 137  :             if ((result = CompareU_X_I_Imp(1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_CompareU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 138  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN6@PMC_Compar:

; 139  :         }
; 140  :     }
; 141  : #ifdef _DEBUG
; 142  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN15@PMC_Compar
	mov	eax, DWORD PTR _w$[ebp]
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN15@PMC_Compar

; 143  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 144  : #endif
; 145  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 146  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN19@PMC_Compar:
	DD	1
	DD	$LN18@PMC_Compar
$LN18@PMC_Compar:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN17@PMC_Compar
$LN17@PMC_Compar:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_Compare_I_X@12 ENDP
_TEXT	ENDS
END
