; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\debug.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_test_total_count
PUBLIC	_test_ok_count
PUBLIC	___DEBUG_LOG
_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
_BSS	SEGMENT
_test_total_count DD 01H DUP (?)
_test_ok_count DD 01H DUP (?)
___DEBUG_LOG DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__059414E1_pmc_sint_debug@h DB 01H
__566B17FC_debug@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_Assert
PUBLIC	_FormatTestLabel
PUBLIC	_FormatTestMesssage
PUBLIC	_DoDebug@4
PUBLIC	_DumpBinary_UNIT
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1O@FHBPNOC@?$PP?F?$PP?$LJ?$PP?H?$PP?$IL?$PP?K?$AA?6@ ; `string'
PUBLIC	??_C@_1GM@EPACJBNM@?$PP?F?$PP?$LJ?$PP?H?$PP?$IM?$PP?$IG?$AA?$AC?$AA?$AF?$PP?n?$AAp?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAO@ ; `string'
PUBLIC	??_C@_1DA@GFAGACCL@?$AAS?$AAI?$AAN?$AAT?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_17NIABIIAO@?$AAx?$AA8?$AA6@		; `string'
PUBLIC	??_C@_17CLPOHKCA@?$AAM?$AAS?$AAC@		; `string'
PUBLIC	??_C@_1BM@IMGEAKDJ@?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@ ; `string'
PUBLIC	??_C@_1BM@DNPJODOF@?$AAC?$AAO?$AAM?$AAP?$AAI?$AAL?$AAE?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@ ; `string'
PUBLIC	??_C@_1GO@EJNKEMEB@?$AAC?$AAP?$AAU?$AA?9?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAO?$AAP?$AAC?$AAN@ ; `string'
PUBLIC	??_C@_1BC@IPMCEBLM@?$AA?$CK?$AA?$CK?$AA?$CK?$AAN?$AAG?$AA?$CK?$AA?$CK?$AA?$CK@ ; `string'
PUBLIC	??_C@_1DE@HJPKPLII@?$PP?F?$PP?$LJ?$PP?H?$AA?5?$AAN?$AAo?$AA?4?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN@ ; `string'
PUBLIC	??_C@_15JOGBDECP@?$AA?0?$AA?5@			; `string'
PUBLIC	??_C@_1O@GMFEIALK@?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx@ ; `string'
EXTRN	__imp__wsprintfW:PROC
EXTRN	_PMC_SINT_Initialize@4:PROC
EXTRN	_TEST_autogenerated:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?buffer@?1??FormatTestLabel@@9@9 DW 0100H DUP (?)	; `FormatTestLabel'::`2'::buffer
?buffer@?1??FormatTestMesssage@@9@9 DW 0100H DUP (?)	; `FormatTestMesssage'::`2'::buffer
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1O@GMFEIALK@?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx@
CONST	SEGMENT
??_C@_1O@GMFEIALK@?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx@ DB '0', 00H, 'x', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15JOGBDECP@?$AA?0?$AA?5@
CONST	SEGMENT
??_C@_15JOGBDECP@?$AA?0?$AA?5@ DB ',', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@HJPKPLII@?$PP?F?$PP?$LJ?$PP?H?$AA?5?$AAN?$AAo?$AA?4?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1DE@HJPKPLII@?$PP?F?$PP?$LJ?$PP?H?$AA?5?$AAN?$AAo?$AA?4?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN@ DB 0c6H
	DB	'0', 0b9H, '0', 0c8H, '0 ', 00H, 'N', 00H, 'o', 00H, '.', 00H, '%'
	DB	00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '>', 00H, ' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 's', 00H, ')', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IPMCEBLM@?$AA?$CK?$AA?$CK?$AA?$CK?$AAN?$AAG?$AA?$CK?$AA?$CK?$AA?$CK@
CONST	SEGMENT
??_C@_1BC@IPMCEBLM@?$AA?$CK?$AA?$CK?$AA?$CK?$AAN?$AAG?$AA?$CK?$AA?$CK?$AA?$CK@ DB '*'
	DB	00H, '*', 00H, '*', 00H, 'N', 00H, 'G', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@EJNKEMEB@?$AAC?$AAP?$AAU?$AA?9?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAO?$AAP?$AAC?$AAN@
CONST	SEGMENT
??_C@_1GO@EJNKEMEB@?$AAC?$AAP?$AAU?$AA?9?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAO?$AAP?$AAC?$AAN@ DB 'C'
	DB	00H, 'P', 00H, 'U', 00H, '-', 00H, 'I', 00H, 'N', 00H, 'F', 00H
	DB	'O', 00H, ':', 00H, ' ', 00H, 'P', 00H, 'O', 00H, 'P', 00H, 'C'
	DB	00H, 'N', 00H, 'T', 00H, '=', 00H, '%', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'A', 00H, 'D', 00H, 'X', 00H, '=', 00H, '%', 00H, 'd'
	DB	00H, ',', 00H, ' ', 00H, 'B', 00H, 'M', 00H, 'I', 00H, '1', 00H
	DB	'=', 00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'B', 00H, 'M'
	DB	00H, 'I', 00H, '2', 00H, '=', 00H, '%', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'A', 00H, 'B', 00H, 'M', 00H, '=', 00H, '%', 00H, 'd'
	DB	00H, 0aH, 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@DNPJODOF@?$AAC?$AAO?$AAM?$AAP?$AAI?$AAL?$AAE?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@
CONST	SEGMENT
??_C@_1BM@DNPJODOF@?$AAC?$AAO?$AAM?$AAP?$AAI?$AAL?$AAE?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@ DB 'C'
	DB	00H, 'O', 00H, 'M', 00H, 'P', 00H, 'I', 00H, 'L', 00H, 'E', 00H
	DB	'R', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 0aH, 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IMGEAKDJ@?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@
CONST	SEGMENT
??_C@_1BM@IMGEAKDJ@?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@ DB 'P'
	DB	00H, 'L', 00H, 'A', 00H, 'T', 00H, 'F', 00H, 'O', 00H, 'R', 00H
	DB	'M', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 0aH, 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17CLPOHKCA@?$AAM?$AAS?$AAC@
CONST	SEGMENT
??_C@_17CLPOHKCA@?$AAM?$AAS?$AAC@ DB 'M', 00H, 'S', 00H, 'C', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17NIABIIAO@?$AAx?$AA8?$AA6@
CONST	SEGMENT
??_C@_17NIABIIAO@?$AAx?$AA8?$AA6@ DB 'x', 00H, '8', 00H, '6', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GFAGACCL@?$AAS?$AAI?$AAN?$AAT?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1DA@GFAGACCL@?$AAS?$AAI?$AAN?$AAT?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@ DB 'S'
	DB	00H, 'I', 00H, 'N', 00H, 'T', 00H, '_', 00H, 'I', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@EPACJBNM@?$PP?F?$PP?$LJ?$PP?H?$PP?$IM?$PP?$IG?$AA?$AC?$AA?$AF?$PP?n?$AAp?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAO@
CONST	SEGMENT
??_C@_1GM@EPACJBNM@?$PP?F?$PP?$LJ?$PP?H?$PP?$IM?$PP?$IG?$AA?$AC?$AA?$AF?$PP?n?$AAp?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAO@ DB 0c6H
	DB	'0', 0b9H, '0', 0c8H, '0', 08cH, '[', 086H, 'N', 02H, '0', 05H
	DB	098H, 0eeH, 'vpe=', 00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'O', 00H, 'K', 00H, 05H, 098H, 0eeH, 'vpe=', 00H, '%', 00H, 'd'
	DB	00H, ',', 00H, ' ', 00H, 'N', 00H, 'G', 00H, 05H, 098H, 0eeH, 'v'
	DB	'pe=', 00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'O', 00H, 'K'
	DB	00H, 087H, 's=', 00H, '%', 00H, 'd', 00H, '%', 00H, '%', 00H, ','
	DB	00H, ' ', 00H, 'N', 00H, 'G', 00H, 087H, 's=', 00H, '%', 00H, 'd'
	DB	00H, '%', 00H, '%', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@FHBPNOC@?$PP?F?$PP?$LJ?$PP?H?$PP?$IL?$PP?K?$AA?6@
CONST	SEGMENT
??_C@_1O@FHBPNOC@?$PP?F?$PP?$LJ?$PP?H?$PP?$IL?$PP?K?$AA?6@ DB 0c6H, '0', 0b9H
	DB	'0', 0c8H, '0', 08bH, 095H, 0cbH, 'Y', 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _DumpBinary_UNIT
_TEXT	SEGMENT
_is_first$1 = -20					; size = 4
_p$2 = -8						; size = 4
_buf$ = 8						; size = 4
_count$ = 12						; size = 4
_DumpBinary_UNIT PROC					; COMDAT

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 136  :     if (__DEBUG_LOG != NULL)

	cmp	DWORD PTR ___DEBUG_LOG, 0
	je	$LN1@DumpBinary

; 137  :     {
; 138  :         unsigned char* p = (unsigned char*)buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$2[ebp], eax

; 139  :         count *= sizeof(__UNIT_TYPE);

	mov	eax, DWORD PTR _count$[ebp]
	shl	eax, 2
	mov	DWORD PTR _count$[ebp], eax
$LN2@DumpBinary:

; 140  :         while (count > 0 && p[count - 1] == 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@DumpBinary
	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, DWORD PTR _count$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	test	ecx, ecx
	jne	SHORT $LN3@DumpBinary

; 141  :             --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	jmp	SHORT $LN2@DumpBinary
$LN3@DumpBinary:

; 142  :         if (count <= 0)

	cmp	DWORD PTR _count$[ebp], 0
	ja	SHORT $LN7@DumpBinary

; 143  :             count = 1;

	mov	DWORD PTR _count$[ebp], 1
$LN7@DumpBinary:

; 144  :         int is_first = 1;

	mov	DWORD PTR _is_first$1[ebp], 1
$LN4@DumpBinary:

; 145  :         while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN1@DumpBinary

; 146  :         {
; 147  :             if (!is_first)

	cmp	DWORD PTR _is_first$1[ebp], 0
	jne	SHORT $LN8@DumpBinary

; 148  :                 (*__DEBUG_LOG)(L", ");

	mov	esi, esp
	push	OFFSET ??_C@_15JOGBDECP@?$AA?0?$AA?5@
	call	DWORD PTR ___DEBUG_LOG
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DumpBinary:

; 149  :             (*__DEBUG_LOG)(L"0x%02x", *p);

	mov	eax, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_1O@GMFEIALK@?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx@
	call	DWORD PTR ___DEBUG_LOG
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  :             ++p;

	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, 1
	mov	DWORD PTR _p$2[ebp], eax

; 151  :             --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 152  :             is_first = 0;

	mov	DWORD PTR _is_first$1[ebp], 0

; 153  :         }

	jmp	SHORT $LN4@DumpBinary
$LN1@DumpBinary:

; 154  :     }
; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DumpBinary_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _DoDebug@4
_TEXT	SEGMENT
_compiler$ = -48					; size = 4
_platform$ = -36					; size = 4
_ep$ = -24						; size = 4
_conf$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_DoDebug@4 PROC						; COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _DEBUG
; 68   :     PMC_CONFIGURATION_INFO conf;
; 69   :     conf.MEMORY_VERIFICATION_ENABLED = FALSE;

	mov	eax, DWORD PTR _conf$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _conf$[ebp], eax

; 70   :     PMC_SINT_ENTRY_POINTS* ep = PMC_SINT_Initialize(&conf);

	lea	eax, DWORD PTR _conf$[ebp]
	push	eax
	call	_PMC_SINT_Initialize@4
	mov	DWORD PTR _ep$[ebp], eax

; 71   :     if (ep == NULL)

	cmp	DWORD PTR _ep$[ebp], 0
	jne	SHORT $LN2@DoDebug

; 72   :     {
; 73   :          env->log(L"SINT_Initialize failed\n");

	mov	esi, esp
	push	OFFSET ??_C@_1DA@GFAGACCL@?$AAS?$AAI?$AAN?$AAT?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe@
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   :          return;

	jmp	$LN1@DoDebug
$LN2@DoDebug:

; 75   :     }
; 76   : #ifdef _M_IX86
; 77   :     wchar_t* platform = L"x86";

	mov	DWORD PTR _platform$[ebp], OFFSET ??_C@_17NIABIIAO@?$AAx?$AA8?$AA6@

; 78   : #elif defined(_M_IX64)
; 79   :     wchar_t* platform = L"x64";
; 80   : #else
; 81   : #error unknown platform
; 82   : #endif
; 83   : #ifdef _MSC_VER
; 84   :     wchar_t* compiler = L"MSC";

	mov	DWORD PTR _compiler$[ebp], OFFSET ??_C@_17CLPOHKCA@?$AAM?$AAS?$AAC@

; 85   : #elif defined(__GNUC__)
; 86   :     wchar_t* compiler = L"GNUC";
; 87   : #else
; 88   : #error unknown platform
; 89   : #endif
; 90   : 
; 91   :     env->log(L"PLATFORM: %s\n", platform);

	mov	esi, esp
	mov	eax, DWORD PTR _platform$[ebp]
	push	eax
	push	OFFSET ??_C@_1BM@IMGEAKDJ@?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 92   :     env->log(L"COMPILER: %s\n", compiler);

	mov	esi, esp
	mov	eax, DWORD PTR _compiler$[ebp]
	push	eax
	push	OFFSET ??_C@_1BM@DNPJODOF@?$AAC?$AAO?$AAM?$AAP?$AAI?$AAL?$AAE?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?6@
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   :     env->log(L"CPU-INFO: POPCNT=%d, ADX=%d, BMI1=%d, BMI2=%d, ABM=%d\n",

	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 4
	and	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 2
	and	edx, 1
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	push	eax
	push	OFFSET ??_C@_1GO@EJNKEMEB@?$AAC?$AAP?$AAU?$AA?9?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAO?$AAP?$AAC?$AAN@
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   :              ep->UINT_ENTRY_POINTS.PROCESSOR_FEATURE_POPCNT,
; 95   :              ep->UINT_ENTRY_POINTS.PROCESSOR_FEATURE_ADX,
; 96   :              ep->UINT_ENTRY_POINTS.PROCESSOR_FEATURE_BMI1,
; 97   :              ep->UINT_ENTRY_POINTS.PROCESSOR_FEATURE_BMI2,
; 98   :              ep->UINT_ENTRY_POINTS.PROCESSOR_FEATURE_ABM);
; 99   : 
; 100  :     //CalculateCriticalDataOfDivision(env);
; 101  :     DoTest(env, ep);

	mov	eax, DWORD PTR _ep$[ebp]
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_DoTest
	add	esp, 8
$LN1@DoDebug:

; 102  : #endif
; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@DoDebug
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@DoDebug:
	DD	1
	DD	$LN5@DoDebug
$LN5@DoDebug:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@DoDebug
$LN4@DoDebug:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	0
_DoDebug@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _DoTest
_TEXT	SEGMENT
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_DoTest	PROC						; COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 57   :     __DEBUG_LOG = env->log;

	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ___DEBUG_LOG, ecx

; 58   :     TEST_Start(env);

	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Start
	add	esp, 4

; 59   :     TEST_autogenerated(env, ep);

	mov	eax, DWORD PTR _ep$[ebp]
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_autogenerated
	add	esp, 8

; 60   :     TEST_End(env);

	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_End
	add	esp, 4

; 61   :     __DEBUG_LOG = NULL;

	mov	DWORD PTR ___DEBUG_LOG, 0

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DoTest	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _TEST_End
_TEXT	SEGMENT
_env$ = 8						; size = 4
_TEST_End PROC						; COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     env->log(L"テスト完了。項目数=%d, OK項目数=%d, NG項目数=%d, OK率=%d%%, NG率=%d%%\n",

	mov	eax, DWORD PTR _test_total_count
	sub	eax, DWORD PTR _test_ok_count
	imul	eax, eax, 100
	cdq
	idiv	DWORD PTR _test_total_count
	mov	esi, esp
	push	eax
	imul	eax, DWORD PTR _test_ok_count, 100
	cdq
	idiv	DWORD PTR _test_total_count
	push	eax
	mov	ecx, DWORD PTR _test_total_count
	sub	ecx, DWORD PTR _test_ok_count
	push	ecx
	mov	edx, DWORD PTR _test_ok_count
	push	edx
	mov	eax, DWORD PTR _test_total_count
	push	eax
	push	OFFSET ??_C@_1GM@EPACJBNM@?$PP?F?$PP?$LJ?$PP?H?$PP?$IM?$PP?$IG?$AA?$AC?$AA?$AF?$PP?n?$AAp?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAO@
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 48   :              test_total_count,
; 49   :              test_ok_count,
; 50   :              test_total_count - test_ok_count,
; 51   :              test_ok_count * 100 / test_total_count,
; 52   :              (test_total_count - test_ok_count) * 100 / test_total_count);
; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_End ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _TEST_Start
_TEXT	SEGMENT
_env$ = 8						; size = 4
_TEST_Start PROC					; COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     test_total_count = 0;

	mov	DWORD PTR _test_total_count, 0

; 41   :     test_ok_count = 0;

	mov	DWORD PTR _test_ok_count, 0

; 42   :     env->log(L"テスト開始\n");

	mov	esi, esp
	push	OFFSET ??_C@_1O@FHBPNOC@?$PP?F?$PP?$LJ?$PP?H?$PP?$IL?$PP?K?$AA?6@
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_Start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _FormatTestMesssage
_TEXT	SEGMENT
_format$ = 8						; size = 4
_return_value$ = 12					; size = 4
_FormatTestMesssage PROC				; COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 129  :     static wchar_t buffer[256];
; 130  :     wsprintfW(buffer, format, return_value);

	mov	esi, esp
	mov	eax, DWORD PTR _return_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	OFFSET ?buffer@?1??FormatTestMesssage@@9@9
	call	DWORD PTR __imp__wsprintfW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  :     return buffer;

	mov	eax, OFFSET ?buffer@?1??FormatTestMesssage@@9@9

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FormatTestMesssage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _FormatTestLabel
_TEXT	SEGMENT
_format$ = 8						; size = 4
_n1$ = 12						; size = 4
_n2$ = 16						; size = 4
_FormatTestLabel PROC					; COMDAT

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 122  :     static wchar_t buffer[256];
; 123  :     wsprintfW(buffer, format, n1, n2);

	mov	esi, esp
	mov	eax, DWORD PTR _n2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	push	OFFSET ?buffer@?1??FormatTestLabel@@9@9
	call	DWORD PTR __imp__wsprintfW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  :     return buffer;

	mov	eax, OFFSET ?buffer@?1??FormatTestLabel@@9@9

; 125  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FormatTestLabel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\debug.c
;	COMDAT _TEST_Assert
_TEXT	SEGMENT
_env$ = 8						; size = 4
_test_name$ = 12					; size = 4
_condition$ = 16					; size = 4
_reason$ = 20						; size = 4
_TEST_Assert PROC					; COMDAT

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __566B17FC_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 108  :     if (condition)

	cmp	DWORD PTR _condition$[ebp], 0
	je	SHORT $LN2@TEST_Asser

; 109  :     {
; 110  :         //env->log(L"テスト No.%d: %s => %s\n", test_total_count + 1, test_name, L"Ok");
; 111  :         ++test_ok_count;

	mov	eax, DWORD PTR _test_ok_count
	add	eax, 1
	mov	DWORD PTR _test_ok_count, eax

; 112  :     }

	jmp	SHORT $LN3@TEST_Asser
$LN2@TEST_Asser:

; 113  :     else
; 114  :     {
; 115  :         env->log(L"テスト No.%d: %s => %s (%s)\n", test_total_count + 1, test_name, L"***NG***", reason);

	mov	esi, esp
	mov	eax, DWORD PTR _reason$[ebp]
	push	eax
	push	OFFSET ??_C@_1BC@IPMCEBLM@?$AA?$CK?$AA?$CK?$AA?$CK?$AAN?$AAG?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	ecx, DWORD PTR _test_name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _test_total_count
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_1DE@HJPKPLII@?$PP?F?$PP?$LJ?$PP?H?$AA?5?$AAN?$AAo?$AA?4?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN@
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Asser:

; 116  :     }
; 117  :     ++test_total_count;

	mov	eax, DWORD PTR _test_total_count
	add	eax, 1
	mov	DWORD PTR _test_total_count, eax

; 118  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEST_Assert ENDP
_TEXT	ENDS
END
