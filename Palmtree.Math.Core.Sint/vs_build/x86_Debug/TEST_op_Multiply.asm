; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\TEST_op_Multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__059414E1_pmc_sint_debug@h DB 01H
__9E9C72DE_test_op_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_Multiply_I_X
PUBLIC	_TEST_Multiply_L_X
PUBLIC	_TEST_Multiply_UX_X
PUBLIC	_TEST_Multiply_X_I
PUBLIC	_TEST_Multiply_X_L
PUBLIC	_TEST_Multiply_X_UX
PUBLIC	_TEST_Multiply_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
CONST	SEGMENT
??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 0c7H
	DB	'0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H, 'N', 0f4H
	DB	081H, 'W0j0D0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'T'
	DB	00H, 'o', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ DB 'F'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_sint_debug.h
;	COMDAT __EQUALS_MEMORY
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC					; COMDAT

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __059414E1_pmc_sint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 96   :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 97   :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 98   :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 99   :     {
; 100  :         if (*buffer1 != *buffer2)

	mov	eax, DWORD PTR _buffer1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _buffer2$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN5@EQUALS_MEM

; 101  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 102  :         ++buffer1;

	mov	eax, DWORD PTR _buffer1$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer1$[ebp], eax

; 103  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 104  :         --count1;

	mov	eax, DWORD PTR _count1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count1$[ebp], eax

; 105  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 106  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_X_X
_TEXT	SEGMENT
tv176 = -560						; size = 4
tv161 = -560						; size = 4
tv142 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_w_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_w$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_Multiply_X_X PROC					; COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 157  :     PMC_HANDLE_SINT u;
; 158  :     PMC_HANDLE_SINT v;
; 159  :     PMC_HANDLE_SINT w;
; 160  :     unsigned char actual_z_buf[256];
; 161  :     size_t actual_z_buf_size;
; 162  :     PMC_STATUS_CODE result;
; 163  :     PMC_STATUS_CODE u_result;
; 164  :     PMC_STATUS_CODE v_result;
; 165  :     PMC_STATUS_CODE w_result;
; 166  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 167  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 168  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 3), (w_result = ep->Multiply_X_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 169  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 170  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 171  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 172  :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 173  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN3@TEST_Multi

; 174  :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Multi:

; 175  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 176  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 177  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@TEST_Multi:
	DD	5
	DD	$LN21@TEST_Multi
$LN21@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_Multi
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_Multi
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_Multi
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_Multi
$LN20@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN17@TEST_Multi:
	DB	118					; 00000076H
	DB	0
$LN16@TEST_Multi:
	DB	117					; 00000075H
	DB	0
_TEST_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_X_UX
_TEXT	SEGMENT
tv176 = -560						; size = 4
tv161 = -560						; size = 4
tv142 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_w_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_w$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_Multiply_X_UX PROC				; COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 134  :     PMC_HANDLE_SINT u;
; 135  :     PMC_HANDLE_UINT v;
; 136  :     PMC_HANDLE_SINT w;
; 137  :     unsigned char actual_z_buf[256];
; 138  :     size_t actual_z_buf_size;
; 139  :     PMC_STATUS_CODE result;
; 140  :     PMC_STATUS_CODE u_result;
; 141  :     PMC_STATUS_CODE v_result;
; 142  :     PMC_STATUS_CODE w_result;
; 143  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 144  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 2), (v_result = ep->uint.FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 145  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 3), (w_result = ep->Multiply_X_UX(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_UXの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 146  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 147  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 148  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 149  :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 150  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN3@TEST_Multi

; 151  :         ep->uint.Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Multi:

; 152  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 153  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 154  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@TEST_Multi:
	DD	5
	DD	$LN21@TEST_Multi
$LN21@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_Multi
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_Multi
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_Multi
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_Multi
$LN20@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN17@TEST_Multi:
	DB	118					; 00000076H
	DB	0
$LN16@TEST_Multi:
	DB	117					; 00000075H
	DB	0
_TEST_Multiply_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_X_L
_TEXT	SEGMENT
tv158 = -536						; size = 4
tv143 = -536						; size = 4
tv92 = -536						; size = 4
tv74 = -536						; size = 4
_w_result$ = -336					; size = 4
_u_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 8
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_Multiply_X_L PROC					; COMDAT

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 115  :     PMC_HANDLE_SINT u;
; 116  :     PMC_HANDLE_SINT w;
; 117  :     unsigned char actual_w_buf[256];
; 118  :     size_t actual_w_buf_size;
; 119  :     PMC_STATUS_CODE result;
; 120  :     PMC_STATUS_CODE u_result;
; 121  :     PMC_STATUS_CODE w_result;
; 122  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 123  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 2), (w_result = ep->Multiply_X_L(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Lの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+400]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_Multi:
	mov	eax, DWORD PTR _w_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 124  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 125  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 126  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 127  :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 128  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 129  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 130  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@TEST_Multi:
	DD	4
	DD	$LN17@TEST_Multi
$LN17@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_Multi
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_Multi
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_Multi
$LN16@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_Multi:
	DB	117					; 00000075H
	DB	0
_TEST_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_X_I
_TEXT	SEGMENT
tv158 = -536						; size = 4
tv143 = -536						; size = 4
tv92 = -536						; size = 4
tv74 = -536						; size = 4
_w_result$ = -336					; size = 4
_u_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 4
_desired_w_buf$ = 32					; size = 4
_desired_w_buf_size$ = 36				; size = 4
_TEST_Multiply_X_I PROC					; COMDAT

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 96   :     PMC_HANDLE_SINT u;
; 97   :     PMC_HANDLE_SINT w;
; 98   :     unsigned char actual_w_buf[256];
; 99   :     size_t actual_w_buf_size;
; 100  :     PMC_STATUS_CODE result;
; 101  :     PMC_STATUS_CODE u_result;
; 102  :     PMC_STATUS_CODE w_result;
; 103  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 104  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 2), (w_result = ep->Multiply_X_I(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Iの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 105  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 106  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 107  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 108  :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 109  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 110  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 111  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@TEST_Multi:
	DD	4
	DD	$LN17@TEST_Multi
$LN17@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_Multi
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_Multi
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_Multi
$LN16@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_Multi:
	DB	117					; 00000075H
	DB	0
_TEST_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_UX_X
_TEXT	SEGMENT
tv176 = -560						; size = 4
tv161 = -560						; size = 4
tv142 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_w_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_w_buf_size$ = -312				; size = 4
_actual_w_buf$ = -300					; size = 256
_w$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_Multiply_UX_X PROC				; COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 72   :     PMC_HANDLE_UINT u;
; 73   :     PMC_HANDLE_SINT v;
; 74   :     PMC_HANDLE_SINT w;
; 75   :     unsigned char actual_w_buf[256];
; 76   :     size_t actual_w_buf_size;
; 77   :     PMC_STATUS_CODE result;
; 78   :     PMC_STATUS_CODE u_result;
; 79   :     PMC_STATUS_CODE v_result;
; 80   :     PMC_STATUS_CODE w_result;
; 81   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 1), (u_result = ep->uint.FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 82   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 83   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 3), (w_result = ep->Multiply_UX_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_UX_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+392]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 84   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 85   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 86   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 87   :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 88   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN3@TEST_Multi

; 89   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Multi:

; 90   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 91   :         ep->uint.Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 92   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@TEST_Multi:
	DD	5
	DD	$LN21@TEST_Multi
$LN21@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_Multi
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_Multi
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_Multi
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_Multi
$LN20@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN17@TEST_Multi:
	DB	118					; 00000076H
	DB	0
$LN16@TEST_Multi:
	DB	117					; 00000075H
	DB	0
_TEST_Multiply_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_L_X
_TEXT	SEGMENT
tv158 = -536						; size = 4
tv143 = -536						; size = 4
tv92 = -536						; size = 4
tv74 = -536						; size = 4
_w_result$ = -336					; size = 4
_v_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_Multiply_L_X PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     PMC_HANDLE_SINT v;
; 54   :     PMC_HANDLE_SINT w;
; 55   :     unsigned char actual_w_buf[256];
; 56   :     size_t actual_w_buf_size;
; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_STATUS_CODE v_result;
; 59   :     PMC_STATUS_CODE w_result;
; 60   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 61   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 2), (w_result = ep->Multiply_L_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_L_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+388]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_Multi:
	mov	eax, DWORD PTR _w_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 62   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 63   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 64   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 65   :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 66   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 67   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 68   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@TEST_Multi:
	DD	4
	DD	$LN17@TEST_Multi
$LN17@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_Multi
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_Multi
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_Multi
$LN16@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_Multi:
	DB	118					; 00000076H
	DB	0
_TEST_Multiply_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT _TEST_Multiply_I_X
_TEXT	SEGMENT
tv158 = -536						; size = 4
tv143 = -536						; size = 4
tv92 = -536						; size = 4
tv74 = -536						; size = 4
_w_result$ = -336					; size = 4
_v_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_w_buf$ = 32					; size = 4
_desired_w_buf_size$ = 36				; size = 4
_TEST_Multiply_I_X PROC					; COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9E9C72DE_test_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_SINT v;
; 35   :     PMC_HANDLE_SINT w;
; 36   :     unsigned char actual_w_buf[256];
; 37   :     size_t actual_w_buf_size;
; 38   :     PMC_STATUS_CODE result;
; 39   :     PMC_STATUS_CODE v_result;
; 40   :     PMC_STATUS_CODE w_result;
; 41   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 42   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 2), (w_result = ep->Multiply_I_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_I_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 43   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 44   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_Multi:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 45   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_Multi

; 46   :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_Multi:

; 47   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_Multi

; 48   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Multi:

; 49   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_Multi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@TEST_Multi:
	DD	4
	DD	$LN17@TEST_Multi
$LN17@TEST_Multi:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_Multi
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_Multi
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_Multi
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_Multi
$LN16@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_Multi:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_Multi:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_Multi:
	DB	118					; 00000076H
	DB	0
_TEST_Multiply_I_X ENDP
_TEXT	ENDS
END
