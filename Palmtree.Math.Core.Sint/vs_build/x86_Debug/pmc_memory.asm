; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:014H
COMM	_number_one:BYTE:014H
COMM	_number_minus_one:BYTE:014H
COMM	_hLocalHeap:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__16A7E60D_pmc_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Negate_Imp
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	_PMC_GetConstantValue_I@8
PUBLIC	_AttatchNumber
PUBLIC	_DetatchNumber
PUBLIC	__JustMyCode_Default
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DetatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC					; COMDAT

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 178  :     if (p == NULL || !p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@DetatchNum
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 179  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 180  :     CleanUpNumber(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CleanUpNumber
	add	esp, 4
$LN1@DetatchNum:

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AttatchNumber
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = 8							; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_AttatchNumber PROC					; COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 156  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	eax, DWORD PTR _abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 157  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AttatchNum

; 158  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 159  :     p->IS_STATIC = TRUE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	or	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 160  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 161  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _CleanUpNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC					; COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 151  :     ep_uint.Dispose(p->ABS);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 152  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _InitializeNumber
_TEXT	SEGMENT
tv150 = -224						; size = 4
tv141 = -224						; size = 4
tv130 = -224						; size = 4
tv87 = -224						; size = 4
tv76 = -224						; size = 4
_type$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_InitializeNumber PROC					; COMDAT

; 123  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 124  :     PMC_STATUS_CODE result;
; 125  :     ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 126  :     p->SIGNATURE1 = PMC_SIGNATURE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 1231244656		; 49634d70H

; 127  :     p->SIGNATURE2 = PMC_SINT_SIGNATURE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 1951287667		; 744e4973H

; 128  :     p->SIGN = sign;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _sign$[ebp]
	mov	BYTE PTR [eax+12], cl

; 129  :     p->ABS = abs;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _abs$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 130  : 
; 131  :     PMC_NUMBER_TYPE_CODE type;
; 132  :     if ((result = ep_uint.GetNumberType_X(abs, &type)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _abs$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@Initialize

; 133  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@Initialize
$LN2@Initialize:

; 134  :     p->IS_EVEN = (type & PMC_NUMBER_TYPE_IS_EVEN) != 0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, 8
	je	SHORT $LN6@Initialize
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN7@Initialize
$LN6@Initialize:
	mov	DWORD PTR tv76[ebp], 0
$LN7@Initialize:
	mov	ecx, DWORD PTR tv76[ebp]
	and	ecx, 1
	shl	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -17				; ffffffefH
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 135  :     p->IS_MINUS_ONE = sign < 0 && (type & PMC_NUMBER_TYPE_IS_ONE) != 0;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jge	SHORT $LN8@Initialize
	mov	ecx, DWORD PTR _type$[ebp]
	and	ecx, 2
	je	SHORT $LN8@Initialize
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN9@Initialize
$LN8@Initialize:
	mov	DWORD PTR tv87[ebp], 0
$LN9@Initialize:
	mov	edx, DWORD PTR tv87[ebp]
	and	edx, 1
	shl	edx, 3
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -9					; fffffff7H
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 136  :     p->IS_ONE = sign > 0 && (type & PMC_NUMBER_TYPE_IS_ONE) != 0;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN10@Initialize
	mov	ecx, DWORD PTR _type$[ebp]
	and	ecx, 2
	je	SHORT $LN10@Initialize
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN11@Initialize
$LN10@Initialize:
	mov	DWORD PTR tv130[ebp], 0
$LN11@Initialize:
	mov	edx, DWORD PTR tv130[ebp]
	and	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -5					; fffffffbH
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 137  :     p->IS_POWER_OF_TWO = sign > 0 && (type & PMC_NUMBER_TYPE_IS_POWER_OF_TWO) != 0;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN12@Initialize
	mov	ecx, DWORD PTR _type$[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN12@Initialize
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN13@Initialize
$LN12@Initialize:
	mov	DWORD PTR tv141[ebp], 0
$LN13@Initialize:
	mov	edx, DWORD PTR tv141[ebp]
	and	edx, 1
	shl	edx, 5
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -33				; ffffffdfH
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 138  :     p->IS_ZERO = (type & PMC_NUMBER_TYPE_IS_ZERO) != 0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, 1
	je	SHORT $LN14@Initialize
	mov	DWORD PTR tv150[ebp], 1
	jmp	SHORT $LN15@Initialize
$LN14@Initialize:
	mov	DWORD PTR tv150[ebp], 0
$LN15@Initialize:
	mov	ecx, DWORD PTR tv150[ebp]
	and	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+16]
	and	eax, -3					; fffffffdH
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 139  : 
; 140  :     if (sign != 0 && p->IS_ZERO)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN3@Initialize
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN3@Initialize

; 141  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@Initialize
$LN3@Initialize:

; 142  : 
; 143  :     if (sign == 0 && !p->IS_ZERO)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Initialize
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	jne	SHORT $LN4@Initialize

; 144  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 145  : 
; 146  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 147  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@Initialize:
	DD	1
	DD	$LN17@Initialize
$LN17@Initialize:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN16@Initialize
$LN16@Initialize:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _FillNumberHeader
_TEXT	SEGMENT
___p$1 = -8						; size = 4
_p$ = 8							; size = 4
_FillNumberHeader PROC					; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 88   : #ifdef _M_IX64
; 89   :     if (sizeof(*p) == sizeof(_UINT64_T) * 3)
; 90   :     {
; 91   :         _UINT64_T* __p = (_UINT64_T*)p;
; 92   :         __p[0] = DEFAULT_MEMORY_DATA;
; 93   :         __p[1] = DEFAULT_MEMORY_DATA;
; 94   :         __p[2] = DEFAULT_MEMORY_DATA;
; 95   :     }
; 96   :     else
; 97   :     {
; 98   : #endif
; 99   :         if (sizeof(*p) == sizeof(_UINT32_T) * 4)

	xor	eax, eax
	je	SHORT $LN2@FillNumber

; 100  :         {
; 101  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], eax

; 102  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 103  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 104  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 105  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 106  :         }

	jmp	SHORT $LN1@FillNumber
$LN2@FillNumber:

; 107  : #ifdef _M_IX64
; 108  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 109  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 110  : #endif
; 111  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@FillNumber

; 112  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	push	5
	push	-858993460				; ccccccccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN4@FillNumber:

; 113  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@FillNumber

; 114  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	push	10					; 0000000aH
	push	52428					; 0000ccccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN6@FillNumber:

; 115  :         else
; 116  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	push	20					; 00000014H
	push	204					; 000000ccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@FillNumber:

; 117  : #ifdef _M_IX64
; 118  :     }
; 119  : #endif
; 120  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _ClearNumberHeader
_TEXT	SEGMENT
___p$1 = -8						; size = 4
_p$ = 8							; size = 4
_ClearNumberHeader PROC					; COMDAT

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 52   : #ifdef _M_IX64
; 53   :     if (sizeof(*p) == sizeof(_UINT64_T) * 3)
; 54   :     {
; 55   :         _UINT64_T* __p = (_UINT64_T*)p;
; 56   :         __p[0] = 0;
; 57   :         __p[1] = 0;
; 58   :         __p[2] = 0;
; 59   :     }
; 60   :     else
; 61   :     {
; 62   : #endif
; 63   :         if (sizeof(*p) == sizeof(_UINT32_T) * 4)

	xor	eax, eax
	je	SHORT $LN2@ClearNumbe

; 64   :         {
; 65   :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], eax

; 66   :             __p[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 67   :             __p[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 68   :             __p[2] = 0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 69   :             __p[3] = 0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 70   :         }

	jmp	SHORT $LN1@ClearNumbe
$LN2@ClearNumbe:

; 71   : #ifdef _M_IX64
; 72   :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 73   :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 74   : #endif
; 75   :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ClearNumbe

; 76   :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	push	5
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_32
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN4@ClearNumbe:

; 77   :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@ClearNumbe

; 78   :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	push	10					; 0000000aH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_16
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN6@ClearNumbe:

; 79   :         else
; 80   :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	push	20					; 00000014H
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_BYTE
	add	esp, 8
$LN1@ClearNumbe:

; 81   : #ifdef _M_IX64
; 82   :     }
; 83   : #endif
; 84   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC					; COMDAT

; 148  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 150  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC					; COMDAT

; 143  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 144  :         __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 145  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC					; COMDAT

; 138  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 139  :         __stosb(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 140  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC					; COMDAT

; 98   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 100  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC					; COMDAT

; 93   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 94   :         __stosw(d, 0, count);

	xor	eax, eax
	mov	edi, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 95   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 89   :         __stosb(d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	al, al
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 90   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _PMC_GetConstantValue_I@8
_TEXT	SEGMENT
tv64 = -196						; size = 4
_type$ = 8						; size = 4
_o$ = 12						; size = 4
_PMC_GetConstantValue_I@8 PROC				; COMDAT

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 268  :     switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@PMC_GetCon
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@PMC_GetCon
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN6@PMC_GetCon
	jmp	SHORT $LN7@PMC_GetCon
$LN4@PMC_GetCon:

; 269  :     {
; 270  :     case PMC_CONSTANT_ZERO:
; 271  :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 272  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 273  :     case PMC_CONSTANT_ONE:
; 274  :         *o = (PMC_HANDLE_SINT)&number_one;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 275  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 276  :     case PMC_CONSTANT_MINUS_ONE:
; 277  :         *o = (PMC_HANDLE_SINT)&number_minus_one;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 278  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN7@PMC_GetCon:

; 279  :     default:
; 280  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_GetCon:

; 281  :     }
; 282  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_GetConstantValue_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _PMC_Dispose@4
_TEXT	SEGMENT
_np$ = -8						; size = 4
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC					; COMDAT

; 285  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 286  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 287  :     DeallocateNumber(np);

	mov	eax, DWORD PTR _np$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 288  :     return;
; 289  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _Initialize_Memory
_TEXT	SEGMENT
_unsigned_one$ = -96					; size = 4
_unsigned_zero$ = -84					; size = 4
_number_minus_one_ok$ = -72				; size = 4
_number_one_ok$ = -60					; size = 4
_number_zero_ok$ = -48					; size = 4
_number_unsigned_one_ok$ = -36				; size = 4
_number_unsigned_zero_ok$ = -24				; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_Initialize_Memory PROC					; COMDAT

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 293  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR _result$[ebp], 0

; 294  : 
; 295  :     BOOL number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR _number_unsigned_zero_ok$[ebp], 1

; 296  :     BOOL number_unsigned_one_ok = TRUE;

	mov	DWORD PTR _number_unsigned_one_ok$[ebp], 1

; 297  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1

; 298  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1

; 299  :     BOOL number_minus_one_ok = TRUE;

	mov	DWORD PTR _number_minus_one_ok$[ebp], 1

; 300  : 
; 301  :     PMC_HANDLE_UINT unsigned_zero = NULL;

	mov	DWORD PTR _unsigned_zero$[ebp], 0

; 302  :     PMC_HANDLE_UINT unsigned_one = NULL;

	mov	DWORD PTR _unsigned_one$[ebp], 0

; 303  : 
; 304  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 305  :     {
; 306  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ZERO, &unsigned_zero)) == PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _unsigned_zero$[ebp]
	push	eax
	push	1
	call	DWORD PTR _ep_uint+24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 307  :             number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR _number_unsigned_zero_ok$[ebp], 1
$LN2@Initialize:

; 308  :     }
; 309  : 
; 310  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 311  :     {
; 312  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ONE, &unsigned_one)) == PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _unsigned_one$[ebp]
	push	eax
	push	2
	call	DWORD PTR _ep_uint+24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 313  :             number_unsigned_one_ok = TRUE;

	mov	DWORD PTR _number_unsigned_one_ok$[ebp], 1
$LN4@Initialize:

; 314  :     }
; 315  : 
; 316  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@Initialize

; 317  :     {
; 318  :         if ((result = AttatchNumber(&number_zero, 0, unsigned_zero)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _unsigned_zero$[ebp]
	push	eax
	push	0
	push	OFFSET _number_zero
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@Initialize

; 319  :             number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1
$LN6@Initialize:

; 320  :     }
; 321  : 
; 322  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN8@Initialize

; 323  :     {
; 324  :         if ((result = AttatchNumber(&number_one, 1, unsigned_one)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _unsigned_one$[ebp]
	push	eax
	push	1
	push	OFFSET _number_one
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN8@Initialize

; 325  :             number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1
$LN8@Initialize:

; 326  :     }
; 327  : 
; 328  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@Initialize

; 329  :     {
; 330  :         if ((result = AttatchNumber(&number_minus_one, -1, unsigned_one)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _unsigned_one$[ebp]
	push	eax
	push	-1
	push	OFFSET _number_minus_one
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@Initialize

; 331  :             number_minus_one_ok = TRUE;

	mov	DWORD PTR _number_minus_one_ok$[ebp], 1
$LN10@Initialize:

; 332  :     }
; 333  : 
; 334  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@Initialize

; 335  :     {
; 336  :         if (number_zero_ok)

	cmp	DWORD PTR _number_zero_ok$[ebp], 0
	je	SHORT $LN13@Initialize

; 337  :             DetatchNumber(&number_zero);

	push	OFFSET _number_zero
	call	_DetatchNumber
	add	esp, 4
$LN13@Initialize:

; 338  :         if (number_one_ok)

	cmp	DWORD PTR _number_one_ok$[ebp], 0
	je	SHORT $LN14@Initialize

; 339  :             DetatchNumber(&number_one);

	push	OFFSET _number_one
	call	_DetatchNumber
	add	esp, 4
$LN14@Initialize:

; 340  :         if (number_minus_one_ok)

	cmp	DWORD PTR _number_minus_one_ok$[ebp], 0
	je	SHORT $LN12@Initialize

; 341  :             DetatchNumber(&number_minus_one);

	push	OFFSET _number_minus_one
	call	_DetatchNumber
	add	esp, 4
$LN12@Initialize:

; 342  :     }
; 343  : 
; 344  :     return (result);

	mov	eax, DWORD PTR _result$[ebp]

; 345  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@Initialize:
	DD	2
	DD	$LN19@Initialize
$LN19@Initialize:
	DD	-84					; ffffffacH
	DD	4
	DD	$LN17@Initialize
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN18@Initialize
$LN18@Initialize:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	0
$LN17@Initialize:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _Negate_Imp
_TEXT	SEGMENT
_o$ = -36						; size = 4
_new_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_Negate_Imp PROC					; COMDAT

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 237  :     if (x->IS_ZERO)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@Negate_Imp

; 238  :     {
; 239  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 240  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN2@Negate_Imp:

; 241  :     }
; 242  :     if (x->IS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN3@Negate_Imp

; 243  :     {
; 244  :         *op = &number_minus_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 245  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN3@Negate_Imp:

; 246  :     }
; 247  :     if (x->IS_MINUS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 3
	and	ecx, 1
	je	SHORT $LN4@Negate_Imp

; 248  :     {
; 249  :         *op = &number_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 250  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@Negate_Imp
$LN4@Negate_Imp:

; 251  :     }
; 252  :     PMC_STATUS_CODE result;
; 253  :     PMC_HANDLE_UINT new_abs;
; 254  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@Negate_Imp

; 255  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Negate_Imp
$LN5@Negate_Imp:

; 256  :     NUMBER_HEADER* o;
; 257  :     if ((result = AllocateNumber(&o, -x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	neg	edx
	push	edx
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@Negate_Imp

; 258  :     {
; 259  :         ep_uint.Dispose(new_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 260  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Negate_Imp
$LN6@Negate_Imp:

; 261  :     }
; 262  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx

; 263  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Negate_Imp:

; 264  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Negate_Imp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@Negate_Imp:
	DD	2
	DD	$LN10@Negate_Imp
$LN10@Negate_Imp:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Negate_Imp
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN9@Negate_Imp
$LN9@Negate_Imp:
	DB	111					; 0000006fH
	DB	0
$LN8@Negate_Imp:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_Negate_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DuplicateNumber
_TEXT	SEGMENT
_o$ = -36						; size = 4
_new_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC					; COMDAT

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 201  :     if (x->IS_STATIC)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	je	SHORT $LN2@DuplicateN

; 202  :     {
; 203  :         *op = x;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 204  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN2@DuplicateN:

; 205  :     }
; 206  :     if (x->IS_ZERO)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN3@DuplicateN

; 207  :     {
; 208  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 209  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN3@DuplicateN:

; 210  :     }
; 211  :     if (x->IS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN4@DuplicateN

; 212  :     {
; 213  :         *op = &number_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 214  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN4@DuplicateN:

; 215  :     }
; 216  :     if (x->IS_MINUS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 3
	and	ecx, 1
	je	SHORT $LN5@DuplicateN

; 217  :     {
; 218  :         *op = &number_minus_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 219  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN5@DuplicateN:

; 220  :     }
; 221  :     PMC_STATUS_CODE result;
; 222  :     PMC_HANDLE_UINT new_abs;
; 223  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@DuplicateN

; 224  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN6@DuplicateN:

; 225  :     NUMBER_HEADER* o;
; 226  :     if ((result = AllocateNumber(&o, x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	push	edx
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@DuplicateN

; 227  :     {
; 228  :         ep_uint.Dispose(new_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 229  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN7@DuplicateN:

; 230  :     }
; 231  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx

; 232  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 233  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DuplicateN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@DuplicateN:
	DD	2
	DD	$LN11@DuplicateN
$LN11@DuplicateN:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@DuplicateN
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN10@DuplicateN
$LN10@DuplicateN:
	DB	111					; 0000006fH
	DB	0
$LN9@DuplicateN:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _CheckNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CheckNumber PROC					; COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 194  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_SINT_SIGNATURE)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 1951287667		; 744e4973H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 195  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 196  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DeallocateNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC					; COMDAT

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 185  :     if (p == NULL || p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Deallocate
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 186  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 187  :     CleanUpNumber(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CleanUpNumber
	add	esp, 4

; 188  :     FillNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FillNumberHeader
	add	esp, 4

; 189  :     HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AllocateNumber
_TEXT	SEGMENT
_result$ = -20						; size = 4
_p$ = -8						; size = 4
_pp$ = 8						; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_AllocateNumber PROC					; COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 165  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	esi, esp
	push	20					; 00000014H
	push	8
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 166  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@AllocateNu

; 167  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 168  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	eax, DWORD PTR _abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 169  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AllocateNu

; 170  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 171  :     p->IS_STATIC = FALSE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 172  :     *pp = p;

	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 173  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 174  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DeallocateHeapArea
_TEXT	SEGMENT
_DeallocateHeapArea PROC				; COMDAT

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 357  :     if (hLocalHeap != NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	je	SHORT $LN1@Deallocate

; 358  :     {
; 359  :         HeapDestroy(hLocalHeap);

	mov	esi, esp
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 360  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN1@Deallocate:

; 361  :     }
; 362  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AllocateHeapArea
_TEXT	SEGMENT
_AllocateHeapArea PROC					; COMDAT

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 349  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	mov	esi, esp
	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLocalHeap, eax

; 350  :     if (hLocalHeap == NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 351  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 352  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 353  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
