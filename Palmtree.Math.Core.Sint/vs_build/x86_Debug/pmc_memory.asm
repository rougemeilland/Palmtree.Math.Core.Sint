; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:018H
COMM	_number_one:BYTE:018H
COMM	_number_minus_one:BYTE:018H
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
COMM	_hLocalHeap:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__16A7E60D_pmc_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Negate_Imp
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	_PMC_GetConstantValue_I@8
PUBLIC	_AttatchNumber
PUBLIC	_DetatchNumber
PUBLIC	__JustMyCode_Default
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DetatchNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC					; COMDAT

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 186  :     if (p == NULL || !p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@DetatchNum
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 187  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 188  :     CleanUpNumber(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CleanUpNumber
	add	esp, 4
$LN1@DetatchNum:

; 189  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AttatchNumber
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = 8							; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_AttatchNumber PROC					; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 164  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	eax, DWORD PTR _abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 165  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AttatchNum

; 166  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 167  :     p->IS_STATIC = TRUE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	or	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 168  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 169  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _CleanUpNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC					; COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 159  :     ep_uint.Dispose(p->ABS);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _InitializeNumber
_TEXT	SEGMENT
tv143 = -196						; size = 4
tv130 = -196						; size = 4
tv85 = -196						; size = 4
_p$ = 8							; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_InitializeNumber PROC					; COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 132  :     ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 133  :     p->SIGNATURE1 = PMC_SIGNATURE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], 1231244656		; 49634d70H

; 134  :     p->SIGNATURE2 = PMC_SINT_SIGNATURE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 1951287667		; 744e4973H

; 135  :     p->SIGN = sign;

	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR _sign$[ebp]
	mov	BYTE PTR [eax+16], cl

; 136  :     p->ABS = abs;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _abs$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 137  :     p->IS_EVEN = abs->FLAGS.IS_EVEN;

	mov	eax, DWORD PTR _abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 2
	and	ecx, 1
	and	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -9					; fffffff7H
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 138  :     p->IS_MINUS_ONE = sign < 0 && abs->FLAGS.IS_ONE;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jge	SHORT $LN6@Initialize
	mov	ecx, DWORD PTR _abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN6@Initialize
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN7@Initialize
$LN6@Initialize:
	mov	DWORD PTR tv85[ebp], 0
$LN7@Initialize:
	mov	eax, DWORD PTR tv85[ebp]
	and	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -5					; fffffffbH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 139  :     p->IS_ONE = sign > 0 && abs->FLAGS.IS_ONE;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN8@Initialize
	mov	ecx, DWORD PTR _abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN8@Initialize
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN9@Initialize
$LN8@Initialize:
	mov	DWORD PTR tv130[ebp], 0
$LN9@Initialize:
	mov	eax, DWORD PTR tv130[ebp]
	and	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -3					; fffffffdH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 140  :     p->IS_POWER_OF_TWO = sign > 0 && abs->FLAGS.IS_POWER_OF_TWO;

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jle	SHORT $LN10@Initialize
	mov	ecx, DWORD PTR _abs$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 3
	and	edx, 1
	je	SHORT $LN10@Initialize
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN11@Initialize
$LN10@Initialize:
	mov	DWORD PTR tv143[ebp], 0
$LN11@Initialize:
	mov	eax, DWORD PTR tv143[ebp]
	and	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, -17				; ffffffefH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], edx

; 141  :     p->IS_ZERO = abs->FLAGS.IS_ZERO;

	mov	eax, DWORD PTR _abs$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	and	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, -2					; fffffffeH
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 142  : 
; 143  : #ifdef _DEBUG
; 144  :     if (sign != -1 && sign != 0 && sign != 1)

	movsx	eax, BYTE PTR _sign$[ebp]
	cmp	eax, -1
	je	SHORT $LN2@Initialize
	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN2@Initialize
	movsx	eax, BYTE PTR _sign$[ebp]
	cmp	eax, 1
	je	SHORT $LN2@Initialize

; 145  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@Initialize
$LN2@Initialize:

; 146  : 
; 147  :     if (sign != 0 && p->IS_ZERO)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	je	SHORT $LN3@Initialize
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN3@Initialize

; 148  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@Initialize
$LN3@Initialize:

; 149  : 
; 150  :     if (sign == 0 && !p->IS_ZERO)

	movsx	eax, BYTE PTR _sign$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Initialize
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	jne	SHORT $LN4@Initialize

; 151  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 152  : #endif
; 153  : 
; 154  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 155  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _FillNumberHeader
_TEXT	SEGMENT
___p$1 = -8						; size = 4
_p$ = 8							; size = 4
_FillNumberHeader PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   : #ifdef _M_IX64
; 94   :     if (sizeof(*p) == sizeof(_UINT64_T) * 4)
; 95   :     {
; 96   :         _UINT64_T* __p = (_UINT64_T*)p;
; 97   :         __p[0] = DEFAULT_MEMORY_DATA;
; 98   :         __p[1] = DEFAULT_MEMORY_DATA;
; 99   :         __p[2] = DEFAULT_MEMORY_DATA;
; 100  :         __p[3] = DEFAULT_MEMORY_DATA;
; 101  :     }
; 102  :     else
; 103  :     {
; 104  : #endif
; 105  :         if (sizeof(*p) == sizeof(_UINT32_T) * 6)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@FillNumber

; 106  :         {
; 107  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], eax

; 108  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 109  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 110  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 111  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 112  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 113  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 114  :         }

	jmp	SHORT $LN1@FillNumber
$LN2@FillNumber:

; 115  : #ifdef _M_IX64
; 116  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 117  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 118  : #endif
; 119  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@FillNumber

; 120  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	push	6
	push	-858993460				; ccccccccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN4@FillNumber:

; 121  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@FillNumber

; 122  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	push	12					; 0000000cH
	push	52428					; 0000ccccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN6@FillNumber:

; 123  :         else
; 124  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	push	24					; 00000018H
	push	204					; 000000ccH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__FILL_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@FillNumber:

; 125  : #ifdef _M_IX64
; 126  :     }
; 127  : #endif
; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _ClearNumberHeader
_TEXT	SEGMENT
___p$1 = -8						; size = 4
_p$ = 8							; size = 4
_ClearNumberHeader PROC					; COMDAT

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 54   : #ifdef _M_IX64
; 55   :     if (sizeof(*p) == sizeof(_UINT64_T) * 4)
; 56   :     {
; 57   :         _UINT64_T* __p = (_UINT64_T*)p;
; 58   :         __p[0] = 0;
; 59   :         __p[1] = 0;
; 60   :         __p[2] = 0;
; 61   :         __p[3] = 0;
; 62   :     }
; 63   :     else
; 64   :     {
; 65   : #endif
; 66   :         if (sizeof(*p) == sizeof(_UINT32_T) * 6)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@ClearNumbe

; 67   :         {
; 68   :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], eax

; 69   :             __p[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 70   :             __p[1] = 0;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 71   :             __p[2] = 0;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 72   :             __p[3] = 0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 73   :             __p[4] = 0;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 74   :             __p[5] = 0;

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 75   :         }

	jmp	SHORT $LN1@ClearNumbe
$LN2@ClearNumbe:

; 76   : #ifdef _M_IX64
; 77   :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 78   :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 79   : #endif
; 80   :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ClearNumbe

; 81   :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	push	6
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_32
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN4@ClearNumbe:

; 82   :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@ClearNumbe

; 83   :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_16
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN6@ClearNumbe:

; 84   :         else
; 85   :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	push	24					; 00000018H
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	__ZERO_MEMORY_BYTE
	add	esp, 8
$LN1@ClearNumbe:

; 86   : #ifdef _M_IX64
; 87   :     }
; 88   : #endif
; 89   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC					; COMDAT

; 148  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 150  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC					; COMDAT

; 143  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 144  :         __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 145  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __FILL_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC					; COMDAT

; 138  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 139  :         __stosb(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 140  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC					; COMDAT

; 98   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 100  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_16
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC					; COMDAT

; 93   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 94   :         __stosw(d, 0, count);

	xor	eax, eax
	mov	edi, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 95   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __ZERO_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 89   :         __stosb(d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	al, al
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 90   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _PMC_GetConstantValue_I@8
_TEXT	SEGMENT
tv64 = -196						; size = 4
_type$ = 8						; size = 4
_o$ = 12						; size = 4
_PMC_GetConstantValue_I@8 PROC				; COMDAT

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 276  :     switch (type)

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN4@PMC_GetCon
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN5@PMC_GetCon
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN6@PMC_GetCon
	jmp	SHORT $LN7@PMC_GetCon
$LN4@PMC_GetCon:

; 277  :     {
; 278  :     case PMC_CONSTANT_ZERO:
; 279  :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 280  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 281  :     case PMC_CONSTANT_ONE:
; 282  :         *o = (PMC_HANDLE_SINT)&number_one;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 283  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 284  :     case PMC_CONSTANT_MINUS_ONE:
; 285  :         *o = (PMC_HANDLE_SINT)&number_minus_one;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 286  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN7@PMC_GetCon:

; 287  :     default:
; 288  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_GetCon:

; 289  :     }
; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_GetConstantValue_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _PMC_Dispose@4
_TEXT	SEGMENT
_np$ = -8						; size = 4
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC					; COMDAT

; 293  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 294  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 295  :     DeallocateNumber(np);

	mov	eax, DWORD PTR _np$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 296  :     return;
; 297  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _Initialize_Memory
_TEXT	SEGMENT
_number_minus_one_ok$ = -68				; size = 4
_number_one_ok$ = -56					; size = 4
_number_zero_ok$ = -44					; size = 4
_number_unsigned_one_ok$ = -32				; size = 4
_number_unsigned_zero_ok$ = -20				; size = 4
_result$ = -8						; size = 4
_Initialize_Memory PROC					; COMDAT

; 300  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 301  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR _result$[ebp], 0

; 302  : 
; 303  :     BOOL number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR _number_unsigned_zero_ok$[ebp], 1

; 304  :     BOOL number_unsigned_one_ok = TRUE;

	mov	DWORD PTR _number_unsigned_one_ok$[ebp], 1

; 305  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1

; 306  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1

; 307  :     BOOL number_minus_one_ok = TRUE;

	mov	DWORD PTR _number_minus_one_ok$[ebp], 1

; 308  : 
; 309  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 310  :     {
; 311  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ZERO, &uint_number_zero)) == PMC_STATUS_OK)

	mov	esi, esp
	push	OFFSET _uint_number_zero
	push	1
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 312  :             number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR _number_unsigned_zero_ok$[ebp], 1
$LN2@Initialize:

; 313  :     }
; 314  : 
; 315  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 316  :     {
; 317  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ONE, &uint_number_one)) == PMC_STATUS_OK)

	mov	esi, esp
	push	OFFSET _uint_number_one
	push	2
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 318  :             number_unsigned_one_ok = TRUE;

	mov	DWORD PTR _number_unsigned_one_ok$[ebp], 1
$LN4@Initialize:

; 319  :     }
; 320  : 
; 321  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@Initialize

; 322  :     {
; 323  :         if ((result = AttatchNumber(&number_zero, 0, uint_number_zero)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _uint_number_zero
	push	eax
	push	0
	push	OFFSET _number_zero
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@Initialize

; 324  :             number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1
$LN6@Initialize:

; 325  :     }
; 326  : 
; 327  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN8@Initialize

; 328  :     {
; 329  :         if ((result = AttatchNumber(&number_one, 1, uint_number_one)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _uint_number_one
	push	eax
	push	1
	push	OFFSET _number_one
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN8@Initialize

; 330  :             number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1
$LN8@Initialize:

; 331  :     }
; 332  : 
; 333  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@Initialize

; 334  :     {
; 335  :         if ((result = AttatchNumber(&number_minus_one, -1, uint_number_one)) == PMC_STATUS_OK)

	mov	eax, DWORD PTR _uint_number_one
	push	eax
	push	-1
	push	OFFSET _number_minus_one
	call	_AttatchNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@Initialize

; 336  :             number_minus_one_ok = TRUE;

	mov	DWORD PTR _number_minus_one_ok$[ebp], 1
$LN10@Initialize:

; 337  :     }
; 338  : 
; 339  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@Initialize

; 340  :     {
; 341  :         if (number_zero_ok)

	cmp	DWORD PTR _number_zero_ok$[ebp], 0
	je	SHORT $LN13@Initialize

; 342  :             DetatchNumber(&number_zero);

	push	OFFSET _number_zero
	call	_DetatchNumber
	add	esp, 4
$LN13@Initialize:

; 343  :         if (number_one_ok)

	cmp	DWORD PTR _number_one_ok$[ebp], 0
	je	SHORT $LN14@Initialize

; 344  :             DetatchNumber(&number_one);

	push	OFFSET _number_one
	call	_DetatchNumber
	add	esp, 4
$LN14@Initialize:

; 345  :         if (number_minus_one_ok)

	cmp	DWORD PTR _number_minus_one_ok$[ebp], 0
	je	SHORT $LN12@Initialize

; 346  :             DetatchNumber(&number_minus_one);

	push	OFFSET _number_minus_one
	call	_DetatchNumber
	add	esp, 4
$LN12@Initialize:

; 347  :     }
; 348  : 
; 349  :     return (result);

	mov	eax, DWORD PTR _result$[ebp]

; 350  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _Negate_Imp
_TEXT	SEGMENT
_o$ = -36						; size = 4
_new_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_Negate_Imp PROC					; COMDAT

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 245  :     if (x->IS_ZERO)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@Negate_Imp

; 246  :     {
; 247  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 248  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN2@Negate_Imp:

; 249  :     }
; 250  :     if (x->IS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN3@Negate_Imp

; 251  :     {
; 252  :         *op = &number_minus_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 253  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN3@Negate_Imp:

; 254  :     }
; 255  :     if (x->IS_MINUS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN4@Negate_Imp

; 256  :     {
; 257  :         *op = &number_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 258  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@Negate_Imp
$LN4@Negate_Imp:

; 259  :     }
; 260  :     PMC_STATUS_CODE result;
; 261  :     PMC_HANDLE_UINT new_abs;
; 262  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+40
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@Negate_Imp

; 263  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Negate_Imp
$LN5@Negate_Imp:

; 264  :     NUMBER_HEADER* o;
; 265  :     if ((result = AllocateNumber(&o, -x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	neg	edx
	push	edx
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@Negate_Imp

; 266  :     {
; 267  :         ep_uint.Dispose(new_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@Negate_Imp
$LN6@Negate_Imp:

; 269  :     }
; 270  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx

; 271  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Negate_Imp:

; 272  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Negate_Imp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@Negate_Imp:
	DD	2
	DD	$LN10@Negate_Imp
$LN10@Negate_Imp:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Negate_Imp
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN9@Negate_Imp
$LN9@Negate_Imp:
	DB	111					; 0000006fH
	DB	0
$LN8@Negate_Imp:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_Negate_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DuplicateNumber
_TEXT	SEGMENT
_o$ = -36						; size = 4
_new_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC					; COMDAT

; 208  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 209  :     if (x->IS_STATIC)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN2@DuplicateN

; 210  :     {
; 211  :         *op = x;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx

; 212  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN2@DuplicateN:

; 213  :     }
; 214  :     if (x->IS_ZERO)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN3@DuplicateN

; 215  :     {
; 216  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 217  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN3@DuplicateN:

; 218  :     }
; 219  :     if (x->IS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN4@DuplicateN

; 220  :     {
; 221  :         *op = &number_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_one

; 222  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN4@DuplicateN:

; 223  :     }
; 224  :     if (x->IS_MINUS_ONE)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN5@DuplicateN

; 225  :     {
; 226  :         *op = &number_minus_one;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_minus_one

; 227  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN5@DuplicateN:

; 228  :     }
; 229  :     PMC_STATUS_CODE result;
; 230  :     PMC_HANDLE_UINT new_abs;
; 231  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+40
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@DuplicateN

; 232  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN6@DuplicateN:

; 233  :     NUMBER_HEADER* o;
; 234  :     if ((result = AllocateNumber(&o, x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	push	edx
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@DuplicateN

; 235  :     {
; 236  :         ep_uint.Dispose(new_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _new_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 237  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN7@DuplicateN:

; 238  :     }
; 239  :     *op = o;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], ecx

; 240  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 241  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DuplicateN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@DuplicateN:
	DD	2
	DD	$LN11@DuplicateN
$LN11@DuplicateN:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@DuplicateN
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN10@DuplicateN
$LN10@DuplicateN:
	DB	111					; 0000006fH
	DB	0
$LN9@DuplicateN:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _CheckNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CheckNumber PROC					; COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 202  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_SINT_SIGNATURE)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+4], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+8], 1951287667		; 744e4973H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 203  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 204  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 205  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DeallocateNumber
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC					; COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 193  :     if (p == NULL || p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Deallocate
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 194  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 195  :     CleanUpNumber(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_CleanUpNumber
	add	esp, 4

; 196  :     FillNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FillNumberHeader
	add	esp, 4

; 197  :     HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 198  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AllocateNumber
_TEXT	SEGMENT
_result$ = -20						; size = 4
_p$ = -8						; size = 4
_pp$ = 8						; size = 4
_sign$ = 12						; size = 1
_abs$ = 16						; size = 4
_AllocateNumber PROC					; COMDAT

; 172  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 173  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	esi, esp
	push	24					; 00000018H
	push	8
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 174  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@AllocateNu

; 175  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 176  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	eax, DWORD PTR _abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 177  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AllocateNu

; 178  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 179  :     p->IS_STATIC = FALSE;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 180  :     *pp = p;

	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 181  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 182  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _DeallocateHeapArea
_TEXT	SEGMENT
_DeallocateHeapArea PROC				; COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 362  :     if (hLocalHeap != NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	je	SHORT $LN1@Deallocate

; 363  :     {
; 364  :         HeapDestroy(hLocalHeap);

	mov	esi, esp
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 365  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN1@Deallocate:

; 366  :     }
; 367  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT _AllocateHeapArea
_TEXT	SEGMENT
_AllocateHeapArea PROC					; COMDAT

; 353  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __16A7E60D_pmc_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 354  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	mov	esi, esp
	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLocalHeap, eax

; 355  :     if (hLocalHeap == NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 356  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 357  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 358  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
