; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\TEST_op_From_To.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__059414E1_pmc_sint_debug@h DB 01H
__3B9431F8_test_op_from_to@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_From_I
PUBLIC	_TEST_From_L
PUBLIC	_TEST_To_X_I
PUBLIC	_TEST_To_X_L
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@ ; `string'
PUBLIC	??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
CONST	SEGMENT
??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 0c7H
	DB	'0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H, 'N', 0f4H
	DB	081H, 'W0j0D0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
CONST	SEGMENT
??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H, 'B', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a'
	DB	00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_sint_debug.h
;	COMDAT __EQUALS_MEMORY
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC					; COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __059414E1_pmc_sint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 88   :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 89   :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 90   :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 91   :     {
; 92   :         if (*buffer1 != *buffer2)

	mov	eax, DWORD PTR _buffer1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _buffer2$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN5@EQUALS_MEM

; 93   :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 94   :         ++buffer1;

	mov	eax, DWORD PTR _buffer1$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer1$[ebp], eax

; 95   :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 96   :         --count1;

	mov	eax, DWORD PTR _count1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count1$[ebp], eax

; 97   :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 98   :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 99   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_from_to.c
;	COMDAT _TEST_To_X_L
_TEXT	SEGMENT
tv134 = -252						; size = 4
tv91 = -252						; size = 4
tv74 = -252						; size = 4
_x_result$ = -52					; size = 4
_result$ = -40						; size = 4
_rvalue$ = -28						; size = 8
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_desired_result_code$ = 28				; size = 4
_desired_rvalue$ = 32					; size = 8
_TEST_To_X_L PROC					; COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3B9431F8_test_op_from_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 76   :     PMC_HANDLE_SINT x;
; 77   :     __int64 rvalue;
; 78   :     PMC_STATUS_CODE result;
; 79   :     PMC_STATUS_CODE x_result;
; 80   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 1), (x_result = ep->FromByteArray(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_To_X_
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_To_X_
$LN5@TEST_To_X_:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_To_X_:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 81   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 2), (result = ep->To_X_L(x, &rvalue)) == desired_result_code, FormatTestMesssage(L"PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+320]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	ecx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN7@TEST_To_X_
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN8@TEST_To_X_
$LN7@TEST_To_X_:
	mov	DWORD PTR tv91[ebp], 0
$LN8@TEST_To_X_:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 82   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_To_X_

; 83   :         TEST_Assert(env, FormatTestLabel(L"PMC_To_X_L (%d.%d)", no, 3), rvalue == desired_rvalue, L"データの内容が一致しない");

	mov	eax, DWORD PTR _rvalue$[ebp]
	cmp	eax, DWORD PTR _desired_rvalue$[ebp]
	jne	SHORT $LN9@TEST_To_X_
	mov	ecx, DWORD PTR _rvalue$[ebp+4]
	cmp	ecx, DWORD PTR _desired_rvalue$[ebp+4]
	jne	SHORT $LN9@TEST_To_X_
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN10@TEST_To_X_
$LN9@TEST_To_X_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@TEST_To_X_:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	edx, DWORD PTR tv134[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET ??_C@_1CG@EADBOHEH@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_To_X_:

; 84   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_To_X_

; 85   :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_To_X_:

; 86   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_To_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@TEST_To_X_:
	DD	2
	DD	$LN13@TEST_To_X_
$LN13@TEST_To_X_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@TEST_To_X_
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN12@TEST_To_X_
$LN12@TEST_To_X_:
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN11@TEST_To_X_:
	DB	120					; 00000078H
	DB	0
_TEST_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_from_to.c
;	COMDAT _TEST_To_X_I
_TEXT	SEGMENT
tv134 = -248						; size = 4
tv91 = -248						; size = 4
tv74 = -248						; size = 4
_x_result$ = -48					; size = 4
_result$ = -36						; size = 4
_rvalue$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_buf$ = 20						; size = 4
_buf_size$ = 24						; size = 4
_desired_result_code$ = 28				; size = 4
_desired_rvalue$ = 32					; size = 4
_TEST_To_X_I PROC					; COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3B9431F8_test_op_from_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 62   :     PMC_HANDLE_SINT x;
; 63   :     __int32 rvalue;
; 64   :     PMC_STATUS_CODE result;
; 65   :     PMC_STATUS_CODE x_result;
; 66   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 1), (x_result = ep->FromByteArray(buf, buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_To_X_
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_To_X_
$LN5@TEST_To_X_:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_To_X_:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 67   :     TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 2), (result = ep->To_X_I(x, &rvalue)) == desired_result_code, FormatTestMesssage(L"PMC_To_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _rvalue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+316]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	ecx, DWORD PTR _result$[ebp]
	cmp	ecx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN7@TEST_To_X_
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN8@TEST_To_X_
$LN7@TEST_To_X_:
	mov	DWORD PTR tv91[ebp], 0
$LN8@TEST_To_X_:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DM@DINGNHGO@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 68   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	SHORT $LN2@TEST_To_X_

; 69   :         TEST_Assert(env, FormatTestLabel(L"PMC_To_X_I (%d.%d)", no, 3), rvalue == desired_rvalue, L"データの内容が一致しない");

	mov	eax, DWORD PTR _rvalue$[ebp]
	cmp	eax, DWORD PTR _desired_rvalue$[ebp]
	jne	SHORT $LN9@TEST_To_X_
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN10@TEST_To_X_
$LN9@TEST_To_X_:
	mov	DWORD PTR tv134[ebp], 0
$LN10@TEST_To_X_:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CG@GLLLDHFI@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_To_X_:

; 70   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_To_X_

; 71   :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_To_X_:

; 72   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_To_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@TEST_To_X_:
	DD	2
	DD	$LN13@TEST_To_X_
$LN13@TEST_To_X_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@TEST_To_X_
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@TEST_To_X_
$LN12@TEST_To_X_:
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN11@TEST_To_X_:
	DB	120					; 00000078H
	DB	0
_TEST_To_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_from_to.c
;	COMDAT _TEST_From_L
_TEXT	SEGMENT
tv139 = -512						; size = 4
tv92 = -512						; size = 4
tv73 = -512						; size = 4
_x_result$ = -312					; size = 4
_result$ = -300						; size = 4
_rlength$ = -288					; size = 4
_rbuffer$ = -276					; size = 256
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_v$ = 20						; size = 8
_buf$ = 28						; size = 4
_buf_size$ = 32						; size = 4
_TEST_From_L PROC					; COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3B9431F8_test_op_from_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 48   :     PMC_HANDLE_SINT x;
; 49   :     unsigned char rbuffer[256];
; 50   :     size_t rlength;
; 51   :     PMC_STATUS_CODE result;
; 52   :     PMC_STATUS_CODE x_result;
; 53   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 1), (x_result = ep->From_L(v, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_From_Lの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+288]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN4@TEST_From_
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN5@TEST_From_
$LN4@TEST_From_:
	mov	DWORD PTR tv73[ebp], 0
$LN5@TEST_From_:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DM@CBJBCHJE@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 2), (result = ep->ToByteArray(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _rlength$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _rbuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_From_
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_From_
$LN6@TEST_From_:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_From_:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 55   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_L (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlength$[ebp]
	push	edx
	lea	eax, DWORD PTR _rbuffer$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN8@TEST_From_
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN9@TEST_From_
$LN8@TEST_From_:
	mov	DWORD PTR tv139[ebp], 0
$LN9@TEST_From_:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CG@BFJHLMPC@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 56   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_From_

; 57   :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_From_:

; 58   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_From_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@TEST_From_:
	DD	3
	DD	$LN13@TEST_From_
$LN13@TEST_From_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@TEST_From_
	DD	-276					; fffffeecH
	DD	256					; 00000100H
	DD	$LN11@TEST_From_
	DD	-288					; fffffee0H
	DD	4
	DD	$LN12@TEST_From_
$LN12@TEST_From_:
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN11@TEST_From_:
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN10@TEST_From_:
	DB	120					; 00000078H
	DB	0
_TEST_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_from_to.c
;	COMDAT _TEST_From_I
_TEXT	SEGMENT
tv139 = -512						; size = 4
tv92 = -512						; size = 4
tv73 = -512						; size = 4
_x_result$ = -312					; size = 4
_result$ = -300						; size = 4
_rlength$ = -288					; size = 4
_rbuffer$ = -276					; size = 256
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_v$ = 20						; size = 4
_buf$ = 24						; size = 4
_buf_size$ = 28						; size = 4
_TEST_From_I PROC					; COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3B9431F8_test_op_from_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_SINT x;
; 35   :     unsigned char rbuffer[256];
; 36   :     size_t rlength;
; 37   :     PMC_STATUS_CODE result;
; 38   :     PMC_STATUS_CODE x_result;
; 39   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 1), (x_result = ep->From_I(v, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_From_Iの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+284]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN4@TEST_From_
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN5@TEST_From_
$LN4@TEST_From_:
	mov	DWORD PTR tv73[ebp], 0
$LN5@TEST_From_:
	mov	ecx, DWORD PTR _x_result$[ebp]
	push	ecx
	push	OFFSET ??_C@_1DM@GJNNLKAB@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET ??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 40   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 2), (result = ep->ToByteArray(x, rbuffer, sizeof(rbuffer), &rlength)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _rlength$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _rbuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+308]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_From_
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_From_
$LN6@TEST_From_:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_From_:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EG@MCOLJMDD@?$AAP?$AAM?$AAC?$AA_?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 41   :     TEST_Assert(env, FormatTestLabel(L"PMC_From_I (%d.%d)", no, 3), _EQUALS_MEMORY(rbuffer, rlength, buf, buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rlength$[ebp]
	push	edx
	lea	eax, DWORD PTR _rbuffer$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN8@TEST_From_
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN9@TEST_From_
$LN8@TEST_From_:
	mov	DWORD PTR tv139[ebp], 0
$LN9@TEST_From_:
	push	OFFSET ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv139[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CG@DOBNGMON@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 42   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_From_

; 43   :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_From_:

; 44   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_From_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@TEST_From_:
	DD	3
	DD	$LN13@TEST_From_
$LN13@TEST_From_:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN10@TEST_From_
	DD	-276					; fffffeecH
	DD	256					; 00000100H
	DD	$LN11@TEST_From_
	DD	-288					; fffffee0H
	DD	4
	DD	$LN12@TEST_From_
$LN12@TEST_From_:
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN11@TEST_From_:
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN10@TEST_From_:
	DB	120					; 00000078H
	DB	0
_TEST_From_I ENDP
_TEXT	ENDS
END
