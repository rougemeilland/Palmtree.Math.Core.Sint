; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\TEST_op_Remainder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__BFDCEF3B_test_op_remainder@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_Remainder_I_X
PUBLIC	_TEST_Remainder_L_X
PUBLIC	_TEST_Remainder_UX_X
PUBLIC	_TEST_Remainder_X_I
PUBLIC	_TEST_Remainder_X_L
PUBLIC	_TEST_Remainder_X_UX
PUBLIC	_TEST_Remainder_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1DM@FPONPMLK@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1DM@EHDAPCE@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@ ; `string'
PUBLIC	??_C@_1DO@DHNBEMIM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1DM@DHGCKJN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1DM@ELDKLHAI@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@ ; `string'
PUBLIC	??_C@_1DO@LADEACKM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1DM@LBHJMHBN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DM@LBHJMHBN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@LBHJMHBN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@LADEACKM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@LADEACKM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
CONST	SEGMENT
??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'U', 00H, 'X'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H
	DB	'd', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@ELDKLHAI@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@ELDKLHAI@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@DHGCKJN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@DHGCKJN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DHNBEMIM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@DHNBEMIM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
CONST	SEGMENT
??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'U', 00H, 'X', 00H, '_', 00H, 'X'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H
	DB	'd', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@EHDAPCE@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@EHDAPCE@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 'p'
	DB	'RYOn0$PL0', 00H, 'N', 0f4H, 081H, 'W0j0D0', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'T'
	DB	00H, 'o', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@FPONPMLK@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@FPONPMLK@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'D'
	DB	00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_', 00H
	DB	'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@ DB 'R'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ DB 'F'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_X_X
_TEXT	SEGMENT
tv178 = -560						; size = 4
tv163 = -560						; size = 4
tv143 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_r_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_r_buf_size$ = -312				; size = 4
_actual_r_buf$ = -300					; size = 256
_r$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_return_code$ = 36				; size = 4
_desired_r_buf$ = 40					; size = 4
_desired_r_buf_size$ = 44				; size = 4
_TEST_Remainder_X_X PROC				; COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 164  :     PMC_HANDLE_SINT u;
; 165  :     PMC_HANDLE_SINT v;
; 166  :     PMC_HANDLE_SINT r;
; 167  :     unsigned char actual_r_buf[256];
; 168  :     size_t actual_r_buf_size;
; 169  :     PMC_STATUS_CODE result;
; 170  :     PMC_STATUS_CODE u_result;
; 171  :     PMC_STATUS_CODE v_result;
; 172  :     PMC_STATUS_CODE r_result;
; 173  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_X (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN7@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_Remai
$LN7@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_Remai:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 174  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN9@TEST_Remai
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_Remai
$LN9@TEST_Remai:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_Remai:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 175  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_X (%d.%d)", no, 3), (r_result = ep->DivRem_X_X(u, v, NULL, &r)) == desired_return_code, FormatTestMesssage(L"DivRem_X_Xの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	edx, DWORD PTR _r_result$[ebp]
	cmp	edx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN11@TEST_Remai
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN12@TEST_Remai
$LN11@TEST_Remai:
	mov	DWORD PTR tv143[ebp], 0
$LN12@TEST_Remai:
	mov	eax, DWORD PTR _r_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1DM@LBHJMHBN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 176  :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_Remai

; 177  :     {
; 178  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_Remai
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN14@TEST_Remai
$LN13@TEST_Remai:
	mov	DWORD PTR tv163[ebp], 0
$LN14@TEST_Remai:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 179  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN15@TEST_Remai
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN16@TEST_Remai
$LN15@TEST_Remai:
	mov	DWORD PTR tv178[ebp], 0
$LN16@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@IOIGOEEA@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 180  :     }
; 181  :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_Remai

; 182  :         ep->Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Remai:

; 183  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_Remai

; 184  :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_Remai:

; 185  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 186  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 187  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@TEST_Remai:
	DD	5
	DD	$LN22@TEST_Remai
$LN22@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TEST_Remai
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@TEST_Remai
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN20@TEST_Remai
	DD	-312					; fffffec8H
	DD	4
	DD	$LN21@TEST_Remai
$LN21@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN20@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@TEST_Remai:
	DB	114					; 00000072H
	DB	0
$LN18@TEST_Remai:
	DB	118					; 00000076H
	DB	0
$LN17@TEST_Remai:
	DB	117					; 00000075H
	DB	0
_TEST_Remainder_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_X_UX
_TEXT	SEGMENT
tv178 = -560						; size = 4
tv163 = -560						; size = 4
tv143 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_r_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_r_buf_size$ = -312				; size = 4
_actual_r_buf$ = -300					; size = 256
_r$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_return_code$ = 36				; size = 4
_desired_r_buf$ = 40					; size = 4
_desired_r_buf_size$ = 44				; size = 4
_TEST_Remainder_X_UX PROC				; COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 137  :     PMC_HANDLE_SINT u;
; 138  :     PMC_HANDLE_UINT v;
; 139  :     PMC_HANDLE_SINT r;
; 140  :     unsigned char actual_r_buf[256];
; 141  :     size_t actual_r_buf_size;
; 142  :     PMC_STATUS_CODE result;
; 143  :     PMC_STATUS_CODE u_result;
; 144  :     PMC_STATUS_CODE v_result;
; 145  :     PMC_STATUS_CODE r_result;
; 146  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_UX (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN7@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_Remai
$LN7@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_Remai:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 147  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_UX (%d.%d)", no, 2), (v_result = ep->UINT_ENTRY_POINTS.FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN9@TEST_Remai
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_Remai
$LN9@TEST_Remai:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_Remai:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 148  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_UX (%d.%d)", no, 3), (r_result = ep->DivRem_X_UX(u, v, NULL, &r)) == desired_return_code, FormatTestMesssage(L"DivRem_X_UXの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+424]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	edx, DWORD PTR _r_result$[ebp]
	cmp	edx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN11@TEST_Remai
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN12@TEST_Remai
$LN11@TEST_Remai:
	mov	DWORD PTR tv143[ebp], 0
$LN12@TEST_Remai:
	mov	eax, DWORD PTR _r_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1DO@LADEACKM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 149  :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_Remai

; 150  :     {
; 151  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_UX (%d.%d)", no, 5), (result = ep->ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_Remai
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN14@TEST_Remai
$LN13@TEST_Remai:
	mov	DWORD PTR tv163[ebp], 0
$LN14@TEST_Remai:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 152  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_UX (%d.%d)", no, 7), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN15@TEST_Remai
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN16@TEST_Remai
$LN15@TEST_Remai:
	mov	DWORD PTR tv178[ebp], 0
$LN16@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	push	7
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@JMBPNOGJ@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 153  :     }
; 154  :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_Remai

; 155  :         ep->Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Remai:

; 156  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_Remai

; 157  :         ep->UINT_ENTRY_POINTS.Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_Remai:

; 158  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 159  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 160  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@TEST_Remai:
	DD	5
	DD	$LN22@TEST_Remai
$LN22@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TEST_Remai
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@TEST_Remai
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN20@TEST_Remai
	DD	-312					; fffffec8H
	DD	4
	DD	$LN21@TEST_Remai
$LN21@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN20@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@TEST_Remai:
	DB	114					; 00000072H
	DB	0
$LN18@TEST_Remai:
	DB	118					; 00000076H
	DB	0
$LN17@TEST_Remai:
	DB	117					; 00000075H
	DB	0
_TEST_Remainder_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_X_L
_TEXT	SEGMENT
tv136 = -252						; size = 4
tv93 = -252						; size = 4
tv74 = -252						; size = 4
_u_result$ = -52					; size = 4
_result$ = -40						; size = 4
_actual_r$ = -28					; size = 8
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 8
_desired_return_code$ = 36				; size = 4
_desired_r$ = 40					; size = 8
_TEST_Remainder_X_L PROC				; COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 121  :     PMC_HANDLE_SINT u;
; 122  :     __int64 actual_r;
; 123  :     PMC_STATUS_CODE result;
; 124  :     PMC_STATUS_CODE u_result;
; 125  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_L (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN5@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Remai
$LN5@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Remai:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 126  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_L (%d.%d)", no, 2), (result = ep->DivRem_X_L(u, v, NULL, &actual_r)) == desired_return_code, FormatTestMesssage(L"DivRem_X_Lの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	eax, DWORD PTR _result$[ebp]
	cmp	eax, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN7@TEST_Remai
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN8@TEST_Remai
$LN7@TEST_Remai:
	mov	DWORD PTR tv93[ebp], 0
$LN8@TEST_Remai:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET ??_C@_1DM@ELDKLHAI@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET ??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 127  :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	SHORT $LN2@TEST_Remai

; 128  :     {
; 129  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_L (%d.%d)", no, 5), actual_r == desired_r, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _actual_r$[ebp]
	cmp	eax, DWORD PTR _desired_r$[ebp]
	jne	SHORT $LN9@TEST_Remai
	mov	ecx, DWORD PTR _actual_r$[ebp+4]
	cmp	ecx, DWORD PTR _desired_r$[ebp+4]
	jne	SHORT $LN9@TEST_Remai
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN10@TEST_Remai
$LN9@TEST_Remai:
	mov	DWORD PTR tv136[ebp], 0
$LN10@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET ??_C@_1CM@CAKNKEDM@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 130  :     }
; 131  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 132  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 133  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@TEST_Remai:
	DD	2
	DD	$LN13@TEST_Remai
$LN13@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@TEST_Remai
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN12@TEST_Remai
$LN12@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN11@TEST_Remai:
	DB	117					; 00000075H
	DB	0
_TEST_Remainder_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_X_I
_TEXT	SEGMENT
tv136 = -248						; size = 4
tv93 = -248						; size = 4
tv74 = -248						; size = 4
_u_result$ = -48					; size = 4
_result$ = -36						; size = 4
_actual_r$ = -24					; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 4
_desired_return_code$ = 32				; size = 4
_desired_r$ = 36					; size = 4
_TEST_Remainder_X_I PROC				; COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 105  :     PMC_HANDLE_SINT u;
; 106  :     __int32 actual_r;
; 107  :     PMC_STATUS_CODE result;
; 108  :     PMC_STATUS_CODE u_result;
; 109  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_I (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN5@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_Remai
$LN5@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_Remai:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 110  :     TEST_Assert(env, FormatTestLabel(L"Remainder_X_I (%d.%d)", no, 2), (result = ep->DivRem_X_I(u, v, NULL, &actual_r)) == desired_return_code, FormatTestMesssage(L"DivRem_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+416]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	mov	edx, DWORD PTR _result$[ebp]
	cmp	edx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN7@TEST_Remai
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN8@TEST_Remai
$LN7@TEST_Remai:
	mov	DWORD PTR tv93[ebp], 0
$LN8@TEST_Remai:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET ??_C@_1DM@DHGCKJN@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 111  :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	SHORT $LN2@TEST_Remai

; 112  :     {
; 113  :         TEST_Assert(env, FormatTestLabel(L"Remainder_X_I (%d.%d)", no, 3), actual_r == desired_r, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _actual_r$[ebp]
	cmp	eax, DWORD PTR _desired_r$[ebp]
	jne	SHORT $LN9@TEST_Remai
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN10@TEST_Remai
$LN9@TEST_Remai:
	mov	DWORD PTR tv136[ebp], 0
$LN10@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv136[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@LCHHECD@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 114  :     }
; 115  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 116  :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 117  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@TEST_Remai:
	DD	2
	DD	$LN13@TEST_Remai
$LN13@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@TEST_Remai
$LN12@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN11@TEST_Remai:
	DB	117					; 00000075H
	DB	0
_TEST_Remainder_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_UX_X
_TEXT	SEGMENT
tv178 = -560						; size = 4
tv163 = -560						; size = 4
tv143 = -560						; size = 4
tv92 = -560						; size = 4
tv74 = -560						; size = 4
_r_result$ = -360					; size = 4
_v_result$ = -348					; size = 4
_u_result$ = -336					; size = 4
_result$ = -324						; size = 4
_actual_r_buf_size$ = -312				; size = 4
_actual_r_buf$ = -300					; size = 256
_r$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_return_code$ = 36				; size = 4
_desired_r_buf$ = 40					; size = 4
_desired_r_buf_size$ = 44				; size = 4
_TEST_Remainder_UX_X PROC				; COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 78   :     PMC_HANDLE_UINT u;
; 79   :     PMC_HANDLE_SINT v;
; 80   :     PMC_HANDLE_UINT r;
; 81   :     unsigned char actual_r_buf[256];
; 82   :     size_t actual_r_buf_size;
; 83   :     PMC_STATUS_CODE result;
; 84   :     PMC_STATUS_CODE u_result;
; 85   :     PMC_STATUS_CODE v_result;
; 86   :     PMC_STATUS_CODE r_result;
; 87   :     TEST_Assert(env, FormatTestLabel(L"Remainder_UX_X (%d.%d)", no, 1), (u_result = ep->UINT_ENTRY_POINTS.FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN7@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_Remai
$LN7@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_Remai:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 88   :     TEST_Assert(env, FormatTestLabel(L"Remainder_UX_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN9@TEST_Remai
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_Remai
$LN9@TEST_Remai:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_Remai:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 89   :     TEST_Assert(env, FormatTestLabel(L"Remainder_UX_X (%d.%d)", no, 3), (r_result = ep->DivRem_UX_X(u, v, NULL, &r)) == desired_return_code, FormatTestMesssage(L"DivRem_UX_Xの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	edx, DWORD PTR _r_result$[ebp]
	cmp	edx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN11@TEST_Remai
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN12@TEST_Remai
$LN11@TEST_Remai:
	mov	DWORD PTR tv143[ebp], 0
$LN12@TEST_Remai:
	mov	eax, DWORD PTR _r_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1DO@DHNBEMIM@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 90   :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_Remai

; 91   :     {
; 92   :         TEST_Assert(env, FormatTestLabel(L"Remainder_UX_X (%d.%d)", no, 4), (result = ep->UINT_ENTRY_POINTS.ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_Remai
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN14@TEST_Remai
$LN13@TEST_Remai:
	mov	DWORD PTR tv163[ebp], 0
$LN14@TEST_Remai:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 93   :         TEST_Assert(env, FormatTestLabel(L"Remainder_UX_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN15@TEST_Remai
	mov	DWORD PTR tv178[ebp], 1
	jmp	SHORT $LN16@TEST_Remai
$LN15@TEST_Remai:
	mov	DWORD PTR tv178[ebp], 0
$LN16@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CO@KCLEBLGL@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 94   :     }
; 95   :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_Remai

; 96   :         ep->UINT_ENTRY_POINTS.Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Remai:

; 97   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_Remai

; 98   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_Remai:

; 99   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 100  :         ep->UINT_ENTRY_POINTS.Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 101  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@TEST_Remai:
	DD	5
	DD	$LN22@TEST_Remai
$LN22@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TEST_Remai
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@TEST_Remai
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN20@TEST_Remai
	DD	-312					; fffffec8H
	DD	4
	DD	$LN21@TEST_Remai
$LN21@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN20@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@TEST_Remai:
	DB	114					; 00000072H
	DB	0
$LN18@TEST_Remai:
	DB	118					; 00000076H
	DB	0
$LN17@TEST_Remai:
	DB	117					; 00000075H
	DB	0
_TEST_Remainder_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_L_X
_TEXT	SEGMENT
tv160 = -536						; size = 4
tv145 = -536						; size = 4
tv93 = -536						; size = 4
tv74 = -536						; size = 4
_r_result$ = -336					; size = 4
_v_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_r_buf_size$ = -300				; size = 4
_actual_r_buf$ = -288					; size = 256
_r$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_return_code$ = 36				; size = 4
_desired_r_buf$ = 40					; size = 4
_desired_r_buf_size$ = 44				; size = 4
_TEST_Remainder_L_X PROC				; COMDAT

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 56   :     PMC_HANDLE_SINT v;
; 57   :     PMC_HANDLE_SINT r;
; 58   :     unsigned char actual_r_buf[256];
; 59   :     size_t actual_r_buf_size;
; 60   :     PMC_STATUS_CODE result;
; 61   :     PMC_STATUS_CODE v_result;
; 62   :     PMC_STATUS_CODE r_result;
; 63   :     TEST_Assert(env, FormatTestLabel(L"Remainder_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN6@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_Remai
$LN6@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_Remai:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 64   :     TEST_Assert(env, FormatTestLabel(L"Remainder_L_X (%d.%d)", no, 2), (r_result = ep->DivRem_L_X(u, v, NULL, &r)) == desired_return_code, FormatTestMesssage(L"DivRem_L_Xの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	eax, DWORD PTR _r_result$[ebp]
	cmp	eax, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN8@TEST_Remai
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN9@TEST_Remai
$LN8@TEST_Remai:
	mov	DWORD PTR tv93[ebp], 0
$LN9@TEST_Remai:
	mov	ecx, DWORD PTR _r_result$[ebp]
	push	ecx
	push	OFFSET ??_C@_1DM@EHDAPCE@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv93[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET ??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 65   :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_Remai

; 66   :     {
; 67   :         TEST_Assert(env, FormatTestLabel(L"Remainder_L_X (%d.%d)", no, 3), (result = ep->ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_Remai
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN11@TEST_Remai
$LN10@TEST_Remai:
	mov	DWORD PTR tv145[ebp], 0
$LN11@TEST_Remai:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 68   :         TEST_Assert(env, FormatTestLabel(L"Remainder_L_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_Remai
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN13@TEST_Remai
$LN12@TEST_Remai:
	mov	DWORD PTR tv160[ebp], 0
$LN13@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@JIOLAFCC@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 69   :     }
; 70   :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_Remai

; 71   :         ep->Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Remai:

; 72   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 73   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 74   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_Remai:
	DD	4
	DD	$LN18@TEST_Remai
$LN18@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_Remai
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_Remai
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_Remai
$LN17@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_Remai:
	DB	114					; 00000072H
	DB	0
$LN14@TEST_Remai:
	DB	118					; 00000076H
	DB	0
_TEST_Remainder_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_remainder.c
;	COMDAT _TEST_Remainder_I_X
_TEXT	SEGMENT
tv160 = -536						; size = 4
tv145 = -536						; size = 4
tv93 = -536						; size = 4
tv74 = -536						; size = 4
_r_result$ = -336					; size = 4
_v_result$ = -324					; size = 4
_result$ = -312						; size = 4
_actual_r_buf_size$ = -300				; size = 4
_actual_r_buf$ = -288					; size = 256
_r$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_return_code$ = 32				; size = 4
_desired_r_buf$ = 36					; size = 4
_desired_r_buf_size$ = 40				; size = 4
_TEST_Remainder_I_X PROC				; COMDAT

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 536				; 00000218H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __BFDCEF3B_test_op_remainder@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_SINT v;
; 35   :     PMC_HANDLE_SINT r;
; 36   :     unsigned char actual_r_buf[256];
; 37   :     size_t actual_r_buf_size;
; 38   :     PMC_STATUS_CODE result;
; 39   :     PMC_STATUS_CODE v_result;
; 40   :     PMC_STATUS_CODE r_result;
; 41   :     TEST_Assert(env, FormatTestLabel(L"Remainder_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN6@TEST_Remai
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_Remai
$LN6@TEST_Remai:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_Remai:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 42   :     TEST_Assert(env, FormatTestLabel(L"Remainder_I_X (%d.%d)", no, 2), (r_result = ep->DivRem_I_X(u, v, NULL, &r)) == desired_return_code, FormatTestMesssage(L"DivRem_I_Xの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	edx, DWORD PTR _r_result$[ebp]
	cmp	edx, DWORD PTR _desired_return_code$[ebp]
	jne	SHORT $LN8@TEST_Remai
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN9@TEST_Remai
$LN8@TEST_Remai:
	mov	DWORD PTR tv93[ebp], 0
$LN9@TEST_Remai:
	mov	eax, DWORD PTR _r_result$[ebp]
	push	eax
	push	OFFSET ??_C@_1DM@FPONPMLK@?$AAD?$AAi?$AAv?$AAR?$AAe?$AAm?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv93[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 43   :     if (desired_return_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_return_code$[ebp], 0
	jne	$LN2@TEST_Remai

; 44   :     {
; 45   :         TEST_Assert(env, FormatTestLabel(L"Remainder_I_X (%d.%d)", no, 3), (result = ep->ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_r_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_Remai
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN11@TEST_Remai
$LN10@TEST_Remai:
	mov	DWORD PTR tv145[ebp], 0
$LN11@TEST_Remai:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 46   :         TEST_Assert(env, FormatTestLabel(L"Remainder_I_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"剰余の値が一致しない");

	mov	eax, DWORD PTR _desired_r_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_Remai
	mov	DWORD PTR tv160[ebp], 1
	jmp	SHORT $LN13@TEST_Remai
$LN12@TEST_Remai:
	mov	DWORD PTR tv160[ebp], 0
$LN13@TEST_Remai:
	push	OFFSET ??_C@_1BG@BPGLFLF@?$AAp?$AAY?$AAn?$AA$?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	ecx, DWORD PTR tv160[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET ??_C@_1CM@HAMIPOFK@?$AAR?$AAe?$AAm?$AAa?$AAi?$AAn?$AAd?$AAe?$AAr?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI@
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_Remai:

; 47   :     }
; 48   :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_Remai

; 49   :         ep->Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Remai:

; 50   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_Remai

; 51   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_Remai:

; 52   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_Remai
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_Remai:
	DD	4
	DD	$LN18@TEST_Remai
$LN18@TEST_Remai:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_Remai
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_Remai
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_Remai
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_Remai
$LN17@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_Remai:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_Remai:
	DB	114					; 00000072H
	DB	0
$LN14@TEST_Remai:
	DB	118					; 00000076H
	DB	0
_TEST_Remainder_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
;	COMDAT __EQUALS_MEMORY
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC					; COMDAT

; 151  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 152  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 153  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 154  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 155  :     {
; 156  :         if (*buffer1 != *buffer2)

	mov	eax, DWORD PTR _buffer1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _buffer2$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	je	SHORT $LN5@EQUALS_MEM

; 157  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 158  :         ++buffer1;

	mov	eax, DWORD PTR _buffer1$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer1$[ebp], eax

; 159  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 160  :         --count1;

	mov	eax, DWORD PTR _count1$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count1$[ebp], eax

; 161  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 162  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
END
