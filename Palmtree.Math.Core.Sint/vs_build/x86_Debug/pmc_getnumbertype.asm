; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_getnumbertype.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__C5291EA6_pmc_getnumbertype@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_GetNumberType_X@8
PUBLIC	_Initialize_GetPropertyValue
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_getnumbertype.c
;	COMDAT _Initialize_GetPropertyValue
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_GetPropertyValue PROC			; COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C5291EA6_pmc_getnumbertype@c
	call	@__CheckForDebuggerJustMyCode@4

; 57   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_GetPropertyValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_getnumbertype.c
;	COMDAT _PMC_GetNumberType_X@8
_TEXT	SEGMENT
_value$ = -32						; size = 4
_nx$ = -20						; size = 4
_result$ = -8						; size = 4
_x$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_GetNumberType_X@8 PROC				; COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C5291EA6_pmc_getnumbertype@c
	call	@__CheckForDebuggerJustMyCode@4

; 32   :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@PMC_GetNum

; 33   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_GetNum
$LN2@PMC_GetNum:

; 34   :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN3@PMC_GetNum

; 35   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_GetNum
$LN3@PMC_GetNum:

; 36   :     PMC_STATUS_CODE result;
; 37   :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], eax

; 38   :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_GetNum

; 39   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_GetNum
$LN4@PMC_GetNum:

; 40   :     PMC_NUMBER_TYPE_CODE value = 0;

	mov	DWORD PTR _value$[ebp], 0

; 41   :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN5@PMC_GetNum

; 42   :         value |= 0x01;

	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 1
	mov	DWORD PTR _value$[ebp], eax
$LN5@PMC_GetNum:

; 43   :     if (nx->IS_ONE)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 2
	and	ecx, 1
	je	SHORT $LN6@PMC_GetNum

; 44   :         value |= 0x02;

	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 2
	mov	DWORD PTR _value$[ebp], eax
$LN6@PMC_GetNum:

; 45   :     if (nx->IS_MINUS_ONE)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 3
	and	ecx, 1
	je	SHORT $LN7@PMC_GetNum

; 46   :         value |= 0x04;

	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 4
	mov	DWORD PTR _value$[ebp], eax
$LN7@PMC_GetNum:

; 47   :     if (nx->IS_EVEN)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 4
	and	ecx, 1
	je	SHORT $LN8@PMC_GetNum

; 48   :         value |= 0x08;

	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 8
	mov	DWORD PTR _value$[ebp], eax
$LN8@PMC_GetNum:

; 49   :     if (nx->IS_POWER_OF_TWO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shr	ecx, 5
	and	ecx, 1
	je	SHORT $LN9@PMC_GetNum

; 50   :         value |= 0x10;

	mov	eax, DWORD PTR _value$[ebp]
	or	eax, 16					; 00000010H
	mov	DWORD PTR _value$[ebp], eax
$LN9@PMC_GetNum:

; 51   :     *o = value;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx

; 52   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_GetNum:

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_GetNumberType_X@8 ENDP
_TEXT	ENDS
END
