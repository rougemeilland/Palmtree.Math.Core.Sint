; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_add_sub.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__5A8189A9_pmc_add_sub@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_Add_I_X@12
PUBLIC	_PMC_Add_L_X@16
PUBLIC	_PMC_Add_UX_X@12
PUBLIC	_PMC_Add_X_I@12
PUBLIC	_PMC_Add_X_L@16
PUBLIC	_PMC_Add_X_UX@12
PUBLIC	_PMC_Add_X_X@12
PUBLIC	_PMC_Subtruct_I_X@12
PUBLIC	_PMC_Subtruct_L_X@16
PUBLIC	_PMC_Subtruct_UX_X@12
PUBLIC	_PMC_Subtruct_X_I@12
PUBLIC	_PMC_Subtruct_X_L@16
PUBLIC	_PMC_Subtruct_X_UX@12
PUBLIC	_PMC_Subtruct_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Negate_Imp:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_X_Imp
_TEXT	SEGMENT
_w_abs$1 = -48						; size = 4
_w_abs$2 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_X_Imp PROC					; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 199  : #ifdef _DEBUG
; 200  :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@SubtructU_

; 201  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 202  :     if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN3@SubtructU_

; 203  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN3@SubtructU_:

; 204  : #endif
; 205  :     PMC_STATUS_CODE result;
; 206  :     _INT32_T c;
; 207  :     if ((result = ep_uint.Compare_X_X(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+220
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 208  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN4@SubtructU_:

; 209  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN5@SubtructU_

; 210  :     {
; 211  :         // abs(u) > abs(v) ÇÃèÍçá
; 212  : 
; 213  :         // abs(u) - abs(v) Çï‘Ç∑
; 214  :         PMC_HANDLE_UINT w_abs;
; 215  :         if ((result = ep_uint.Subtruct_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+92
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@SubtructU_

; 216  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN7@SubtructU_:

; 217  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@SubtructU_

; 218  :         {
; 219  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN8@SubtructU_:

; 221  :         }
; 222  :     }

	jmp	SHORT $LN6@SubtructU_
$LN5@SubtructU_:

; 223  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN9@SubtructU_

; 224  :     {
; 225  :         // abs(u) == abs(v) ÇÃèÍçá
; 226  : 
; 227  :         // 0 Çï‘Ç∑
; 228  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 229  :     }

	jmp	SHORT $LN6@SubtructU_
$LN9@SubtructU_:

; 230  :     else
; 231  :     {
; 232  :         // abs(u) < abs(v) ÇÃèÍçá
; 233  : 
; 234  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 235  :         PMC_HANDLE_UINT w_abs;
; 236  :         if ((result = ep_uint.Subtruct_X_X(v, u, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+92
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@SubtructU_

; 237  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN11@SubtructU_:

; 238  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 239  :         {
; 240  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 241  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN6@SubtructU_:

; 242  :         }
; 243  :     }
; 244  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 245  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN18@SubtructU_:
	DD	3
	DD	$LN17@SubtructU_
$LN17@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN16@SubtructU_
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN14@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_L_Imp
_TEXT	SEGMENT
_w_abs$1 = -64						; size = 4
_t$2 = -52						; size = 8
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_SubtructU_X_L_Imp PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 146  : #ifdef _DEBUG
; 147  :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@SubtructU_

; 148  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 149  :     if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN3@SubtructU_

; 150  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN3@SubtructU_:

; 151  : #endif
; 152  :     PMC_STATUS_CODE result;
; 153  :     _INT32_T c;
; 154  :     if ((result = ep_uint.Compare_X_L(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+216
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 155  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN4@SubtructU_:

; 156  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN5@SubtructU_

; 157  :     {
; 158  :         // abs(u) > abs(v) ÇÃèÍçá
; 159  : 
; 160  :         // abs(u) - abs(v) Çï‘Ç∑
; 161  :         PMC_HANDLE_UINT w_abs;
; 162  :         if ((result = ep_uint.Subtruct_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+88
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@SubtructU_

; 163  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN7@SubtructU_:

; 164  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@SubtructU_

; 165  :         {
; 166  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 167  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN8@SubtructU_:

; 168  :         }
; 169  :     }

	jmp	$LN6@SubtructU_
$LN5@SubtructU_:

; 170  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN9@SubtructU_

; 171  :     {
; 172  :         // abs(u) == abs(v) ÇÃèÍçá
; 173  : 
; 174  :         // 0 Çï‘Ç∑
; 175  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 176  :     }

	jmp	$LN6@SubtructU_
$LN9@SubtructU_:

; 177  :     else
; 178  :     {
; 179  :         // abs(u) < abs(v) ÇÃèÍçá
; 180  : 
; 181  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 182  :         _UINT64_T t;
; 183  :         if ((result = ep_uint.Subtruct_L_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+80
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@SubtructU_

; 184  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN11@SubtructU_:

; 185  :         PMC_HANDLE_UINT w_abs;
; 186  :         if ((result = ep_uint.From_L(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$2[ebp]
	push	edx
	call	DWORD PTR _ep_uint+12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@SubtructU_

; 187  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN12@SubtructU_:

; 188  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 189  :         {
; 190  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 191  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN6@SubtructU_:

; 192  :         }
; 193  :     }
; 194  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 195  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@SubtructU_:
	DD	4
	DD	$LN19@SubtructU_
$LN19@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@SubtructU_
	DD	-52					; ffffffccH
	DD	8
	DD	$LN17@SubtructU_
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN18@SubtructU_
$LN18@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN17@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_I_Imp
_TEXT	SEGMENT
_w_abs$1 = -60						; size = 4
_t$2 = -48						; size = 4
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_I_Imp PROC					; COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 93   : #ifdef _DEBUG
; 94   :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@SubtructU_

; 95   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 96   :     if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@SubtructU_

; 97   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@SubtructU_
$LN3@SubtructU_:

; 98   : #endif
; 99   :     PMC_STATUS_CODE result;
; 100  :     _INT32_T c;
; 101  :     if ((result = ep_uint.Compare_X_I(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+212
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 102  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN4@SubtructU_:

; 103  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN5@SubtructU_

; 104  :     {
; 105  :         // abs(u) > abs(v) ÇÃèÍçá
; 106  : 
; 107  :         // abs(u) - abs(v) Çï‘Ç∑
; 108  :         PMC_HANDLE_UINT w_abs;
; 109  :         if ((result = ep_uint.Subtruct_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+84
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@SubtructU_

; 110  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN7@SubtructU_:

; 111  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@SubtructU_

; 112  :         {
; 113  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN8@SubtructU_:

; 115  :         }
; 116  :     }

	jmp	$LN6@SubtructU_
$LN5@SubtructU_:

; 117  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN9@SubtructU_

; 118  :     {
; 119  :         // abs(u) == abs(v) ÇÃèÍçá
; 120  : 
; 121  :         // 0 Çï‘Ç∑
; 122  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 123  :     }

	jmp	$LN6@SubtructU_
$LN9@SubtructU_:

; 124  :     else
; 125  :     {
; 126  :         // abs(u) < abs(v) ÇÃèÍçá
; 127  : 
; 128  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 129  :         _UINT32_T t;
; 130  :         if ((result = ep_uint.Subtruct_I_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+76
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@SubtructU_

; 131  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN11@SubtructU_:

; 132  :         PMC_HANDLE_UINT w_abs;
; 133  :         if ((result = ep_uint.From_I(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@SubtructU_

; 134  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN12@SubtructU_:

; 135  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 136  :         {
; 137  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN6@SubtructU_:

; 139  :         }
; 140  :     }
; 141  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 142  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@SubtructU_:
	DD	4
	DD	$LN19@SubtructU_
$LN19@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN17@SubtructU_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN18@SubtructU_
$LN18@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN17@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_X_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_X_Imp PROC					; COMDAT

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 73   : #ifdef _DEBUG
; 74   :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@AddU_X_X_I

; 75   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_X_I
$LN2@AddU_X_X_I:

; 76   :     if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN3@AddU_X_X_I

; 77   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_X_I
$LN3@AddU_X_X_I:

; 78   : #endif
; 79   :     PMC_STATUS_CODE result;
; 80   :     PMC_HANDLE_UINT w_abs;
; 81   :     if ((result = ep_uint.Add_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+72
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@AddU_X_X_I

; 82   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN4@AddU_X_X_I:

; 83   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@AddU_X_X_I

; 84   :     {
; 85   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 86   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN5@AddU_X_X_I:

; 87   :     }
; 88   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_X_I:

; 89   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddU_X_X_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@AddU_X_X_I:
	DD	1
	DD	$LN8@AddU_X_X_I
$LN8@AddU_X_X_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@AddU_X_X_I
$LN7@AddU_X_X_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_L_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_AddU_X_L_Imp PROC					; COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   : #ifdef _DEBUG
; 54   :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@AddU_X_L_I

; 55   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_L_I
$LN2@AddU_X_L_I:

; 56   :     if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN3@AddU_X_L_I

; 57   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_L_I
$LN3@AddU_X_L_I:

; 58   : #endif
; 59   :     PMC_STATUS_CODE result;
; 60   :     PMC_HANDLE_UINT w_abs;
; 61   :     if ((result = ep_uint.Add_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+68
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@AddU_X_L_I

; 62   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN4@AddU_X_L_I:

; 63   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@AddU_X_L_I

; 64   :     {
; 65   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN5@AddU_X_L_I:

; 67   :     }
; 68   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_L_I:

; 69   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddU_X_L_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@AddU_X_L_I:
	DD	1
	DD	$LN8@AddU_X_L_I
$LN8@AddU_X_L_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@AddU_X_L_I
$LN7@AddU_X_L_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_I_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_I_Imp PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   : #ifdef _DEBUG
; 34   :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN2@AddU_X_I_I

; 35   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_I_I
$LN2@AddU_X_I_I:

; 36   :     if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@AddU_X_I_I

; 37   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@AddU_X_I_I
$LN3@AddU_X_I_I:

; 38   : #endif
; 39   :     PMC_STATUS_CODE result;
; 40   :     PMC_HANDLE_UINT w_abs;
; 41   :     if ((result = ep_uint.Add_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+64
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@AddU_X_I_I

; 42   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN4@AddU_X_I_I:

; 43   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@AddU_X_I_I

; 44   :     {
; 45   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN5@AddU_X_I_I:

; 47   :     }
; 48   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_I_I:

; 49   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@AddU_X_I_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@AddU_X_I_I:
	DD	1
	DD	$LN8@AddU_X_I_I
$LN8@AddU_X_I_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@AddU_X_I_I
$LN7@AddU_X_I_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_X@12 PROC				; COMDAT

; 1421 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1422 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1423 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1424 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1425 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1426 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1427 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1428 :     PMC_STATUS_CODE result;
; 1429 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1430 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1431 :     NUMBER_HEADER* nw;
; 1432 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1433 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1434 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1435 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1436 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 1437 :     {
; 1438 :         // u == 0 ÇÃèÍçá
; 1439 : 
; 1440 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Subtru

; 1441 :         {
; 1442 :             // v == 0 ÇÃèÍçá
; 1443 : 
; 1444 :             // 0 Çï‘Ç∑
; 1445 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1446 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1447 :         else
; 1448 :         {
; 1449 :             // v != 0 ÇÃèÍçá
; 1450 : 
; 1451 :             // -v Çï‘Ç∑
; 1452 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1453 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1454 :         }
; 1455 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1456 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN12@PMC_Subtru

; 1457 :     {
; 1458 :         // u > 0 ÇÃèÍçá
; 1459 : 
; 1460 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Subtru

; 1461 :         {
; 1462 :             // v == 0 ÇÃèÍçá
; 1463 : 
; 1464 :             // u Çï‘Ç∑
; 1465 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1466 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1467 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 1468 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Subtru

; 1469 :         {
; 1470 :             // v > 0 ÇÃèÍçá
; 1471 : 
; 1472 :             // abs(u) - abs(v) Çï‘Ç∑
; 1473 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Subtru

; 1474 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 1475 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN17@PMC_Subtru:

; 1476 :         else
; 1477 :         {
; 1478 :             // v < 0 ÇÃèÍçá
; 1479 : 
; 1480 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1481 :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 1482 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 1483 :         }
; 1484 :     }

	jmp	$LN8@PMC_Subtru
$LN12@PMC_Subtru:

; 1485 :     else
; 1486 :     {
; 1487 :         // u < 0 ÇÃèÍçá
; 1488 : 
; 1489 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Subtru

; 1490 :         {
; 1491 :             // v == 0 ÇÃèÍçá
; 1492 : 
; 1493 :             // u Çï‘Ç∑
; 1494 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Subtru

; 1495 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 1496 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN21@PMC_Subtru:

; 1497 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Subtru

; 1498 :         {
; 1499 :             // v > 0 ÇÃèÍçá
; 1500 : 
; 1501 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1502 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Subtru

; 1503 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 1504 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN24@PMC_Subtru:

; 1505 :         else
; 1506 :         {
; 1507 :             // v < 0 ÇÃèÍçá
; 1508 : 
; 1509 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1510 :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1511 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1512 :         }
; 1513 :     }
; 1514 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1515 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1516 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Subtru:
	DD	1
	DD	$LN30@PMC_Subtru
$LN30@PMC_Subtru:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_UX@12
_TEXT	SEGMENT
_new_v$1 = -48						; size = 4
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_UX@12 PROC				; COMDAT

; 1334 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1335 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1336 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1337 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1338 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1339 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1340 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1341 :     PMC_STATUS_CODE result;
; 1342 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1343 :     NUMBER_HEADER* nw;
; 1344 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1345 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1346 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_Subtru

; 1347 :     {
; 1348 :         // u == 0 ÇÃèÍçá
; 1349 : 
; 1350 :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN8@PMC_Subtru

; 1351 :         {
; 1352 :             // v == 0 ÇÃèÍçá
; 1353 : 
; 1354 :             // 0 Çï‘Ç∑
; 1355 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1356 :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 1357 :         else
; 1358 :         {
; 1359 :             // v > 0 ÇÃèÍçá
; 1360 : 
; 1361 :             // -v Çï‘Ç∑
; 1362 :             PMC_HANDLE_UINT new_v;
; 1363 :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1364 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1365 :             if ((result = AllocateNumber(&nw, -1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Subtru

; 1366 :             {
; 1367 :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1368 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 1369 :             }
; 1370 :         }
; 1371 : 
; 1372 :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 1373 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN12@PMC_Subtru

; 1374 :     {
; 1375 :         // u > 0 ÇÃèÍçá
; 1376 : 
; 1377 :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN14@PMC_Subtru

; 1378 :         {
; 1379 :             // v == 0 ÇÃèÍçá
; 1380 : 
; 1381 :             // u Çï‘Ç∑
; 1382 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1383 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1384 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 1385 :         else
; 1386 :         {
; 1387 :             // v > 0 ÇÃèÍçá
; 1388 : 
; 1389 :             // abs(u) - v Çï‘Ç∑
; 1390 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 1391 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 1392 :         }
; 1393 : 
; 1394 :     }

	jmp	SHORT $LN7@PMC_Subtru
$LN12@PMC_Subtru:

; 1395 :     else
; 1396 :     {
; 1397 :         // u < 0 ÇÃèÍçá
; 1398 : 
; 1399 :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN18@PMC_Subtru

; 1400 :         {
; 1401 :             // v == 0 ÇÃèÍçá
; 1402 : 
; 1403 :             // u Çï‘Ç∑
; 1404 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Subtru

; 1405 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 1406 :         }

	jmp	SHORT $LN7@PMC_Subtru
$LN18@PMC_Subtru:

; 1407 :         else
; 1408 :         {
; 1409 :             // v > 0 ÇÃèÍçá
; 1410 : 
; 1411 :             // - abs(u) - v ÇåvéZÇ∑ÇÈ
; 1412 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Subtru

; 1413 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN7@PMC_Subtru:

; 1414 :         }
; 1415 :     }
; 1416 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1417 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1418 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN26@PMC_Subtru:
	DD	2
	DD	$LN25@PMC_Subtru
$LN25@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN23@PMC_Subtru
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN23@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Subtruct_X_L@16 PROC				; COMDAT

; 1239 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1240 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1241 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1242 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1243 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1244 :     PMC_STATUS_CODE result;
; 1245 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1246 :     NUMBER_HEADER* nw;
; 1247 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1248 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1249 :     char v_sign;
; 1250 :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 1251 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1252 :     {
; 1253 :         // u == 0 ÇÃèÍçá
; 1254 : 
; 1255 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1256 :         {
; 1257 :             // v == 0 ÇÃèÍçá
; 1258 : 
; 1259 :             // 0 Çï‘Ç∑
; 1260 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1261 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1262 :         else
; 1263 :         {
; 1264 :             // v != 0 ÇÃèÍçá
; 1265 : 
; 1266 :             // -v Çï‘Ç∑
; 1267 :             if ((result = From_L_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1268 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1269 :         }
; 1270 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1271 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN10@PMC_Subtru

; 1272 :     {
; 1273 :         // u > 0 ÇÃèÍçá
; 1274 : 
; 1275 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Subtru

; 1276 :         {
; 1277 :             // v == 0 ÇÃèÍçá
; 1278 : 
; 1279 :             // u Çï‘Ç∑
; 1280 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1281 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1282 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1283 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Subtru

; 1284 :         {
; 1285 :             // v > 0 ÇÃèÍçá
; 1286 : 
; 1287 :             // abs(u) - abs(v) Çï‘Ç∑
; 1288 :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1289 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1290 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1291 :         else
; 1292 :         {
; 1293 :             // v < 0 ÇÃèÍçá
; 1294 : 
; 1295 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1296 :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1297 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1298 :         }
; 1299 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1300 :     else
; 1301 :     {
; 1302 :         // u < 0 ÇÃèÍçá
; 1303 : 
; 1304 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Subtru

; 1305 :         {
; 1306 :             // v == 0 ÇÃèÍçá
; 1307 : 
; 1308 :             // u Çï‘Ç∑
; 1309 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1310 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1311 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1312 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Subtru

; 1313 :         {
; 1314 :             // v > 0 ÇÃèÍçá
; 1315 : 
; 1316 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1317 :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1318 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1319 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1320 :         else
; 1321 :         {
; 1322 :             // v < 0 ÇÃèÍçá
; 1323 : 
; 1324 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1325 :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1326 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1327 :         }
; 1328 :     }
; 1329 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1330 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1331 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_I@12 PROC				; COMDAT

; 1144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1145 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1146 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1147 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1148 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1149 :     PMC_STATUS_CODE result;
; 1150 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1151 :     NUMBER_HEADER* nw;
; 1152 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1153 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1154 :     char v_sign;
; 1155 :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 1156 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1157 :     {
; 1158 :         // u == 0 ÇÃèÍçá
; 1159 : 
; 1160 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1161 :         {
; 1162 :             // v == 0 ÇÃèÍçá
; 1163 : 
; 1164 :             // 0 Çï‘Ç∑
; 1165 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1166 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1167 :         else
; 1168 :         {
; 1169 :             // v != 0 ÇÃèÍçá
; 1170 : 
; 1171 :             // -v Çï‘Ç∑
; 1172 :             if ((result = From_I_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _v_sign$[ebp]
	neg	edx
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1173 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1174 :         }
; 1175 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1176 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN10@PMC_Subtru

; 1177 :     {
; 1178 :         // u > 0 ÇÃèÍçá
; 1179 : 
; 1180 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Subtru

; 1181 :         {
; 1182 :             // v == 0 ÇÃèÍçá
; 1183 : 
; 1184 :             // u Çï‘Ç∑
; 1185 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1186 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1187 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1188 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Subtru

; 1189 :         {
; 1190 :             // v > 0 ÇÃèÍçá
; 1191 : 
; 1192 :             // abs(u) - abs(v) Çï‘Ç∑
; 1193 :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1194 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1195 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1196 :         else
; 1197 :         {
; 1198 :             // v < 0 ÇÃèÍçá
; 1199 : 
; 1200 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1201 :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1202 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1203 :         }
; 1204 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1205 :     else
; 1206 :     {
; 1207 :         // u < 0 ÇÃèÍçá
; 1208 : 
; 1209 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Subtru

; 1210 :         {
; 1211 :             // v == 0 ÇÃèÍçá
; 1212 : 
; 1213 :             // u Çï‘Ç∑
; 1214 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1215 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1216 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1217 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Subtru

; 1218 :         {
; 1219 :             // v > 0 ÇÃèÍçá
; 1220 : 
; 1221 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1222 :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1223 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1224 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1225 :         else
; 1226 :         {
; 1227 :             // v < 0 ÇÃèÍçá
; 1228 : 
; 1229 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1230 :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1231 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1232 :         }
; 1233 :     }
; 1234 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1235 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1236 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -48						; size = 4
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_UX_X@12 PROC				; COMDAT

; 1072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1073 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1074 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1075 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1076 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1077 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1078 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1079 :     PMC_STATUS_CODE result;
; 1080 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1081 :     NUMBER_HEADER* nw;
; 1082 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1083 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1084 :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN6@PMC_Subtru

; 1085 :     {
; 1086 :         // u == 0 ÇÃèÍçá
; 1087 : 
; 1088 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_Subtru

; 1089 :         {
; 1090 :             // v == 0 ÇÃèÍçá
; 1091 : 
; 1092 :             // 0 Çï‘Ç∑
; 1093 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1094 :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 1095 :         else
; 1096 :         {
; 1097 :             // v != 0 ÇÃèÍçá
; 1098 : 
; 1099 :             // -v Çï‘Ç∑
; 1100 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Subtru

; 1101 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 1102 :         }
; 1103 :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 1104 :     else
; 1105 :     {
; 1106 :         // u > 0 ÇÃèÍçá
; 1107 : 
; 1108 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN11@PMC_Subtru

; 1109 :         {
; 1110 :             // v == 0 ÇÃèÍçá
; 1111 : 
; 1112 :             // u Çï‘Ç∑
; 1113 :             PMC_HANDLE_UINT new_u;
; 1114 :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1115 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1116 :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1117 :             {
; 1118 :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1119 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1120 :             }
; 1121 :         }

	jmp	SHORT $LN7@PMC_Subtru
$LN11@PMC_Subtru:

; 1122 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 1123 :         {
; 1124 :             // u > 0 ÇÃèÍçá
; 1125 : 
; 1126 :             // u - abs(v) Çï‘Ç∑
; 1127 :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1128 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1129 :         }

	jmp	SHORT $LN7@PMC_Subtru
$LN15@PMC_Subtru:

; 1130 :         else
; 1131 :         {
; 1132 :             // u < 0 ÇÃèÍçá
; 1133 : 
; 1134 :             // u + abs(v) ÇåvéZÇ∑ÇÈ
; 1135 :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Subtru

; 1136 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN7@PMC_Subtru:

; 1137 :         }
; 1138 :     }
; 1139 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1140 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1141 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN23@PMC_Subtru:
	DD	2
	DD	$LN22@PMC_Subtru
$LN22@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@PMC_Subtru
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN21@PMC_Subtru
$LN21@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN20@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Subtruct_L_X@16 PROC				; COMDAT

; 977  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 978  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 979  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 980  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 981  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 982  :     PMC_STATUS_CODE result;
; 983  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 984  :     NUMBER_HEADER* nw;
; 985  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 986  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 987  :     char u_sign;
; 988  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 989  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 990  :     {
; 991  :         // u == 0 ÇÃèÍçá
; 992  : 
; 993  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 994  :         {
; 995  :             // v == 0 ÇÃèÍçá
; 996  : 
; 997  :             // 0 Çï‘Ç∑
; 998  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 999  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1000 :         else
; 1001 :         {
; 1002 :             // v != 0 ÇÃèÍçá
; 1003 : 
; 1004 :             // -v Çï‘Ç∑
; 1005 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1006 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1007 :         }
; 1008 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1009 :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 1010 :     {
; 1011 :         // u > 0 ÇÃèÍçá
; 1012 : 
; 1013 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 1014 :         {
; 1015 :             // v == 0 ÇÃèÍçá
; 1016 : 
; 1017 :             // u Çï‘Ç∑
; 1018 :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1019 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1020 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1021 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 1022 :         {
; 1023 :             // v > 0 ÇÃèÍçá
; 1024 : 
; 1025 :             // abs(u) - abs(v) Çï‘Ç∑
; 1026 :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1027 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1028 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1029 :         else
; 1030 :         {
; 1031 :             // v < 0 ÇÃèÍçá
; 1032 : 
; 1033 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1034 :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1035 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1036 :         }
; 1037 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1038 :     else
; 1039 :     {
; 1040 :         // u < 0 ÇÃèÍçá
; 1041 : 
; 1042 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 1043 :         {
; 1044 :             // v == 0 ÇÃèÍçá
; 1045 : 
; 1046 :             // u Çï‘Ç∑
; 1047 :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1048 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1049 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1050 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 1051 :         {
; 1052 :             // v > 0 ÇÃèÍçá
; 1053 : 
; 1054 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1055 :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1056 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1057 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1058 :         else
; 1059 :         {
; 1060 :             // v < 0 ÇÃèÍçá
; 1061 : 
; 1062 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1063 :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1064 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1065 :         }
; 1066 :     }
; 1067 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1068 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1069 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_I_X@12 PROC				; COMDAT

; 882  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 883  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 884  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 885  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 886  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 887  :     PMC_STATUS_CODE result;
; 888  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 889  :     NUMBER_HEADER* nw;
; 890  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 891  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 892  :     char u_sign;
; 893  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 894  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 895  :     {
; 896  :         // u == 0 ÇÃèÍçá
; 897  : 
; 898  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 899  :         {
; 900  :             // v == 0 ÇÃèÍçá
; 901  : 
; 902  :             // 0 Çï‘Ç∑
; 903  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 904  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 905  :         else
; 906  :         {
; 907  :             // v != 0 ÇÃèÍçá
; 908  : 
; 909  :             // -v Çï‘Ç∑
; 910  :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 911  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 912  :         }
; 913  :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 914  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 915  :     {
; 916  :         // u > 0 ÇÃèÍçá
; 917  : 
; 918  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 919  :         {
; 920  :             // v == 0 ÇÃèÍçá
; 921  : 
; 922  :             // u Çï‘Ç∑
; 923  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 924  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 925  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 926  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 927  :         {
; 928  :             // v > 0 ÇÃèÍçá
; 929  : 
; 930  :             // abs(u) - abs(v) Çï‘Ç∑
; 931  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 932  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 933  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 934  :         else
; 935  :         {
; 936  :             // v < 0 ÇÃèÍçá
; 937  : 
; 938  :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 939  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 940  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 941  :         }
; 942  :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 943  :     else
; 944  :     {
; 945  :         // u < 0 ÇÃèÍçá
; 946  : 
; 947  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 948  :         {
; 949  :             // v == 0 ÇÃèÍçá
; 950  : 
; 951  :             // u Çï‘Ç∑
; 952  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 953  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 954  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 955  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 956  :         {
; 957  :             // v > 0 ÇÃèÍçá
; 958  : 
; 959  :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 960  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 961  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 962  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 963  :         else
; 964  :         {
; 965  :             // v < 0 ÇÃèÍçá
; 966  : 
; 967  :             // - abs(u) + abs(v) Çï‘Ç∑
; 968  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 969  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 970  :         }
; 971  :     }
; 972  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 973  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 974  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_X@12 PROC					; COMDAT

; 784  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 785  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 786  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 787  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 788  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 789  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 790  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 791  :     PMC_STATUS_CODE result;
; 792  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 793  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 794  :     NUMBER_HEADER* nw;
; 795  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 796  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 797  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 798  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 799  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_X_

; 800  :     {
; 801  :         // u == 0 ÇÃèÍçá
; 802  : 
; 803  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Add_X_

; 804  :         {
; 805  :             // v == 0 ÇÃèÍçá
; 806  : 
; 807  :             // 0 Çï‘Ç∑
; 808  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 809  :         }

	jmp	SHORT $LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 810  :         else
; 811  :         {
; 812  :             // v != 0 ÇÃèÍçá
; 813  : 
; 814  :             // v Çï‘Ç∑
; 815  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 816  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 817  :         }
; 818  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 819  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN12@PMC_Add_X_

; 820  :     {
; 821  :         // u > 0 ÇÃèÍçá
; 822  : 
; 823  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Add_X_

; 824  :         {
; 825  :             // v == 0 ÇÃèÍçá
; 826  : 
; 827  :             // u Çï‘Ç∑
; 828  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 829  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 830  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN14@PMC_Add_X_:

; 831  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Add_X_

; 832  :         {
; 833  :             // v > 0 ÇÃèÍçá
; 834  : 
; 835  :             // abs(u) + abs(v) Çï‘Ç∑
; 836  :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Add_X_

; 837  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN19@PMC_Add_X_:

; 838  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN17@PMC_Add_X_:

; 839  :         else
; 840  :         {
; 841  :             // v < 0 ÇÃèÍçá
; 842  : 
; 843  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 844  :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 845  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 846  :         }
; 847  :     }

	jmp	$LN8@PMC_Add_X_
$LN12@PMC_Add_X_:

; 848  :     else
; 849  :     {
; 850  :         // u < 0 ÇÃèÍçá
; 851  : 
; 852  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Add_X_

; 853  :         {
; 854  :             // v == 0 ÇÃèÍçá
; 855  : 
; 856  :             // u Çï‘Ç∑
; 857  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Add_X_

; 858  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN23@PMC_Add_X_:

; 859  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN21@PMC_Add_X_:

; 860  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Add_X_

; 861  :         {
; 862  :             // v > 0 ÇÃèÍçá
; 863  : 
; 864  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 865  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Add_X_

; 866  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN26@PMC_Add_X_:

; 867  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN24@PMC_Add_X_:

; 868  :         else
; 869  :         {
; 870  :             // v < 0 ÇÃèÍçá
; 871  : 
; 872  :             // - abs(u) - abs(v) Çï‘Ç∑
; 873  :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 874  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 875  :         }
; 876  :     }
; 877  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 878  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 879  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Add_X_:
	DD	1
	DD	$LN30@PMC_Add_X_
$LN30@PMC_Add_X_:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_UX@12
_TEXT	SEGMENT
_new_v$1 = -48						; size = 4
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_UX@12 PROC					; COMDAT

; 698  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 699  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 700  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 701  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 702  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 703  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 704  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 705  :     PMC_STATUS_CODE result;
; 706  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 707  :     NUMBER_HEADER* nw;
; 708  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 709  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 710  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_Add_X_

; 711  :     {
; 712  :         // u == 0 ÇÃèÍçá
; 713  : 
; 714  :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN8@PMC_Add_X_

; 715  :         {
; 716  :             // v == 0 ÇÃèÍçá
; 717  : 
; 718  :             // 0 Çï‘Ç∑
; 719  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 720  :         }

	jmp	SHORT $LN9@PMC_Add_X_
$LN8@PMC_Add_X_:

; 721  :         else
; 722  :         {
; 723  :             // v > 0 ÇÃèÍçá
; 724  : 
; 725  :             // v Çï‘Ç∑
; 726  :             PMC_HANDLE_UINT new_v;
; 727  :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 728  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 729  :             if ((result = AllocateNumber(&nw, 1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Add_X_

; 730  :             {
; 731  :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 732  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN9@PMC_Add_X_:

; 733  :             }
; 734  :         }
; 735  :     }

	jmp	$LN7@PMC_Add_X_
$LN6@PMC_Add_X_:

; 736  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN12@PMC_Add_X_

; 737  :     {
; 738  :         // u > 0 ÇÃèÍçá
; 739  : 
; 740  :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN14@PMC_Add_X_

; 741  :         {
; 742  :             // v == 0 ÇÃèÍçá
; 743  : 
; 744  :             // u Çï‘Ç∑
; 745  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 746  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 747  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN14@PMC_Add_X_:

; 748  :         else
; 749  :         {
; 750  :             // v > 0 ÇÃèÍçá
; 751  : 
; 752  :             // abs(u) + v Çï‘Ç∑
; 753  :             if ((result = AddU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 754  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 755  :         }
; 756  :     }

	jmp	SHORT $LN7@PMC_Add_X_
$LN12@PMC_Add_X_:

; 757  :     else
; 758  :     {
; 759  :         // u < 0 ÇÃèÍçá
; 760  : 
; 761  :         if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN18@PMC_Add_X_

; 762  :         {
; 763  :             // v == 0 ÇÃèÍçá
; 764  : 
; 765  :             // u Çï‘Ç∑
; 766  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Add_X_

; 767  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN20@PMC_Add_X_:

; 768  :         }

	jmp	SHORT $LN7@PMC_Add_X_
$LN18@PMC_Add_X_:

; 769  :         else
; 770  :         {
; 771  :             // v > 0 ÇÃèÍçá
; 772  : 
; 773  :             // - abs(u) + v Çï‘Ç∑
; 774  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_X_

; 775  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN7@PMC_Add_X_:

; 776  :         }
; 777  : 
; 778  :     }
; 779  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 780  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 781  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN26@PMC_Add_X_:
	DD	2
	DD	$LN25@PMC_Add_X_
$LN25@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN23@PMC_Add_X_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN24@PMC_Add_X_
$LN24@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN23@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Add_X_L@16 PROC					; COMDAT

; 603  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 604  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 605  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 606  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 607  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 608  :     PMC_STATUS_CODE result;
; 609  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 610  :     NUMBER_HEADER* nw;
; 611  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 612  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 613  :     char v_sign;
; 614  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 615  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 616  :     {
; 617  :         // u == 0 ÇÃèÍçá
; 618  : 
; 619  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 620  :         {
; 621  :             // v == 0 ÇÃèÍçá
; 622  : 
; 623  :             // 0 Çï‘Ç∑
; 624  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 625  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 626  :         else
; 627  :         {
; 628  :             // v != 0 ÇÃèÍçá
; 629  : 
; 630  :             // v Çï‘Ç∑
; 631  :             if ((result = From_L_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _v_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 632  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 633  :         }
; 634  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 635  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN10@PMC_Add_X_

; 636  :     {
; 637  :         // u > 0 ÇÃèÍçá
; 638  : 
; 639  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Add_X_

; 640  :         {
; 641  :             // v == 0 ÇÃèÍçá
; 642  : 
; 643  :             // u Çï‘Ç∑
; 644  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 645  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 646  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 647  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Add_X_

; 648  :         {
; 649  :             // v > 0 ÇÃèÍçá
; 650  : 
; 651  :             // abs(u) + abs(v) Çï‘Ç∑
; 652  :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 653  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 654  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN15@PMC_Add_X_:

; 655  :         else
; 656  :         {
; 657  :             // v < 0 ÇÃèÍçá
; 658  : 
; 659  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 660  :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_X_

; 661  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN13@PMC_Add_X_:

; 662  :         }
; 663  :     }

	jmp	$LN6@PMC_Add_X_
$LN10@PMC_Add_X_:

; 664  :     else
; 665  :     {
; 666  :         // u < 0 ÇÃèÍçá
; 667  : 
; 668  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Add_X_

; 669  :         {
; 670  :             // v == 0 ÇÃèÍçá
; 671  : 
; 672  :             // u Çï‘Ç∑
; 673  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_X_

; 674  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 675  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN19@PMC_Add_X_:

; 676  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Add_X_

; 677  :         {
; 678  :             // v > 0 ÇÃèÍçá
; 679  : 
; 680  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 681  :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 682  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 683  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 684  :         else
; 685  :         {
; 686  :             // v < 0 ÇÃèÍçá
; 687  : 
; 688  :             // - abs(u) - abs(v) Çï‘Ç∑
; 689  :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 690  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 691  :         }
; 692  :     }
; 693  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 694  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 695  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN30@PMC_Add_X_:
	DD	2
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_I@12 PROC					; COMDAT

; 508  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 509  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 510  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 511  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 512  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 513  :     PMC_STATUS_CODE result;
; 514  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 515  :     NUMBER_HEADER* nw;
; 516  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 517  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 518  :     char v_sign;
; 519  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 520  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 521  :     {
; 522  :         // u == 0 ÇÃèÍçá
; 523  : 
; 524  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 525  :         {
; 526  :             // v == 0 ÇÃèÍçá
; 527  : 
; 528  :             // 0 Çï‘Ç∑
; 529  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 530  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 531  :         else
; 532  :         {
; 533  :             // v != 0 ÇÃèÍçá
; 534  : 
; 535  :             // v Çï‘Ç∑
; 536  :             if ((result = From_I_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _v_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 537  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 538  :         }
; 539  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 540  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	$LN10@PMC_Add_X_

; 541  :     {
; 542  :         // u > 0 ÇÃèÍçá
; 543  : 
; 544  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Add_X_

; 545  :         {
; 546  :             // v == 0 ÇÃèÍçá
; 547  : 
; 548  :             // u Çï‘Ç∑
; 549  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 550  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 551  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 552  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Add_X_

; 553  :         {
; 554  :             // v > 0 ÇÃèÍçá
; 555  : 
; 556  :             // abs(u) + abs(v) Çï‘Ç∑
; 557  :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 558  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 559  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN15@PMC_Add_X_:

; 560  :         else
; 561  :         {
; 562  :             // v < 0 ÇÃèÍçá
; 563  : 
; 564  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 565  :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_X_

; 566  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN13@PMC_Add_X_:

; 567  :         }
; 568  :     }

	jmp	$LN6@PMC_Add_X_
$LN10@PMC_Add_X_:

; 569  :     else
; 570  :     {
; 571  :         // u < 0 ÇÃèÍçá
; 572  : 
; 573  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Add_X_

; 574  :         {
; 575  :             // v == 0 ÇÃèÍçá
; 576  : 
; 577  :             // u Çï‘Ç∑
; 578  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_X_

; 579  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 580  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN19@PMC_Add_X_:

; 581  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Add_X_

; 582  :         {
; 583  :             // v > 0 ÇÃèÍçá
; 584  : 
; 585  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 586  :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 587  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 588  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 589  :         else
; 590  :         {
; 591  :             // v < 0 ÇÃèÍçá
; 592  : 
; 593  :             // - abs(u) - abs(v) Çï‘Ç∑
; 594  :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 595  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 596  :         }
; 597  :     }
; 598  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 599  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 600  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN30@PMC_Add_X_:
	DD	2
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -48						; size = 4
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_UX_X@12 PROC					; COMDAT

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 439  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_UX

; 440  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN2@PMC_Add_UX:

; 441  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_UX

; 442  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN3@PMC_Add_UX:

; 443  :     PMC_STATUS_CODE result;
; 444  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 445  :     NUMBER_HEADER* nw;
; 446  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_UX

; 447  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN4@PMC_Add_UX:

; 448  :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN5@PMC_Add_UX

; 449  :     {
; 450  :         // u == 0 ÇÃèÍçá
; 451  : 
; 452  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_UX

; 453  :         {
; 454  :             // v == 0 ÇÃèÍçá
; 455  : 
; 456  :             // 0 Çï‘Ç∑
; 457  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 458  :         }

	jmp	SHORT $LN8@PMC_Add_UX
$LN7@PMC_Add_UX:

; 459  :         else
; 460  :         {
; 461  :             // v != 0 ÇÃèÍçá
; 462  : 
; 463  :             // v Çï‘Ç∑
; 464  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_UX

; 465  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN8@PMC_Add_UX:

; 466  :         }
; 467  :     }

	jmp	$LN6@PMC_Add_UX
$LN5@PMC_Add_UX:

; 468  :     else
; 469  :     {
; 470  :         // u > 0 ÇÃèÍçá
; 471  : 
; 472  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN10@PMC_Add_UX

; 473  :         {
; 474  :             // v == 0 ÇÃèÍçá
; 475  : 
; 476  :             // u Çï‘Ç∑
; 477  :             PMC_HANDLE_UINT new_u;
; 478  :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Add_UX

; 479  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN12@PMC_Add_UX:

; 480  :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_UX

; 481  :             {
; 482  :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 483  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN13@PMC_Add_UX:

; 484  :             }
; 485  :         }

	jmp	SHORT $LN6@PMC_Add_UX
$LN10@PMC_Add_UX:

; 486  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN14@PMC_Add_UX

; 487  :         {
; 488  :             // v > 0 ÇÃèÍçá
; 489  : 
; 490  :             // u + abs(v) Çï‘Ç∑
; 491  :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_UX

; 492  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN16@PMC_Add_UX:

; 493  :         }

	jmp	SHORT $LN6@PMC_Add_UX
$LN14@PMC_Add_UX:

; 494  :         else
; 495  :         {
; 496  :             // v < 0 ÇÃèÍçá
; 497  : 
; 498  :             // u - abs(v) ÇåvéZÇ∑ÇÈ
; 499  :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_UX

; 500  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN6@PMC_Add_UX:

; 501  :         }
; 502  :     }
; 503  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 504  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_UX:

; 505  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@PMC_Add_UX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN22@PMC_Add_UX:
	DD	2
	DD	$LN21@PMC_Add_UX
$LN21@PMC_Add_UX:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@PMC_Add_UX
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@PMC_Add_UX
$LN20@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN19@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Add_L_X@16 PROC					; COMDAT

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 344  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_L_

; 345  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN2@PMC_Add_L_:

; 346  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_L_

; 347  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN3@PMC_Add_L_:

; 348  :     PMC_STATUS_CODE result;
; 349  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 350  :     NUMBER_HEADER* nw;
; 351  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_L_

; 352  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN4@PMC_Add_L_:

; 353  :     char u_sign;
; 354  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 355  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_L_

; 356  :     {
; 357  :         // u == 0 ÇÃèÍçá
; 358  : 
; 359  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_L_

; 360  :         {
; 361  :             // v == 0 ÇÃèÍçá
; 362  : 
; 363  :             // 0 Çï‘Ç∑
; 364  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 365  :         }

	jmp	SHORT $LN8@PMC_Add_L_
$LN7@PMC_Add_L_:

; 366  :         else
; 367  :         {
; 368  :             // v != 0 ÇÃèÍçá
; 369  : 
; 370  :             // v Çï‘Ç∑
; 371  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_L_

; 372  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN8@PMC_Add_L_:

; 373  :         }
; 374  :     }

	jmp	$LN6@PMC_Add_L_
$LN5@PMC_Add_L_:

; 375  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_L_

; 376  :     {
; 377  :         // u > 0 ÇÃèÍçá
; 378  : 
; 379  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_L_

; 380  :         {
; 381  :             // v == 0 ÇÃèÍçá
; 382  : 
; 383  :             // u Çï‘Ç∑
; 384  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_L_

; 385  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN14@PMC_Add_L_:

; 386  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN12@PMC_Add_L_:

; 387  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_L_

; 388  :         {
; 389  :             // v > 0 ÇÃèÍçá
; 390  : 
; 391  :             // abs(u) + abs(v) Çï‘Ç∑
; 392  :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_L_

; 393  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN17@PMC_Add_L_:

; 394  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN15@PMC_Add_L_:

; 395  :         else
; 396  :         {
; 397  :             // v < 0 ÇÃèÍçá
; 398  : 
; 399  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 400  :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_L_

; 401  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN13@PMC_Add_L_:

; 402  :         }
; 403  :     }

	jmp	$LN6@PMC_Add_L_
$LN10@PMC_Add_L_:

; 404  :     else
; 405  :     {
; 406  :         // u < 0 ÇÃèÍçá
; 407  : 
; 408  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_L_

; 409  :         {
; 410  :             // v == 0 ÇÃèÍçá
; 411  : 
; 412  :             // u Çï‘Ç∑
; 413  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_L_

; 414  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN21@PMC_Add_L_:

; 415  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN19@PMC_Add_L_:

; 416  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_L_

; 417  :         {
; 418  :             // v > 0 ÇÃèÍçá
; 419  : 
; 420  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 421  :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_L_

; 422  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN24@PMC_Add_L_:

; 423  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN22@PMC_Add_L_:

; 424  :         else
; 425  :         {
; 426  :             // v < 0 ÇÃèÍçá
; 427  : 
; 428  :             // - abs(u) - abs(v) Çï‘Ç∑
; 429  :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_L_

; 430  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN6@PMC_Add_L_:

; 431  :         }
; 432  :     }
; 433  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 434  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_L_:

; 435  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_L_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Add_L_:
	DD	2
	DD	$LN29@PMC_Add_L_
$LN29@PMC_Add_L_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_L_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_L_
$LN28@PMC_Add_L_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_L_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_I_X@12 PROC					; COMDAT

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 249  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_I_

; 250  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN2@PMC_Add_I_:

; 251  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_I_

; 252  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN3@PMC_Add_I_:

; 253  :     PMC_STATUS_CODE result;
; 254  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 255  :     NUMBER_HEADER* nw;
; 256  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_I_

; 257  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN4@PMC_Add_I_:

; 258  :     char u_sign;
; 259  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 260  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_I_

; 261  :     {
; 262  :         // u == 0 ÇÃèÍçá
; 263  : 
; 264  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_I_

; 265  :         {
; 266  :             // v == 0 ÇÃèÍçá
; 267  : 
; 268  :             // 0 Çï‘Ç∑
; 269  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 270  :         }

	jmp	SHORT $LN8@PMC_Add_I_
$LN7@PMC_Add_I_:

; 271  :         else
; 272  :         {
; 273  :             // v != 0 ÇÃèÍçá
; 274  : 
; 275  :             // v Çï‘Ç∑
; 276  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_I_

; 277  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN8@PMC_Add_I_:

; 278  :         }
; 279  :     }

	jmp	$LN6@PMC_Add_I_
$LN5@PMC_Add_I_:

; 280  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_I_

; 281  :     {
; 282  :         // u > 0 ÇÃèÍçá
; 283  : 
; 284  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_I_

; 285  :         {
; 286  :             // v == 0 ÇÃèÍçá
; 287  : 
; 288  :             // u Çï‘Ç∑
; 289  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_I_

; 290  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN14@PMC_Add_I_:

; 291  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN12@PMC_Add_I_:

; 292  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_I_

; 293  :         {
; 294  :             // v > 0 ÇÃèÍçá
; 295  : 
; 296  :             // abs(u) + abs(v) Çï‘Ç∑
; 297  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_I_

; 298  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN17@PMC_Add_I_:

; 299  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN15@PMC_Add_I_:

; 300  :         else
; 301  :         {
; 302  :             // v < 0 ÇÃèÍçá
; 303  : 
; 304  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 305  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_I_

; 306  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN13@PMC_Add_I_:

; 307  :         }
; 308  :     }

	jmp	$LN6@PMC_Add_I_
$LN10@PMC_Add_I_:

; 309  :     else
; 310  :     {
; 311  :         // u < 0 ÇÃèÍçá
; 312  : 
; 313  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_I_

; 314  :         {
; 315  :             // v == 0 ÇÃèÍçá
; 316  : 
; 317  :             // u Çï‘Ç∑
; 318  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_I_

; 319  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN21@PMC_Add_I_:

; 320  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN19@PMC_Add_I_:

; 321  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_I_

; 322  :         {
; 323  :             // v > 0 ÇÃèÍçá
; 324  : 
; 325  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 326  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_I_

; 327  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN24@PMC_Add_I_:

; 328  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN22@PMC_Add_I_:

; 329  :         else
; 330  :         {
; 331  :             // v < 0 ÇÃèÍçá
; 332  : 
; 333  :             // - abs(u) - abs(v) Çï‘Ç∑
; 334  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_I_

; 335  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN6@PMC_Add_I_:

; 336  :         }
; 337  :     }
; 338  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 339  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_I_:

; 340  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_I_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Add_I_:
	DD	2
	DD	$LN29@PMC_Add_I_
$LN29@PMC_Add_I_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_I_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_I_
$LN28@PMC_Add_I_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_I_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_I_X@12 ENDP
_TEXT	ENDS
END
