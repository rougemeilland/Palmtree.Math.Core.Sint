; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_add_sub.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__5A8189A9_pmc_add_sub@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_Add_I_X@12
PUBLIC	_PMC_Add_L_X@16
PUBLIC	_PMC_Add_UX_X@12
PUBLIC	_PMC_Add_X_I@12
PUBLIC	_PMC_Add_X_L@16
PUBLIC	_PMC_Add_X_UX@12
PUBLIC	_PMC_Add_X_X@12
PUBLIC	_PMC_Subtruct_I_X@12
PUBLIC	_PMC_Subtruct_L_X@16
PUBLIC	_PMC_Subtruct_UX_X@12
PUBLIC	_PMC_Subtruct_X_I@12
PUBLIC	_PMC_Subtruct_X_L@16
PUBLIC	_PMC_Subtruct_X_UX@12
PUBLIC	_PMC_Subtruct_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_Negate_Imp:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_X_Imp
_TEXT	SEGMENT
_w_abs$1 = -48						; size = 4
_w_abs$2 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_X_Imp PROC					; COMDAT

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 179  :     PMC_STATUS_CODE result;
; 180  :     _INT32_T c;
; 181  :     if ((result = ep_uint.Compare_X_X(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+228
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 182  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 183  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 184  :     {
; 185  :         // abs(u) > abs(v) ÇÃèÍçá
; 186  : 
; 187  :         // abs(u) - abs(v) Çï‘Ç∑
; 188  :         PMC_HANDLE_UINT w_abs;
; 189  :         if ((result = ep_uint.Subtruct_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+100
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 190  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 191  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 192  :         {
; 193  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 194  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN6@SubtructU_:

; 195  :         }
; 196  :     }

	jmp	SHORT $LN4@SubtructU_
$LN3@SubtructU_:

; 197  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 198  :     {
; 199  :         // abs(u) == abs(v) ÇÃèÍçá
; 200  : 
; 201  :         // 0 Çï‘Ç∑
; 202  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 203  :     }

	jmp	SHORT $LN4@SubtructU_
$LN7@SubtructU_:

; 204  :     else
; 205  :     {
; 206  :         // abs(u) < abs(v) ÇÃèÍçá
; 207  : 
; 208  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 209  :         PMC_HANDLE_UINT w_abs;
; 210  :         if ((result = ep_uint.Subtruct_X_X(v, u, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+100
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 211  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 212  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 213  :         {
; 214  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 215  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 216  :         }
; 217  :     }
; 218  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 219  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@SubtructU_:
	DD	3
	DD	$LN15@SubtructU_
$LN15@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN14@SubtructU_
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN12@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_L_Imp
_TEXT	SEGMENT
_w_abs$1 = -64						; size = 4
_t$2 = -52						; size = 8
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_SubtructU_X_L_Imp PROC					; COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 132  :     PMC_STATUS_CODE result;
; 133  :     _INT32_T c;
; 134  :     if ((result = ep_uint.Compare_X_L(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+224
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 135  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 136  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 137  :     {
; 138  :         // abs(u) > abs(v) ÇÃèÍçá
; 139  : 
; 140  :         // abs(u) - abs(v) Çï‘Ç∑
; 141  :         PMC_HANDLE_UINT w_abs;
; 142  :         if ((result = ep_uint.Subtruct_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+96
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 143  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 144  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 145  :         {
; 146  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 147  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN6@SubtructU_:

; 148  :         }
; 149  :     }

	jmp	$LN4@SubtructU_
$LN3@SubtructU_:

; 150  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 151  :     {
; 152  :         // abs(u) == abs(v) ÇÃèÍçá
; 153  : 
; 154  :         // 0 Çï‘Ç∑
; 155  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 156  :     }

	jmp	$LN4@SubtructU_
$LN7@SubtructU_:

; 157  :     else
; 158  :     {
; 159  :         // abs(u) < abs(v) ÇÃèÍçá
; 160  : 
; 161  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 162  :         _UINT64_T t;
; 163  :         if ((result = ep_uint.Subtruct_L_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+88
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 164  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 165  :         PMC_HANDLE_UINT w_abs;
; 166  :         if ((result = ep_uint.From_L(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$2[ebp]
	push	edx
	call	DWORD PTR _ep_uint+12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@SubtructU_

; 167  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN10@SubtructU_:

; 168  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 169  :         {
; 170  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 171  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 172  :         }
; 173  :     }
; 174  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 175  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SubtructU_:
	DD	4
	DD	$LN17@SubtructU_
$LN17@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@SubtructU_
	DD	-52					; ffffffccH
	DD	8
	DD	$LN15@SubtructU_
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN16@SubtructU_
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_I_Imp
_TEXT	SEGMENT
_w_abs$1 = -60						; size = 4
_t$2 = -48						; size = 4
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_I_Imp PROC					; COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 85   :     PMC_STATUS_CODE result;
; 86   :     _INT32_T c;
; 87   :     if ((result = ep_uint.Compare_X_I(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+220
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 88   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 89   :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 90   :     {
; 91   :         // abs(u) > abs(v) ÇÃèÍçá
; 92   : 
; 93   :         // abs(u) - abs(v) Çï‘Ç∑
; 94   :         PMC_HANDLE_UINT w_abs;
; 95   :         if ((result = ep_uint.Subtruct_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+92
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 96   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 97   :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 98   :         {
; 99   :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 100  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN6@SubtructU_:

; 101  :         }
; 102  :     }

	jmp	$LN4@SubtructU_
$LN3@SubtructU_:

; 103  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 104  :     {
; 105  :         // abs(u) == abs(v) ÇÃèÍçá
; 106  : 
; 107  :         // 0 Çï‘Ç∑
; 108  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 109  :     }

	jmp	$LN4@SubtructU_
$LN7@SubtructU_:

; 110  :     else
; 111  :     {
; 112  :         // abs(u) < abs(v) ÇÃèÍçá
; 113  : 
; 114  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 115  :         _UINT32_T t;
; 116  :         if ((result = ep_uint.Subtruct_I_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+84
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 117  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 118  :         PMC_HANDLE_UINT w_abs;
; 119  :         if ((result = ep_uint.From_I(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@SubtructU_

; 120  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN10@SubtructU_:

; 121  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 122  :         {
; 123  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 125  :         }
; 126  :     }
; 127  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 128  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SubtructU_:
	DD	4
	DD	$LN17@SubtructU_
$LN17@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN15@SubtructU_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN16@SubtructU_
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_X_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_X_Imp PROC					; COMDAT

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 71   :     PMC_STATUS_CODE result;
; 72   :     PMC_HANDLE_UINT w_abs;
; 73   :     if ((result = ep_uint.Add_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+80
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_X_I

; 74   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN2@AddU_X_X_I:

; 75   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_X_I

; 76   :     {
; 77   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 78   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN3@AddU_X_X_I:

; 79   :     }
; 80   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_X_I:

; 81   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_X_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_X_I:
	DD	1
	DD	$LN6@AddU_X_X_I
$LN6@AddU_X_X_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_X_I
$LN5@AddU_X_X_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_L_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_AddU_X_L_Imp PROC					; COMDAT

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_HANDLE_UINT w_abs;
; 59   :     if ((result = ep_uint.Add_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+76
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_L_I

; 60   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN2@AddU_X_L_I:

; 61   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_L_I

; 62   :     {
; 63   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN3@AddU_X_L_I:

; 65   :     }
; 66   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_L_I:

; 67   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_L_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_L_I:
	DD	1
	DD	$LN6@AddU_X_L_I
$LN6@AddU_X_L_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_L_I
$LN5@AddU_X_L_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_I_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_I_Imp PROC					; COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 43   :     PMC_STATUS_CODE result;
; 44   :     PMC_HANDLE_UINT w_abs;
; 45   :     if ((result = ep_uint.Add_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+72
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_I_I

; 46   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN2@AddU_X_I_I:

; 47   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_I_I

; 48   :     {
; 49   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN3@AddU_X_I_I:

; 51   :     }
; 52   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_I_I:

; 53   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_I_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_I_I:
	DD	1
	DD	$LN6@AddU_X_I_I
$LN6@AddU_X_I_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_I_I
$LN5@AddU_X_I_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _IS_ZERO_UINT
_TEXT	SEGMENT
tv70 = -224						; size = 4
_type$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_is_zero$ = 12						; size = 4
_IS_ZERO_UINT PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     PMC_STATUS_CODE result;
; 34   :     PMC_NUMBER_TYPE_CODE type;
; 35   :     if ((result = ep_uint.GetNumberType_X(x, &type)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@IS_ZERO_UI

; 36   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@IS_ZERO_UI
$LN2@IS_ZERO_UI:

; 37   :     *is_zero = (type & PMC_NUMBER_TYPE_IS_ZERO) ? 1 : 0;

	mov	eax, DWORD PTR _type$[ebp]
	and	eax, 1
	je	SHORT $LN4@IS_ZERO_UI
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN5@IS_ZERO_UI
$LN4@IS_ZERO_UI:
	mov	DWORD PTR tv70[ebp], 0
$LN5@IS_ZERO_UI:
	mov	ecx, DWORD PTR _is_zero$[ebp]
	mov	dl, BYTE PTR tv70[ebp]
	mov	BYTE PTR [ecx], dl

; 38   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@IS_ZERO_UI:

; 39   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@IS_ZERO_UI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@IS_ZERO_UI:
	DD	1
	DD	$LN7@IS_ZERO_UI
$LN7@IS_ZERO_UI:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@IS_ZERO_UI
$LN6@IS_ZERO_UI:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_IS_ZERO_UINT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_X@12 PROC				; COMDAT

; 1441 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1442 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1443 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1444 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1445 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1446 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1447 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1448 :     PMC_STATUS_CODE result;
; 1449 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1450 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1451 :     NUMBER_HEADER* nw;
; 1452 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1453 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1454 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1455 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1456 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 1457 :     {
; 1458 :         // u == 0 ÇÃèÍçá
; 1459 : 
; 1460 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Subtru

; 1461 :         {
; 1462 :             // v == 0 ÇÃèÍçá
; 1463 : 
; 1464 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1465 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1466 :         else
; 1467 :         {
; 1468 :             // v != 0 ÇÃèÍçá
; 1469 : 
; 1470 :             // -v Çï‘Ç∑
; 1471 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1472 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1473 :         }
; 1474 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1475 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN12@PMC_Subtru

; 1476 :     {
; 1477 :         // u > 0 ÇÃèÍçá
; 1478 : 
; 1479 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Subtru

; 1480 :         {
; 1481 :             // v == 0 ÇÃèÍçá
; 1482 : 
; 1483 :             // u Çï‘Ç∑
; 1484 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1485 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1486 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 1487 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Subtru

; 1488 :         {
; 1489 :             // v > 0 ÇÃèÍçá
; 1490 : 
; 1491 :             // abs(u) - abs(v) Çï‘Ç∑
; 1492 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Subtru

; 1493 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 1494 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN17@PMC_Subtru:

; 1495 :         else
; 1496 :         {
; 1497 :             // v < 0 ÇÃèÍçá
; 1498 : 
; 1499 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1500 :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 1501 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 1502 :         }
; 1503 :     }

	jmp	$LN8@PMC_Subtru
$LN12@PMC_Subtru:

; 1504 :     else
; 1505 :     {
; 1506 :         // u < 0 ÇÃèÍçá
; 1507 : 
; 1508 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Subtru

; 1509 :         {
; 1510 :             // v == 0 ÇÃèÍçá
; 1511 : 
; 1512 :             // u Çï‘Ç∑
; 1513 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Subtru

; 1514 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 1515 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN21@PMC_Subtru:

; 1516 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Subtru

; 1517 :         {
; 1518 :             // v > 0 ÇÃèÍçá
; 1519 : 
; 1520 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1521 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Subtru

; 1522 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 1523 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN24@PMC_Subtru:

; 1524 :         else
; 1525 :         {
; 1526 :             // v < 0 ÇÃèÍçá
; 1527 : 
; 1528 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1529 :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1530 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1531 :         }
; 1532 :     }
; 1533 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1534 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1535 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Subtru:
	DD	1
	DD	$LN30@PMC_Subtru
$LN30@PMC_Subtru:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_UX@12
_TEXT	SEGMENT
_new_v$1 = -60						; size = 4
_v_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_UX@12 PROC				; COMDAT

; 1351 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1352 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1353 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1354 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1355 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1356 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1357 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1358 :     PMC_STATUS_CODE result;
; 1359 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1360 :     NUMBER_HEADER* nw;
; 1361 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1362 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1363 :     char v_is_zero;
; 1364 :     if ((result = IS_ZERO_UINT(v, &v_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _v_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_IS_ZERO_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1365 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1366 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 1367 :     {
; 1368 :         // u == 0 ÇÃèÍçá
; 1369 : 
; 1370 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN9@PMC_Subtru

; 1371 :         {
; 1372 :             // v == 0 ÇÃèÍçá
; 1373 : 
; 1374 :             // 0 Çï‘Ç∑
; 1375 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1376 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1377 :         else
; 1378 :         {
; 1379 :             // v > 0 ÇÃèÍçá
; 1380 : 
; 1381 :             // -v Çï‘Ç∑
; 1382 :             PMC_HANDLE_UINT new_v;
; 1383 :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Subtru

; 1384 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN11@PMC_Subtru:

; 1385 :             if ((result = AllocateNumber(&nw, -1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1386 :             {
; 1387 :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1388 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1389 :             }
; 1390 :         }
; 1391 : 
; 1392 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1393 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN13@PMC_Subtru

; 1394 :     {
; 1395 :         // u > 0 ÇÃèÍçá
; 1396 : 
; 1397 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN15@PMC_Subtru

; 1398 :         {
; 1399 :             // v == 0 ÇÃèÍçá
; 1400 : 
; 1401 :             // u Çï‘Ç∑
; 1402 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1403 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1404 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 1405 :         else
; 1406 :         {
; 1407 :             // v > 0 ÇÃèÍçá
; 1408 : 
; 1409 :             // abs(u) - v Çï‘Ç∑
; 1410 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1411 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1412 :         }
; 1413 : 
; 1414 :     }

	jmp	SHORT $LN8@PMC_Subtru
$LN13@PMC_Subtru:

; 1415 :     else
; 1416 :     {
; 1417 :         // u < 0 ÇÃèÍçá
; 1418 : 
; 1419 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN19@PMC_Subtru

; 1420 :         {
; 1421 :             // v == 0 ÇÃèÍçá
; 1422 : 
; 1423 :             // u Çï‘Ç∑
; 1424 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1425 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1426 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN19@PMC_Subtru:

; 1427 :         else
; 1428 :         {
; 1429 :             // v > 0 ÇÃèÍçá
; 1430 : 
; 1431 :             // - abs(u) - v ÇåvéZÇ∑ÇÈ
; 1432 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1433 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1434 :         }
; 1435 :     }
; 1436 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1437 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1438 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN28@PMC_Subtru:
	DD	3
	DD	$LN27@PMC_Subtru
$LN27@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN25@PMC_Subtru
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN26@PMC_Subtru
$LN26@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN25@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN24@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Subtruct_X_L@16 PROC				; COMDAT

; 1249 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1250 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1251 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1252 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1253 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1254 :     PMC_STATUS_CODE result;
; 1255 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1256 :     NUMBER_HEADER* nw;
; 1257 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1258 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1259 :     char v_sign;
; 1260 :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 1261 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1262 :     {
; 1263 :         // u == 0 ÇÃèÍçá
; 1264 : 
; 1265 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1266 :         {
; 1267 :             // v == 0 ÇÃèÍçá
; 1268 : 
; 1269 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1270 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1271 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN9@PMC_Subtru

; 1272 :         {
; 1273 :             // v > 0 ÇÃèÍçá
; 1274 : 
; 1275 :             // -v Çï‘Ç∑
; 1276 :             if ((result = From_L_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Subtru

; 1277 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN11@PMC_Subtru:

; 1278 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN9@PMC_Subtru:

; 1279 :         else
; 1280 :         {
; 1281 :             // v < 0 ÇÃèÍçá
; 1282 : 
; 1283 :             // - v Çï‘Ç∑
; 1284 :             if ((result = From_L_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1285 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1286 :         }
; 1287 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1288 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN13@PMC_Subtru

; 1289 :     {
; 1290 :         // u > 0 ÇÃèÍçá
; 1291 : 
; 1292 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN15@PMC_Subtru

; 1293 :         {
; 1294 :             // v == 0 ÇÃèÍçá
; 1295 : 
; 1296 :             // u Çï‘Ç∑
; 1297 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1298 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1299 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 1300 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN18@PMC_Subtru

; 1301 :         {
; 1302 :             // v > 0 ÇÃèÍçá
; 1303 : 
; 1304 :             // abs(u) - abs(v) Çï‘Ç∑
; 1305 :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Subtru

; 1306 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 1307 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN18@PMC_Subtru:

; 1308 :         else
; 1309 :         {
; 1310 :             // v < 0 ÇÃèÍçá
; 1311 : 
; 1312 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1313 :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1314 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1315 :         }
; 1316 :     }

	jmp	$LN6@PMC_Subtru
$LN13@PMC_Subtru:

; 1317 :     else
; 1318 :     {
; 1319 :         // u < 0 ÇÃèÍçá
; 1320 : 
; 1321 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN22@PMC_Subtru

; 1322 :         {
; 1323 :             // v == 0 ÇÃèÍçá
; 1324 : 
; 1325 :             // u Çï‘Ç∑
; 1326 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1327 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1328 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1329 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN25@PMC_Subtru

; 1330 :         {
; 1331 :             // v > 0 ÇÃèÍçá
; 1332 : 
; 1333 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1334 :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Subtru

; 1335 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN27@PMC_Subtru:

; 1336 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN25@PMC_Subtru:

; 1337 :         else
; 1338 :         {
; 1339 :             // v < 0 ÇÃèÍçá
; 1340 : 
; 1341 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1342 :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1343 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1344 :         }
; 1345 :     }
; 1346 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1347 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1348 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN33@PMC_Subtru:
	DD	2
	DD	$LN32@PMC_Subtru
$LN32@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN30@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN31@PMC_Subtru
$LN31@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN30@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_I@12 PROC				; COMDAT

; 1147 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1148 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1149 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1150 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1151 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1152 :     PMC_STATUS_CODE result;
; 1153 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1154 :     NUMBER_HEADER* nw;
; 1155 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1156 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1157 :     char v_sign;
; 1158 :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 1159 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1160 :     {
; 1161 :         // u == 0 ÇÃèÍçá
; 1162 : 
; 1163 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1164 :         {
; 1165 :             // v == 0 ÇÃèÍçá
; 1166 : 
; 1167 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1168 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1169 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN9@PMC_Subtru

; 1170 :         {
; 1171 :             // v > 0 ÇÃèÍçá
; 1172 : 
; 1173 :             // -v Çï‘Ç∑
; 1174 :             if ((result = From_I_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _v_sign$[ebp]
	neg	edx
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Subtru

; 1175 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN11@PMC_Subtru:

; 1176 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN9@PMC_Subtru:

; 1177 :         else
; 1178 :         {
; 1179 :             // v < 0 ÇÃèÍçá
; 1180 : 
; 1181 :             // -v Çï‘Ç∑
; 1182 :             if ((result = From_I_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _v_sign$[ebp]
	neg	edx
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1183 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1184 :         }
; 1185 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1186 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN13@PMC_Subtru

; 1187 :     {
; 1188 :         // u > 0 ÇÃèÍçá
; 1189 : 
; 1190 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN15@PMC_Subtru

; 1191 :         {
; 1192 :             // v == 0 ÇÃèÍçá
; 1193 : 
; 1194 :             // u Çï‘Ç∑
; 1195 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1196 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1197 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 1198 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN18@PMC_Subtru

; 1199 :         {
; 1200 :             // v > 0 ÇÃèÍçá
; 1201 : 
; 1202 :             // abs(u) - abs(v) Çï‘Ç∑
; 1203 :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Subtru

; 1204 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 1205 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN18@PMC_Subtru:

; 1206 :         else
; 1207 :         {
; 1208 :             // v < 0 ÇÃèÍçá
; 1209 : 
; 1210 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1211 :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1212 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1213 :         }
; 1214 :     }

	jmp	$LN6@PMC_Subtru
$LN13@PMC_Subtru:

; 1215 :     else
; 1216 :     {
; 1217 :         // u < 0 ÇÃèÍçá
; 1218 : 
; 1219 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN22@PMC_Subtru

; 1220 :         {
; 1221 :             // v == 0 ÇÃèÍçá
; 1222 : 
; 1223 :             // u Çï‘Ç∑
; 1224 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1225 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1226 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1227 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN25@PMC_Subtru

; 1228 :         {
; 1229 :             // v > 0 ÇÃèÍçá
; 1230 : 
; 1231 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1232 :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Subtru

; 1233 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN27@PMC_Subtru:

; 1234 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN25@PMC_Subtru:

; 1235 :         else
; 1236 :         {
; 1237 :             // v < 0 ÇÃèÍçá
; 1238 : 
; 1239 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1240 :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1241 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1242 :         }
; 1243 :     }
; 1244 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1245 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1246 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN33@PMC_Subtru:
	DD	2
	DD	$LN32@PMC_Subtru
$LN32@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN30@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN31@PMC_Subtru
$LN31@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN30@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -60						; size = 4
_u_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_UX_X@12 PROC				; COMDAT

; 1064 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1065 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1066 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1067 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1068 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1069 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1070 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1071 :     PMC_STATUS_CODE result;
; 1072 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1073 :     NUMBER_HEADER* nw;
; 1074 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1075 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1076 :     char u_is_zero;
; 1077 :     if ((result = IS_ZERO_UINT(u, &u_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _u_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_IS_ZERO_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1078 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1079 :     if (u_is_zero)

	movsx	eax, BYTE PTR _u_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN7@PMC_Subtru

; 1080 :     {
; 1081 :         // u == 0 ÇÃèÍçá
; 1082 : 
; 1083 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Subtru

; 1084 :         {
; 1085 :             // v == 0 ÇÃèÍçá
; 1086 : 
; 1087 :             // 0 Çï‘Ç∑
; 1088 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1089 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1090 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN11@PMC_Subtru

; 1091 :         {
; 1092 :             // v > 0 ÇÃèÍçá
; 1093 : 
; 1094 :             // -v Çï‘Ç∑
; 1095 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1096 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1097 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN11@PMC_Subtru:

; 1098 :         else
; 1099 :         {
; 1100 :             // v < 0 ÇÃèÍçá
; 1101 : 
; 1102 :             // -v Çï‘Ç∑
; 1103 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1104 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1105 :         }
; 1106 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1107 :     else
; 1108 :     {
; 1109 :         // u > 0 ÇÃèÍçá
; 1110 : 
; 1111 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@PMC_Subtru

; 1112 :         {
; 1113 :             // v == 0 ÇÃèÍçá
; 1114 : 
; 1115 :             // u Çï‘Ç∑
; 1116 :             PMC_HANDLE_UINT new_u;
; 1117 :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1118 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1119 :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 1120 :             {
; 1121 :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1122 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 1123 :             }
; 1124 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN15@PMC_Subtru:

; 1125 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN19@PMC_Subtru

; 1126 :         {
; 1127 :             // u > 0 ÇÃèÍçá
; 1128 : 
; 1129 :             // u - abs(v) Çï‘Ç∑
; 1130 :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1131 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1132 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN19@PMC_Subtru:

; 1133 :         else
; 1134 :         {
; 1135 :             // u < 0 ÇÃèÍçá
; 1136 : 
; 1137 :             // u + abs(v) ÇåvéZÇ∑ÇÈ
; 1138 :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1139 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1140 :         }
; 1141 :     }
; 1142 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1143 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1144 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN28@PMC_Subtru:
	DD	3
	DD	$LN27@PMC_Subtru
$LN27@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN25@PMC_Subtru
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN26@PMC_Subtru
$LN26@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN25@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN24@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Subtruct_L_X@16 PROC				; COMDAT

; 970  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 971  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 972  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 973  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 974  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 975  :     PMC_STATUS_CODE result;
; 976  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 977  :     NUMBER_HEADER* nw;
; 978  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 979  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 980  :     char u_sign;
; 981  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 982  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 983  :     {
; 984  :         // u == 0 ÇÃèÍçá
; 985  : 
; 986  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 987  :         {
; 988  :             // v == 0 ÇÃèÍçá
; 989  : 
; 990  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 991  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 992  :         else
; 993  :         {
; 994  :             // v != 0 ÇÃèÍçá
; 995  : 
; 996  :             // -v Çï‘Ç∑
; 997  :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 998  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 999  :         }
; 1000 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1001 :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 1002 :     {
; 1003 :         // u > 0 ÇÃèÍçá
; 1004 : 
; 1005 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 1006 :         {
; 1007 :             // v == 0 ÇÃèÍçá
; 1008 : 
; 1009 :             // u Çï‘Ç∑
; 1010 :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1011 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1012 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1013 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 1014 :         {
; 1015 :             // v > 0 ÇÃèÍçá
; 1016 : 
; 1017 :             // abs(u) - abs(v) Çï‘Ç∑
; 1018 :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1019 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1020 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1021 :         else
; 1022 :         {
; 1023 :             // v < 0 ÇÃèÍçá
; 1024 : 
; 1025 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1026 :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1027 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1028 :         }
; 1029 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1030 :     else
; 1031 :     {
; 1032 :         // u < 0 ÇÃèÍçá
; 1033 : 
; 1034 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 1035 :         {
; 1036 :             // v == 0 ÇÃèÍçá
; 1037 : 
; 1038 :             // u Çï‘Ç∑
; 1039 :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1040 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1041 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1042 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 1043 :         {
; 1044 :             // v > 0 ÇÃèÍçá
; 1045 : 
; 1046 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1047 :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1048 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1049 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1050 :         else
; 1051 :         {
; 1052 :             // v < 0 ÇÃèÍçá
; 1053 : 
; 1054 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1055 :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1056 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1057 :         }
; 1058 :     }
; 1059 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1060 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1061 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_I_X@12 PROC				; COMDAT

; 876  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 877  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 878  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 879  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 880  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 881  :     PMC_STATUS_CODE result;
; 882  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 883  :     NUMBER_HEADER* nw;
; 884  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 885  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 886  :     char u_sign;
; 887  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 888  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 889  :     {
; 890  :         // u == 0 ÇÃèÍçá
; 891  : 
; 892  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 893  :         {
; 894  :             // v == 0 ÇÃèÍçá
; 895  : 
; 896  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 897  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 898  :         else
; 899  :         {
; 900  :             // v != 0 ÇÃèÍçá
; 901  : 
; 902  :             // -v Çï‘Ç∑
; 903  :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 904  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 905  :         }
; 906  :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 907  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 908  :     {
; 909  :         // u > 0 ÇÃèÍçá
; 910  : 
; 911  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 912  :         {
; 913  :             // v == 0 ÇÃèÍçá
; 914  : 
; 915  :             // u Çï‘Ç∑
; 916  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 917  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 918  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 919  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 920  :         {
; 921  :             // v > 0 ÇÃèÍçá
; 922  : 
; 923  :             // abs(u) - abs(v) Çï‘Ç∑
; 924  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 925  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 926  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 927  :         else
; 928  :         {
; 929  :             // v < 0 ÇÃèÍçá
; 930  : 
; 931  :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 932  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 933  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 934  :         }
; 935  :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 936  :     else
; 937  :     {
; 938  :         // u < 0 ÇÃèÍçá
; 939  : 
; 940  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 941  :         {
; 942  :             // v == 0 ÇÃèÍçá
; 943  : 
; 944  :             // u Çï‘Ç∑
; 945  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 946  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 947  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 948  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 949  :         {
; 950  :             // v > 0 ÇÃèÍçá
; 951  : 
; 952  :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 953  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 954  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 955  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 956  :         else
; 957  :         {
; 958  :             // v < 0 ÇÃèÍçá
; 959  : 
; 960  :             // - abs(u) + abs(v) Çï‘Ç∑
; 961  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 962  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 963  :         }
; 964  :     }
; 965  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 966  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 967  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_X@12 PROC					; COMDAT

; 779  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 780  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 781  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 782  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 783  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 784  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 785  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 786  :     PMC_STATUS_CODE result;
; 787  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 788  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 789  :     NUMBER_HEADER* nw;
; 790  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 791  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 792  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 793  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 794  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_X_

; 795  :     {
; 796  :         // u == 0 ÇÃèÍçá
; 797  : 
; 798  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Add_X_

; 799  :         {
; 800  :             // v == 0 ÇÃèÍçá
; 801  : 
; 802  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 803  :         }

	jmp	SHORT $LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 804  :         else
; 805  :         {
; 806  :             // v != 0 ÇÃèÍçá
; 807  : 
; 808  :             // v Çï‘Ç∑
; 809  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 810  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 811  :         }
; 812  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 813  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN12@PMC_Add_X_

; 814  :     {
; 815  :         // u > 0 ÇÃèÍçá
; 816  : 
; 817  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Add_X_

; 818  :         {
; 819  :             // v == 0 ÇÃèÍçá
; 820  : 
; 821  :             // u Çï‘Ç∑
; 822  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 823  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 824  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN14@PMC_Add_X_:

; 825  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Add_X_

; 826  :         {
; 827  :             // v > 0 ÇÃèÍçá
; 828  : 
; 829  :             // abs(u) + abs(v) Çï‘Ç∑
; 830  :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Add_X_

; 831  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN19@PMC_Add_X_:

; 832  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN17@PMC_Add_X_:

; 833  :         else
; 834  :         {
; 835  :             // v < 0 ÇÃèÍçá
; 836  : 
; 837  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 838  :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 839  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 840  :         }
; 841  :     }

	jmp	$LN8@PMC_Add_X_
$LN12@PMC_Add_X_:

; 842  :     else
; 843  :     {
; 844  :         // u < 0 ÇÃèÍçá
; 845  : 
; 846  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Add_X_

; 847  :         {
; 848  :             // v == 0 ÇÃèÍçá
; 849  : 
; 850  :             // u Çï‘Ç∑
; 851  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Add_X_

; 852  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN23@PMC_Add_X_:

; 853  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN21@PMC_Add_X_:

; 854  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Add_X_

; 855  :         {
; 856  :             // v > 0 ÇÃèÍçá
; 857  : 
; 858  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 859  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Add_X_

; 860  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN26@PMC_Add_X_:

; 861  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN24@PMC_Add_X_:

; 862  :         else
; 863  :         {
; 864  :             // v < 0 ÇÃèÍçá
; 865  : 
; 866  :             // - abs(u) - abs(v) Çï‘Ç∑
; 867  :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 868  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 869  :         }
; 870  :     }
; 871  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 872  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 873  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Add_X_:
	DD	1
	DD	$LN30@PMC_Add_X_
$LN30@PMC_Add_X_:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_UX@12
_TEXT	SEGMENT
_type$1 = -72						; size = 4
_new_v$2 = -60						; size = 4
_v_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_UX@12 PROC					; COMDAT

; 687  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 688  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 689  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 690  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 691  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 692  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 693  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 694  :     PMC_STATUS_CODE result;
; 695  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 696  :     NUMBER_HEADER* nw;
; 697  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 698  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 699  :     char v_is_zero;
; 700  :     if ((result = IS_ZERO_UINT(v, &v_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _v_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_IS_ZERO_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 701  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 702  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	$LN7@PMC_Add_X_

; 703  :     {
; 704  :         // u == 0 ÇÃèÍçá
; 705  : 
; 706  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN9@PMC_Add_X_

; 707  :         {
; 708  :             // v == 0 ÇÃèÍçá
; 709  : 
; 710  :             // 0 Çï‘Ç∑
; 711  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 712  :         }

	jmp	$LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 713  :         else
; 714  :         {
; 715  :             // v > 0 ÇÃèÍçá
; 716  : 
; 717  :             // v Çï‘Ç∑
; 718  :             PMC_HANDLE_UINT new_v;
; 719  :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Add_X_

; 720  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 721  :             PMC_NUMBER_TYPE_CODE type;
; 722  :             if ((result = ep_uint.GetNumberType_X(new_v, &type)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _type$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_v$2[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Add_X_

; 723  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN12@PMC_Add_X_:

; 724  :             if ((result = AllocateNumber(&nw, 1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 725  :             {
; 726  :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 727  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 728  :             }
; 729  :         }
; 730  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 731  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN14@PMC_Add_X_

; 732  :     {
; 733  :         // u > 0 ÇÃèÍçá
; 734  : 
; 735  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN16@PMC_Add_X_

; 736  :         {
; 737  :             // v == 0 ÇÃèÍçá
; 738  : 
; 739  :             // u Çï‘Ç∑
; 740  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Add_X_

; 741  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 742  :         }

	jmp	SHORT $LN17@PMC_Add_X_
$LN16@PMC_Add_X_:

; 743  :         else
; 744  :         {
; 745  :             // v > 0 ÇÃèÍçá
; 746  : 
; 747  :             // abs(u) + v Çï‘Ç∑
; 748  :             if ((result = AddU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 749  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 750  :         }
; 751  :     }

	jmp	SHORT $LN8@PMC_Add_X_
$LN14@PMC_Add_X_:

; 752  :     else
; 753  :     {
; 754  :         // u < 0 ÇÃèÍçá
; 755  : 
; 756  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Add_X_

; 757  :         {
; 758  :             // v == 0 ÇÃèÍçá
; 759  : 
; 760  :             // u Çï‘Ç∑
; 761  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Add_X_

; 762  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN22@PMC_Add_X_:

; 763  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN20@PMC_Add_X_:

; 764  :         else
; 765  :         {
; 766  :             // v > 0 ÇÃèÍçá
; 767  : 
; 768  :             // - abs(u) + v Çï‘Ç∑
; 769  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 770  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 771  :         }
; 772  : 
; 773  :     }
; 774  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 775  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 776  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN30@PMC_Add_X_:
	DD	4
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN26@PMC_Add_X_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN26@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN25@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Add_X_L@16 PROC					; COMDAT

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 586  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 587  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 588  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 589  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 590  :     PMC_STATUS_CODE result;
; 591  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 592  :     NUMBER_HEADER* nw;
; 593  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 594  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 595  :     char v_sign;
; 596  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 597  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 598  :     {
; 599  :         // u == 0 ÇÃèÍçá
; 600  : 
; 601  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 602  :         {
; 603  :             // v == 0 ÇÃèÍçá
; 604  : 
; 605  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 606  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 607  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN9@PMC_Add_X_

; 608  :         {
; 609  :             // v > 0 ÇÃèÍçá
; 610  : 
; 611  :             // v Çï‘Ç∑
; 612  :             if ((result = From_L_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _v_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Add_X_

; 613  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 614  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN9@PMC_Add_X_:

; 615  :         else
; 616  :         {
; 617  :             // v < 0 ÇÃèÍçá
; 618  : 
; 619  :             // v Çï‘Ç∑
; 620  :             if ((result = From_L_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _v_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 621  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 622  :         }
; 623  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 624  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN13@PMC_Add_X_

; 625  :     {
; 626  :         // u > 0 ÇÃèÍçá
; 627  : 
; 628  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN15@PMC_Add_X_

; 629  :         {
; 630  :             // v == 0 ÇÃèÍçá
; 631  : 
; 632  :             // u Çï‘Ç∑
; 633  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 634  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 635  :         }

	jmp	SHORT $LN16@PMC_Add_X_
$LN15@PMC_Add_X_:

; 636  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN18@PMC_Add_X_

; 637  :         {
; 638  :             // v > 0 ÇÃèÍçá
; 639  : 
; 640  :             // abs(u) + abs(v) Çï‘Ç∑
; 641  :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Add_X_

; 642  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN20@PMC_Add_X_:

; 643  :         }

	jmp	SHORT $LN16@PMC_Add_X_
$LN18@PMC_Add_X_:

; 644  :         else
; 645  :         {
; 646  :             // v < 0 ÇÃèÍçá
; 647  : 
; 648  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 649  :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 650  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 651  :         }
; 652  :     }

	jmp	$LN6@PMC_Add_X_
$LN13@PMC_Add_X_:

; 653  :     else
; 654  :     {
; 655  :         // u < 0 ÇÃèÍçá
; 656  : 
; 657  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN22@PMC_Add_X_

; 658  :         {
; 659  :             // v == 0 ÇÃèÍçá
; 660  : 
; 661  :             // u Çï‘Ç∑
; 662  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 663  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 664  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 665  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN25@PMC_Add_X_

; 666  :         {
; 667  :             // v > 0 ÇÃèÍçá
; 668  : 
; 669  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 670  :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Add_X_

; 671  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN27@PMC_Add_X_:

; 672  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN25@PMC_Add_X_:

; 673  :         else
; 674  :         {
; 675  :             // v < 0 ÇÃèÍçá
; 676  : 
; 677  :             // - abs(u) - abs(v) Çï‘Ç∑
; 678  :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 679  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 680  :         }
; 681  :     }
; 682  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 683  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 684  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN33@PMC_Add_X_:
	DD	2
	DD	$LN32@PMC_Add_X_
$LN32@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN30@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN31@PMC_Add_X_
$LN31@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN30@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_I@12 PROC					; COMDAT

; 483  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 484  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 485  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 486  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 487  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 488  :     PMC_STATUS_CODE result;
; 489  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 490  :     NUMBER_HEADER* nw;
; 491  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 492  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 493  :     char v_sign;
; 494  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 495  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 496  :     {
; 497  :         // u == 0 ÇÃèÍçá
; 498  : 
; 499  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 500  :         {
; 501  :             // v == 0 ÇÃèÍçá
; 502  : 
; 503  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 504  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 505  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN9@PMC_Add_X_

; 506  :         {
; 507  :             // v > 0 ÇÃèÍçá
; 508  : 
; 509  :             // v Çï‘Ç∑
; 510  :             if ((result = From_I_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _v_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Add_X_

; 511  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 512  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN9@PMC_Add_X_:

; 513  :         else
; 514  :         {
; 515  :             // v < 0 ÇÃèÍçá
; 516  : 
; 517  :             // v Çï‘Ç∑
; 518  :             if ((result = From_I_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _v_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 519  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 520  :         }
; 521  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 522  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN13@PMC_Add_X_

; 523  :     {
; 524  :         // u > 0 ÇÃèÍçá
; 525  : 
; 526  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN15@PMC_Add_X_

; 527  :         {
; 528  :             // v == 0 ÇÃèÍçá
; 529  : 
; 530  :             // u Çï‘Ç∑
; 531  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 532  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 533  :         }

	jmp	SHORT $LN16@PMC_Add_X_
$LN15@PMC_Add_X_:

; 534  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN18@PMC_Add_X_

; 535  :         {
; 536  :             // v > 0 ÇÃèÍçá
; 537  : 
; 538  :             // abs(u) + abs(v) Çï‘Ç∑
; 539  :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Add_X_

; 540  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN20@PMC_Add_X_:

; 541  :         }

	jmp	SHORT $LN16@PMC_Add_X_
$LN18@PMC_Add_X_:

; 542  :         else
; 543  :         {
; 544  :             // v < 0 ÇÃèÍçá
; 545  : 
; 546  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 547  :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 548  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 549  :         }
; 550  :     }

	jmp	$LN6@PMC_Add_X_
$LN13@PMC_Add_X_:

; 551  :     else
; 552  :     {
; 553  :         // u < 0 ÇÃèÍçá
; 554  : 
; 555  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN22@PMC_Add_X_

; 556  :         {
; 557  :             // v == 0 ÇÃèÍçá
; 558  : 
; 559  :             // u Çï‘Ç∑
; 560  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 561  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 562  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 563  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN25@PMC_Add_X_

; 564  :         {
; 565  :             // v > 0 ÇÃèÍçá
; 566  : 
; 567  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 568  :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Add_X_

; 569  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN27@PMC_Add_X_:

; 570  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN25@PMC_Add_X_:

; 571  :         else
; 572  :         {
; 573  :             // v < 0 ÇÃèÍçá
; 574  : 
; 575  :             // - abs(u) - abs(v) Çï‘Ç∑
; 576  :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 577  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 578  :         }
; 579  :     }
; 580  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 581  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 582  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN33@PMC_Add_X_:
	DD	2
	DD	$LN32@PMC_Add_X_
$LN32@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN30@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN31@PMC_Add_X_
$LN31@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN30@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -60						; size = 4
_u_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_UX_X@12 PROC					; COMDAT

; 410  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 411  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_UX

; 412  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN2@PMC_Add_UX:

; 413  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_UX

; 414  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN3@PMC_Add_UX:

; 415  :     PMC_STATUS_CODE result;
; 416  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 417  :     NUMBER_HEADER* nw;
; 418  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_UX

; 419  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN4@PMC_Add_UX:

; 420  :     char u_is_zero;
; 421  :     if ((result = IS_ZERO_UINT(u, &u_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _u_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_IS_ZERO_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_UX

; 422  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN5@PMC_Add_UX:

; 423  :     if (u_is_zero)

	movsx	eax, BYTE PTR _u_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN6@PMC_Add_UX

; 424  :     {
; 425  :         // u == 0 ÇÃèÍçá
; 426  : 
; 427  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_Add_UX

; 428  :         {
; 429  :             // v == 0 ÇÃèÍçá
; 430  : 
; 431  :             // 0 Çï‘Ç∑
; 432  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 433  :         }

	jmp	SHORT $LN9@PMC_Add_UX
$LN8@PMC_Add_UX:

; 434  :         else
; 435  :         {
; 436  :             // v != 0 ÇÃèÍçá
; 437  : 
; 438  :             // v Çï‘Ç∑
; 439  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Add_UX

; 440  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN9@PMC_Add_UX:

; 441  :         }
; 442  :     }

	jmp	$LN7@PMC_Add_UX
$LN6@PMC_Add_UX:

; 443  :     else
; 444  :     {
; 445  :         // u > 0 ÇÃèÍçá
; 446  : 
; 447  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN11@PMC_Add_UX

; 448  :         {
; 449  :             // v == 0 ÇÃèÍçá
; 450  : 
; 451  :             // u Çï‘Ç∑
; 452  :             PMC_HANDLE_UINT new_u;
; 453  :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_UX

; 454  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN13@PMC_Add_UX:

; 455  :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_UX

; 456  :             {
; 457  :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 458  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN14@PMC_Add_UX:

; 459  :             }
; 460  :         }

	jmp	SHORT $LN7@PMC_Add_UX
$LN11@PMC_Add_UX:

; 461  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_UX

; 462  :         {
; 463  :             // v > 0 ÇÃèÍçá
; 464  : 
; 465  :             // u + abs(v) Çï‘Ç∑
; 466  :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_UX

; 467  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN17@PMC_Add_UX:

; 468  :         }

	jmp	SHORT $LN7@PMC_Add_UX
$LN15@PMC_Add_UX:

; 469  :         else
; 470  :         {
; 471  :             // v < 0 ÇÃèÍçá
; 472  : 
; 473  :             // u - abs(v) ÇåvéZÇ∑ÇÈ
; 474  :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_UX

; 475  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN7@PMC_Add_UX:

; 476  :         }
; 477  :     }
; 478  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 479  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_UX:

; 480  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@PMC_Add_UX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN24@PMC_Add_UX:
	DD	3
	DD	$LN23@PMC_Add_UX
$LN23@PMC_Add_UX:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@PMC_Add_UX
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN21@PMC_Add_UX
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN22@PMC_Add_UX
$LN22@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN21@PMC_Add_UX:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN20@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Add_L_X@16 PROC					; COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 317  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_L_

; 318  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN2@PMC_Add_L_:

; 319  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_L_

; 320  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN3@PMC_Add_L_:

; 321  :     PMC_STATUS_CODE result;
; 322  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 323  :     NUMBER_HEADER* nw;
; 324  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_L_

; 325  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN4@PMC_Add_L_:

; 326  :     char u_sign;
; 327  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 328  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_L_

; 329  :     {
; 330  :         // u == 0 ÇÃèÍçá
; 331  : 
; 332  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_L_

; 333  :         {
; 334  :             // v == 0 ÇÃèÍçá
; 335  : 
; 336  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 337  :         }

	jmp	SHORT $LN8@PMC_Add_L_
$LN7@PMC_Add_L_:

; 338  :         else
; 339  :         {
; 340  :             // v != 0 ÇÃèÍçá
; 341  : 
; 342  :             // v Çï‘Ç∑
; 343  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_L_

; 344  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN8@PMC_Add_L_:

; 345  :         }
; 346  :     }

	jmp	$LN6@PMC_Add_L_
$LN5@PMC_Add_L_:

; 347  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_L_

; 348  :     {
; 349  :         // u > 0 ÇÃèÍçá
; 350  : 
; 351  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_L_

; 352  :         {
; 353  :             // v == 0 ÇÃèÍçá
; 354  : 
; 355  :             // u Çï‘Ç∑
; 356  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_L_

; 357  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN14@PMC_Add_L_:

; 358  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN12@PMC_Add_L_:

; 359  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_L_

; 360  :         {
; 361  :             // v > 0 ÇÃèÍçá
; 362  : 
; 363  :             // abs(u) + abs(v) Çï‘Ç∑
; 364  :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_L_

; 365  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN17@PMC_Add_L_:

; 366  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN15@PMC_Add_L_:

; 367  :         else
; 368  :         {
; 369  :             // v < 0 ÇÃèÍçá
; 370  : 
; 371  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 372  :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_L_

; 373  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN13@PMC_Add_L_:

; 374  :         }
; 375  :     }

	jmp	$LN6@PMC_Add_L_
$LN10@PMC_Add_L_:

; 376  :     else
; 377  :     {
; 378  :         // u < 0 ÇÃèÍçá
; 379  : 
; 380  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_L_

; 381  :         {
; 382  :             // v == 0 ÇÃèÍçá
; 383  : 
; 384  :             // u Çï‘Ç∑
; 385  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_L_

; 386  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN21@PMC_Add_L_:

; 387  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN19@PMC_Add_L_:

; 388  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_L_

; 389  :         {
; 390  :             // v > 0 ÇÃèÍçá
; 391  : 
; 392  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 393  :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_L_

; 394  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN24@PMC_Add_L_:

; 395  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN22@PMC_Add_L_:

; 396  :         else
; 397  :         {
; 398  :             // v < 0 ÇÃèÍçá
; 399  : 
; 400  :             // - abs(u) - abs(v) Çï‘Ç∑
; 401  :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_L_

; 402  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN6@PMC_Add_L_:

; 403  :         }
; 404  :     }
; 405  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 406  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_L_:

; 407  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_L_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Add_L_:
	DD	2
	DD	$LN29@PMC_Add_L_
$LN29@PMC_Add_L_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_L_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_L_
$LN28@PMC_Add_L_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_L_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_I_X@12 PROC					; COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 223  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_I_

; 224  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN2@PMC_Add_I_:

; 225  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_I_

; 226  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN3@PMC_Add_I_:

; 227  :     PMC_STATUS_CODE result;
; 228  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 229  :     NUMBER_HEADER* nw;
; 230  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_I_

; 231  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN4@PMC_Add_I_:

; 232  :     char u_sign;
; 233  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 234  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_I_

; 235  :     {
; 236  :         // u == 0 ÇÃèÍçá
; 237  : 
; 238  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_I_

; 239  :         {
; 240  :             // v == 0 ÇÃèÍçá
; 241  : 
; 242  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 243  :         }

	jmp	SHORT $LN8@PMC_Add_I_
$LN7@PMC_Add_I_:

; 244  :         else
; 245  :         {
; 246  :             // v != 0 ÇÃèÍçá
; 247  : 
; 248  :             // v Çï‘Ç∑
; 249  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_I_

; 250  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN8@PMC_Add_I_:

; 251  :         }
; 252  :     }

	jmp	$LN6@PMC_Add_I_
$LN5@PMC_Add_I_:

; 253  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_I_

; 254  :     {
; 255  :         // u > 0 ÇÃèÍçá
; 256  : 
; 257  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_I_

; 258  :         {
; 259  :             // v == 0 ÇÃèÍçá
; 260  : 
; 261  :             // u Çï‘Ç∑
; 262  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_I_

; 263  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN14@PMC_Add_I_:

; 264  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN12@PMC_Add_I_:

; 265  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_I_

; 266  :         {
; 267  :             // v > 0 ÇÃèÍçá
; 268  : 
; 269  :             // abs(u) + abs(v) Çï‘Ç∑
; 270  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_I_

; 271  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN17@PMC_Add_I_:

; 272  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN15@PMC_Add_I_:

; 273  :         else
; 274  :         {
; 275  :             // v < 0 ÇÃèÍçá
; 276  : 
; 277  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 278  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_I_

; 279  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN13@PMC_Add_I_:

; 280  :         }
; 281  :     }

	jmp	$LN6@PMC_Add_I_
$LN10@PMC_Add_I_:

; 282  :     else
; 283  :     {
; 284  :         // u < 0 ÇÃèÍçá
; 285  : 
; 286  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_I_

; 287  :         {
; 288  :             // v == 0 ÇÃèÍçá
; 289  : 
; 290  :             // u Çï‘Ç∑
; 291  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_I_

; 292  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN21@PMC_Add_I_:

; 293  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN19@PMC_Add_I_:

; 294  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_I_

; 295  :         {
; 296  :             // v > 0 ÇÃèÍçá
; 297  : 
; 298  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 299  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_I_

; 300  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN24@PMC_Add_I_:

; 301  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN22@PMC_Add_I_:

; 302  :         else
; 303  :         {
; 304  :             // v < 0 ÇÃèÍçá
; 305  : 
; 306  :             // - abs(u) - abs(v) Çï‘Ç∑
; 307  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_I_

; 308  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN6@PMC_Add_I_:

; 309  :         }
; 310  :     }
; 311  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 312  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_I_:

; 313  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_I_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Add_I_:
	DD	2
	DD	$LN29@PMC_Add_I_
$LN29@PMC_Add_I_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_I_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_I_
$LN28@PMC_Add_I_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_I_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_I_X@12 ENDP
_TEXT	ENDS
END
