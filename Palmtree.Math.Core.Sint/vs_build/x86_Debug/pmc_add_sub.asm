; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_add_sub.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__5A8189A9_pmc_add_sub@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_Add_I_X@12
PUBLIC	_PMC_Add_L_X@16
PUBLIC	_PMC_Add_UX_X@12
PUBLIC	_PMC_Add_X_I@12
PUBLIC	_PMC_Add_X_L@16
PUBLIC	_PMC_Add_X_UX@12
PUBLIC	_PMC_Add_X_X@12
PUBLIC	_PMC_Subtruct_I_X@12
PUBLIC	_PMC_Subtruct_L_X@16
PUBLIC	_PMC_Subtruct_UX_X@12
PUBLIC	_PMC_Subtruct_X_I@12
PUBLIC	_PMC_Subtruct_X_L@16
PUBLIC	_PMC_Subtruct_X_UX@12
PUBLIC	_PMC_Subtruct_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_IsZero_UINT:PROC
EXTRN	_Negate_Imp:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_X_Imp
_TEXT	SEGMENT
_w_abs$1 = -48						; size = 4
_w_abs$2 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_X_Imp PROC					; COMDAT

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 169  :     PMC_STATUS_CODE result;
; 170  :     _INT32_T c;
; 171  :     if ((result = ep_uint.Compare_X_X(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+228
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 172  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 173  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 174  :     {
; 175  :         // abs(u) > abs(v) ÇÃèÍçá
; 176  : 
; 177  :         // abs(u) - abs(v) Çï‘Ç∑
; 178  :         PMC_HANDLE_UINT w_abs;
; 179  :         if ((result = ep_uint.Subtruct_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+100
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 180  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 181  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 182  :         {
; 183  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$2[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 184  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN6@SubtructU_:

; 185  :         }
; 186  :     }

	jmp	SHORT $LN4@SubtructU_
$LN3@SubtructU_:

; 187  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 188  :     {
; 189  :         // abs(u) == abs(v) ÇÃèÍçá
; 190  : 
; 191  :         // 0 Çï‘Ç∑
; 192  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 193  :     }

	jmp	SHORT $LN4@SubtructU_
$LN7@SubtructU_:

; 194  :     else
; 195  :     {
; 196  :         // abs(u) < abs(v) ÇÃèÍçá
; 197  : 
; 198  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 199  :         PMC_HANDLE_UINT w_abs;
; 200  :         if ((result = ep_uint.Subtruct_X_X(v, u, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+100
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 201  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 202  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 203  :         {
; 204  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 206  :         }
; 207  :     }
; 208  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 209  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@SubtructU_:
	DD	3
	DD	$LN15@SubtructU_
$LN15@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN13@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN14@SubtructU_
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN12@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_L_Imp
_TEXT	SEGMENT
_w_abs$1 = -64						; size = 4
_t$2 = -52						; size = 8
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_SubtructU_X_L_Imp PROC					; COMDAT

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 122  :     PMC_STATUS_CODE result;
; 123  :     _INT32_T c;
; 124  :     if ((result = ep_uint.Compare_X_L(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+224
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 125  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 126  :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 127  :     {
; 128  :         // abs(u) > abs(v) ÇÃèÍçá
; 129  : 
; 130  :         // abs(u) - abs(v) Çï‘Ç∑
; 131  :         PMC_HANDLE_UINT w_abs;
; 132  :         if ((result = ep_uint.Subtruct_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+96
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 133  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 134  :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 135  :         {
; 136  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN6@SubtructU_:

; 138  :         }
; 139  :     }

	jmp	$LN4@SubtructU_
$LN3@SubtructU_:

; 140  :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 141  :     {
; 142  :         // abs(u) == abs(v) ÇÃèÍçá
; 143  : 
; 144  :         // 0 Çï‘Ç∑
; 145  :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 146  :     }

	jmp	$LN4@SubtructU_
$LN7@SubtructU_:

; 147  :     else
; 148  :     {
; 149  :         // abs(u) < abs(v) ÇÃèÍçá
; 150  : 
; 151  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 152  :         _UINT64_T t;
; 153  :         if ((result = ep_uint.Subtruct_L_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+88
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 154  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 155  :         PMC_HANDLE_UINT w_abs;
; 156  :         if ((result = ep_uint.From_L(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$2[ebp]
	push	edx
	call	DWORD PTR _ep_uint+12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@SubtructU_

; 157  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN10@SubtructU_:

; 158  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 159  :         {
; 160  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 161  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 162  :         }
; 163  :     }
; 164  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 165  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SubtructU_:
	DD	4
	DD	$LN17@SubtructU_
$LN17@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@SubtructU_
	DD	-52					; ffffffccH
	DD	8
	DD	$LN15@SubtructU_
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN16@SubtructU_
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _SubtructU_X_I_Imp
_TEXT	SEGMENT
_w_abs$1 = -60						; size = 4
_t$2 = -48						; size = 4
_w_abs$3 = -36						; size = 4
_c$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_SubtructU_X_I_Imp PROC					; COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 75   :     PMC_STATUS_CODE result;
; 76   :     _INT32_T c;
; 77   :     if ((result = ep_uint.Compare_X_I(u, v, &c)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+220
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@SubtructU_

; 78   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN2@SubtructU_:

; 79   :     if (c > 0)

	cmp	DWORD PTR _c$[ebp], 0
	jle	SHORT $LN3@SubtructU_

; 80   :     {
; 81   :         // abs(u) > abs(v) ÇÃèÍçá
; 82   : 
; 83   :         // abs(u) - abs(v) Çï‘Ç∑
; 84   :         PMC_HANDLE_UINT w_abs;
; 85   :         if ((result = ep_uint.Subtruct_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+92
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@SubtructU_

; 86   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN5@SubtructU_:

; 87   :         if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@SubtructU_

; 88   :         {
; 89   :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@SubtructU_
$LN6@SubtructU_:

; 91   :         }
; 92   :     }

	jmp	$LN4@SubtructU_
$LN3@SubtructU_:

; 93   :     else if (c == 0)

	cmp	DWORD PTR _c$[ebp], 0
	jne	SHORT $LN7@SubtructU_

; 94   :     {
; 95   :         // abs(u) == abs(v) ÇÃèÍçá
; 96   : 
; 97   :         // 0 Çï‘Ç∑
; 98   :         *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 99   :     }

	jmp	$LN4@SubtructU_
$LN7@SubtructU_:

; 100  :     else
; 101  :     {
; 102  :         // abs(u) < abs(v) ÇÃèÍçá
; 103  : 
; 104  :         // - (abs(v) - abs(u)) Çï‘Ç∑
; 105  :         _UINT32_T t;
; 106  :         if ((result = ep_uint.Subtruct_I_X(v, u, &t)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _t$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+84
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@SubtructU_

; 107  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN9@SubtructU_:

; 108  :         PMC_HANDLE_UINT w_abs;
; 109  :         if ((result = ep_uint.From_I(t, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$2[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@SubtructU_

; 110  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN10@SubtructU_:

; 111  :         if ((result = AllocateNumber(w, -sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	movsx	ecx, BYTE PTR _sign$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@SubtructU_

; 112  :         {
; 113  :             ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@SubtructU_
$LN4@SubtructU_:

; 115  :         }
; 116  :     }
; 117  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@SubtructU_:

; 118  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@SubtructU_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@SubtructU_:
	DD	4
	DD	$LN17@SubtructU_
$LN17@SubtructU_:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@SubtructU_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@SubtructU_
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN15@SubtructU_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN16@SubtructU_
$LN16@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN15@SubtructU_:
	DB	116					; 00000074H
	DB	0
$LN14@SubtructU_:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN13@SubtructU_:
	DB	99					; 00000063H
	DB	0
_SubtructU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_X_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_X_Imp PROC					; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 61   :     PMC_STATUS_CODE result;
; 62   :     PMC_HANDLE_UINT w_abs;
; 63   :     if ((result = ep_uint.Add_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+80
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_X_I

; 64   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN2@AddU_X_X_I:

; 65   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_X_I

; 66   :     {
; 67   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 68   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_X_I
$LN3@AddU_X_X_I:

; 69   :     }
; 70   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_X_I:

; 71   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_X_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_X_I:
	DD	1
	DD	$LN6@AddU_X_X_I
$LN6@AddU_X_X_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_X_I
$LN5@AddU_X_X_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_L_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 8
_w$ = 24						; size = 4
_AddU_X_L_Imp PROC					; COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     PMC_STATUS_CODE result;
; 48   :     PMC_HANDLE_UINT w_abs;
; 49   :     if ((result = ep_uint.Add_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+76
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_L_I

; 50   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN2@AddU_X_L_I:

; 51   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_L_I

; 52   :     {
; 53   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_L_I
$LN3@AddU_X_L_I:

; 55   :     }
; 56   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_L_I:

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_L_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_L_I:
	DD	1
	DD	$LN6@AddU_X_L_I
$LN6@AddU_X_L_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_L_I
$LN5@AddU_X_L_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _AddU_X_I_Imp
_TEXT	SEGMENT
_w_abs$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_sign$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_AddU_X_I_Imp PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     PMC_STATUS_CODE result;
; 34   :     PMC_HANDLE_UINT w_abs;
; 35   :     if ((result = ep_uint.Add_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+72
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AddU_X_I_I

; 36   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN2@AddU_X_I_I:

; 37   :     if ((result = AllocateNumber(w, sign, w_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AddU_X_I_I

; 38   :     {
; 39   :         ep_uint.Dispose(w_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _w_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 40   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AddU_X_I_I
$LN3@AddU_X_I_I:

; 41   :     }
; 42   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AddU_X_I_I:

; 43   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AddU_X_I_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@AddU_X_I_I:
	DD	1
	DD	$LN6@AddU_X_I_I
$LN6@AddU_X_I_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@AddU_X_I_I
$LN5@AddU_X_I_I:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_AddU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_X@12 PROC				; COMDAT

; 1400 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1401 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1402 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1403 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1404 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1405 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1406 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1407 :     PMC_STATUS_CODE result;
; 1408 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1409 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1410 :     NUMBER_HEADER* nw;
; 1411 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1412 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1413 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1414 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1415 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 1416 :     {
; 1417 :         // u == 0 ÇÃèÍçá
; 1418 : 
; 1419 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Subtru

; 1420 :         {
; 1421 :             // v == 0 ÇÃèÍçá
; 1422 : 
; 1423 :             // 0 Çï‘Ç∑
; 1424 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1425 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1426 :         else
; 1427 :         {
; 1428 :             // v != 0 ÇÃèÍçá
; 1429 : 
; 1430 :             // -v Çï‘Ç∑
; 1431 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1432 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1433 :         }
; 1434 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1435 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN12@PMC_Subtru

; 1436 :     {
; 1437 :         // u > 0 ÇÃèÍçá
; 1438 : 
; 1439 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Subtru

; 1440 :         {
; 1441 :             // v == 0 ÇÃèÍçá
; 1442 : 
; 1443 :             // u Çï‘Ç∑
; 1444 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1445 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1446 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 1447 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Subtru

; 1448 :         {
; 1449 :             // v > 0 ÇÃèÍçá
; 1450 : 
; 1451 :             // abs(u) - abs(v) Çï‘Ç∑
; 1452 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Subtru

; 1453 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 1454 :         }

	jmp	SHORT $LN15@PMC_Subtru
$LN17@PMC_Subtru:

; 1455 :         else
; 1456 :         {
; 1457 :             // v < 0 ÇÃèÍçá
; 1458 : 
; 1459 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1460 :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 1461 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 1462 :         }
; 1463 :     }

	jmp	$LN8@PMC_Subtru
$LN12@PMC_Subtru:

; 1464 :     else
; 1465 :     {
; 1466 :         // u < 0 ÇÃèÍçá
; 1467 : 
; 1468 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Subtru

; 1469 :         {
; 1470 :             // v == 0 ÇÃèÍçá
; 1471 : 
; 1472 :             // u Çï‘Ç∑
; 1473 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Subtru

; 1474 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 1475 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN21@PMC_Subtru:

; 1476 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Subtru

; 1477 :         {
; 1478 :             // v > 0 ÇÃèÍçá
; 1479 : 
; 1480 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1481 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Subtru

; 1482 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 1483 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN24@PMC_Subtru:

; 1484 :         else
; 1485 :         {
; 1486 :             // v < 0 ÇÃèÍçá
; 1487 : 
; 1488 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1489 :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1490 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1491 :         }
; 1492 :     }
; 1493 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1494 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1495 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Subtru:
	DD	1
	DD	$LN30@PMC_Subtru
$LN30@PMC_Subtru:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_UX@12
_TEXT	SEGMENT
_new_v$1 = -60						; size = 4
_v_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_UX@12 PROC				; COMDAT

; 1310 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1311 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1312 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1313 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1314 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1315 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1316 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1317 :     PMC_STATUS_CODE result;
; 1318 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1319 :     NUMBER_HEADER* nw;
; 1320 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1321 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1322 :     char v_is_zero;
; 1323 :     if ((result = IsZero_UINT(v, &v_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _v_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_IsZero_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1324 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1325 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 1326 :     {
; 1327 :         // u == 0 ÇÃèÍçá
; 1328 : 
; 1329 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN9@PMC_Subtru

; 1330 :         {
; 1331 :             // v == 0 ÇÃèÍçá
; 1332 : 
; 1333 :             // 0 Çï‘Ç∑
; 1334 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1335 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1336 :         else
; 1337 :         {
; 1338 :             // v > 0 ÇÃèÍçá
; 1339 : 
; 1340 :             // -v Çï‘Ç∑
; 1341 :             PMC_HANDLE_UINT new_v;
; 1342 :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Subtru

; 1343 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN11@PMC_Subtru:

; 1344 :             if ((result = AllocateNumber(&nw, -1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	push	-1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1345 :             {
; 1346 :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1347 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1348 :             }
; 1349 :         }
; 1350 : 
; 1351 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1352 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN13@PMC_Subtru

; 1353 :     {
; 1354 :         // u > 0 ÇÃèÍçá
; 1355 : 
; 1356 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN15@PMC_Subtru

; 1357 :         {
; 1358 :             // v == 0 ÇÃèÍçá
; 1359 : 
; 1360 :             // u Çï‘Ç∑
; 1361 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1362 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1363 :         }

	jmp	SHORT $LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 1364 :         else
; 1365 :         {
; 1366 :             // v > 0 ÇÃèÍçá
; 1367 : 
; 1368 :             // abs(u) - v Çï‘Ç∑
; 1369 :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 1370 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 1371 :         }
; 1372 : 
; 1373 :     }

	jmp	SHORT $LN8@PMC_Subtru
$LN13@PMC_Subtru:

; 1374 :     else
; 1375 :     {
; 1376 :         // u < 0 ÇÃèÍçá
; 1377 : 
; 1378 :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN19@PMC_Subtru

; 1379 :         {
; 1380 :             // v == 0 ÇÃèÍçá
; 1381 : 
; 1382 :             // u Çï‘Ç∑
; 1383 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1384 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1385 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN19@PMC_Subtru:

; 1386 :         else
; 1387 :         {
; 1388 :             // v > 0 ÇÃèÍçá
; 1389 : 
; 1390 :             // - abs(u) - v ÇåvéZÇ∑ÇÈ
; 1391 :             if ((result = AddU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1392 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1393 :         }
; 1394 :     }
; 1395 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1397 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN28@PMC_Subtru:
	DD	3
	DD	$LN27@PMC_Subtru
$LN27@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN25@PMC_Subtru
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN26@PMC_Subtru
$LN26@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN25@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN24@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Subtruct_X_L@16 PROC				; COMDAT

; 1215 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1216 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1217 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1218 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1219 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1220 :     PMC_STATUS_CODE result;
; 1221 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1222 :     NUMBER_HEADER* nw;
; 1223 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1224 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1225 :     char v_sign;
; 1226 :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 1227 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1228 :     {
; 1229 :         // u == 0 ÇÃèÍçá
; 1230 : 
; 1231 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1232 :         {
; 1233 :             // v == 0 ÇÃèÍçá
; 1234 : 
; 1235 :             // 0 Çï‘Ç∑
; 1236 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1237 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1238 :         else
; 1239 :         {
; 1240 :             // v != 0 ÇÃèÍçá
; 1241 : 
; 1242 :             // -v Çï‘Ç∑
; 1243 :             if ((result = From_L_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1244 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1245 :         }
; 1246 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1247 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN10@PMC_Subtru

; 1248 :     {
; 1249 :         // u > 0 ÇÃèÍçá
; 1250 : 
; 1251 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Subtru

; 1252 :         {
; 1253 :             // v == 0 ÇÃèÍçá
; 1254 : 
; 1255 :             // u Çï‘Ç∑
; 1256 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1257 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1258 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1259 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Subtru

; 1260 :         {
; 1261 :             // v > 0 ÇÃèÍçá
; 1262 : 
; 1263 :             // abs(u) - abs(v) Çï‘Ç∑
; 1264 :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1265 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1266 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1267 :         else
; 1268 :         {
; 1269 :             // v < 0 ÇÃèÍçá
; 1270 : 
; 1271 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1272 :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1273 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1274 :         }
; 1275 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1276 :     else
; 1277 :     {
; 1278 :         // u < 0 ÇÃèÍçá
; 1279 : 
; 1280 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Subtru

; 1281 :         {
; 1282 :             // v == 0 ÇÃèÍçá
; 1283 : 
; 1284 :             // u Çï‘Ç∑
; 1285 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1286 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1287 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1288 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Subtru

; 1289 :         {
; 1290 :             // v > 0 ÇÃèÍçá
; 1291 : 
; 1292 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1293 :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1294 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1295 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1296 :         else
; 1297 :         {
; 1298 :             // v < 0 ÇÃèÍçá
; 1299 : 
; 1300 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1301 :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1302 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1303 :         }
; 1304 :     }
; 1305 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1306 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1307 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_I@12 PROC				; COMDAT

; 1120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1121 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1122 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1123 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1124 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1125 :     PMC_STATUS_CODE result;
; 1126 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1127 :     NUMBER_HEADER* nw;
; 1128 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 1129 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1130 :     char v_sign;
; 1131 :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 1132 :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Subtru

; 1133 :     {
; 1134 :         // u == 0 ÇÃèÍçá
; 1135 : 
; 1136 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Subtru

; 1137 :         {
; 1138 :             // v == 0 ÇÃèÍçá
; 1139 : 
; 1140 :             // 0 Çï‘Ç∑
; 1141 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1142 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1143 :         else
; 1144 :         {
; 1145 :             // v != 0 ÇÃèÍçá
; 1146 : 
; 1147 :             // -v Çï‘Ç∑
; 1148 :             if ((result = From_I_Imp(-v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movsx	edx, BYTE PTR _v_sign$[ebp]
	neg	edx
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1149 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1150 :         }
; 1151 :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 1152 :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN10@PMC_Subtru

; 1153 :     {
; 1154 :         // u > 0 ÇÃèÍçá
; 1155 : 
; 1156 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Subtru

; 1157 :         {
; 1158 :             // v == 0 ÇÃèÍçá
; 1159 : 
; 1160 :             // u Çï‘Ç∑
; 1161 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1162 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1163 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 1164 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Subtru

; 1165 :         {
; 1166 :             // v > 0 ÇÃèÍçá
; 1167 : 
; 1168 :             // abs(u) - abs(v) Çï‘Ç∑
; 1169 :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1170 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1171 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1172 :         else
; 1173 :         {
; 1174 :             // v < 0 ÇÃèÍçá
; 1175 : 
; 1176 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1177 :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1178 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1179 :         }
; 1180 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1181 :     else
; 1182 :     {
; 1183 :         // u < 0 ÇÃèÍçá
; 1184 : 
; 1185 :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Subtru

; 1186 :         {
; 1187 :             // v == 0 ÇÃèÍçá
; 1188 : 
; 1189 :             // u Çï‘Ç∑
; 1190 :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1191 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1192 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1193 :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Subtru

; 1194 :         {
; 1195 :             // v > 0 ÇÃèÍçá
; 1196 : 
; 1197 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1198 :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1199 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1200 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1201 :         else
; 1202 :         {
; 1203 :             // v < 0 ÇÃèÍçá
; 1204 : 
; 1205 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1206 :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1207 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1208 :         }
; 1209 :     }
; 1210 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1211 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1212 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -60						; size = 4
_u_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_UX_X@12 PROC				; COMDAT

; 1045 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 1046 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 1047 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 1048 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 1049 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 1050 :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 1051 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 1052 :     PMC_STATUS_CODE result;
; 1053 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 1054 :     NUMBER_HEADER* nw;
; 1055 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 1056 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 1057 :     char u_is_zero;
; 1058 :     if ((result = IsZero_UINT(u, &u_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _u_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_IsZero_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1059 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1060 :     if (u_is_zero)

	movsx	eax, BYTE PTR _u_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN7@PMC_Subtru

; 1061 :     {
; 1062 :         // u == 0 ÇÃèÍçá
; 1063 : 
; 1064 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Subtru

; 1065 :         {
; 1066 :             // v == 0 ÇÃèÍçá
; 1067 : 
; 1068 :             // 0 Çï‘Ç∑
; 1069 :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 1070 :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 1071 :         else
; 1072 :         {
; 1073 :             // v != 0 ÇÃèÍçá
; 1074 : 
; 1075 :             // -v Çï‘Ç∑
; 1076 :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Subtru

; 1077 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 1078 :         }
; 1079 :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 1080 :     else
; 1081 :     {
; 1082 :         // u > 0 ÇÃèÍçá
; 1083 : 
; 1084 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 1085 :         {
; 1086 :             // v == 0 ÇÃèÍçá
; 1087 : 
; 1088 :             // u Çï‘Ç∑
; 1089 :             PMC_HANDLE_UINT new_u;
; 1090 :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 1091 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 1092 :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 1093 :             {
; 1094 :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1095 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 1096 :             }
; 1097 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN12@PMC_Subtru:

; 1098 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN16@PMC_Subtru

; 1099 :         {
; 1100 :             // u > 0 ÇÃèÍçá
; 1101 : 
; 1102 :             // u - abs(v) Çï‘Ç∑
; 1103 :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 1104 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 1105 :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN16@PMC_Subtru:

; 1106 :         else
; 1107 :         {
; 1108 :             // u < 0 ÇÃèÍçá
; 1109 : 
; 1110 :             // u + abs(v) ÇåvéZÇ∑ÇÈ
; 1111 :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 1112 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 1113 :         }
; 1114 :     }
; 1115 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1116 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1117 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN25@PMC_Subtru:
	DD	3
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN21@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN22@PMC_Subtru
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN23@PMC_Subtru
$LN23@PMC_Subtru:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN22@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN21@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Subtruct_L_X@16 PROC				; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 951  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 952  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 953  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 954  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 955  :     PMC_STATUS_CODE result;
; 956  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 957  :     NUMBER_HEADER* nw;
; 958  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 959  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 960  :     char u_sign;
; 961  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 962  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 963  :     {
; 964  :         // u == 0 ÇÃèÍçá
; 965  : 
; 966  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 967  :         {
; 968  :             // v == 0 ÇÃèÍçá
; 969  : 
; 970  :             // 0 Çï‘Ç∑
; 971  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 972  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 973  :         else
; 974  :         {
; 975  :             // v != 0 ÇÃèÍçá
; 976  : 
; 977  :             // -v Çï‘Ç∑
; 978  :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 979  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 980  :         }
; 981  :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 982  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 983  :     {
; 984  :         // u > 0 ÇÃèÍçá
; 985  : 
; 986  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 987  :         {
; 988  :             // v == 0 ÇÃèÍçá
; 989  : 
; 990  :             // u Çï‘Ç∑
; 991  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 992  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 993  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 994  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 995  :         {
; 996  :             // v > 0 ÇÃèÍçá
; 997  : 
; 998  :             // abs(u) - abs(v) Çï‘Ç∑
; 999  :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 1000 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 1001 :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 1002 :         else
; 1003 :         {
; 1004 :             // v < 0 ÇÃèÍçá
; 1005 : 
; 1006 :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 1007 :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 1008 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 1009 :         }
; 1010 :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 1011 :     else
; 1012 :     {
; 1013 :         // u < 0 ÇÃèÍçá
; 1014 : 
; 1015 :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 1016 :         {
; 1017 :             // v == 0 ÇÃèÍçá
; 1018 : 
; 1019 :             // u Çï‘Ç∑
; 1020 :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 1021 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 1022 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 1023 :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 1024 :         {
; 1025 :             // v > 0 ÇÃèÍçá
; 1026 : 
; 1027 :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 1028 :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 1029 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 1030 :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 1031 :         else
; 1032 :         {
; 1033 :             // v < 0 ÇÃèÍçá
; 1034 : 
; 1035 :             // - abs(u) + abs(v) Çï‘Ç∑
; 1036 :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 1037 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 1038 :         }
; 1039 :     }
; 1040 :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 1041 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 1042 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Subtruct_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_I_X@12 PROC				; COMDAT

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 856  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 857  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 858  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 859  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 860  :     PMC_STATUS_CODE result;
; 861  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 862  :     NUMBER_HEADER* nw;
; 863  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Subtru

; 864  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 865  :     char u_sign;
; 866  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 867  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Subtru

; 868  :     {
; 869  :         // u == 0 ÇÃèÍçá
; 870  : 
; 871  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Subtru

; 872  :         {
; 873  :             // v == 0 ÇÃèÍçá
; 874  : 
; 875  :             // 0 Çï‘Ç∑
; 876  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 877  :         }

	jmp	SHORT $LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 878  :         else
; 879  :         {
; 880  :             // v != 0 ÇÃèÍçá
; 881  : 
; 882  :             // -v Çï‘Ç∑
; 883  :             if ((result = Negate_Imp(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_Negate_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Subtru

; 884  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN8@PMC_Subtru:

; 885  :         }
; 886  :     }

	jmp	$LN6@PMC_Subtru
$LN5@PMC_Subtru:

; 887  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Subtru

; 888  :     {
; 889  :         // u > 0 ÇÃèÍçá
; 890  : 
; 891  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Subtru

; 892  :         {
; 893  :             // v == 0 ÇÃèÍçá
; 894  : 
; 895  :             // u Çï‘Ç∑
; 896  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 897  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 898  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN12@PMC_Subtru:

; 899  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Subtru

; 900  :         {
; 901  :             // v > 0 ÇÃèÍçá
; 902  : 
; 903  :             // abs(u) - abs(v) Çï‘Ç∑
; 904  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 905  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 906  :         }

	jmp	SHORT $LN13@PMC_Subtru
$LN15@PMC_Subtru:

; 907  :         else
; 908  :         {
; 909  :             // v < 0 ÇÃèÍçá
; 910  : 
; 911  :             // abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 912  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 913  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 914  :         }
; 915  :     }

	jmp	$LN6@PMC_Subtru
$LN10@PMC_Subtru:

; 916  :     else
; 917  :     {
; 918  :         // u < 0 ÇÃèÍçá
; 919  : 
; 920  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Subtru

; 921  :         {
; 922  :             // v == 0 ÇÃèÍçá
; 923  : 
; 924  :             // u Çï‘Ç∑
; 925  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Subtru

; 926  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 927  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN19@PMC_Subtru:

; 928  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Subtru

; 929  :         {
; 930  :             // v > 0 ÇÃèÍçá
; 931  : 
; 932  :             // - abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 933  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Subtru

; 934  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN24@PMC_Subtru:

; 935  :         }

	jmp	SHORT $LN6@PMC_Subtru
$LN22@PMC_Subtru:

; 936  :         else
; 937  :         {
; 938  :             // v < 0 ÇÃèÍçá
; 939  : 
; 940  :             // - abs(u) + abs(v) Çï‘Ç∑
; 941  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 942  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 943  :         }
; 944  :     }
; 945  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 946  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 947  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Subtru:
	DD	2
	DD	$LN29@PMC_Subtru
$LN29@PMC_Subtru:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Subtru
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Subtru
$LN28@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_X@12
_TEXT	SEGMENT
_nw$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_X@12 PROC					; COMDAT

; 757  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 758  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 759  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 760  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 761  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 762  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 763  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 764  :     PMC_STATUS_CODE result;
; 765  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 766  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 767  :     NUMBER_HEADER* nw;
; 768  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 769  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 770  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 771  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 772  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_X_

; 773  :     {
; 774  :         // u == 0 ÇÃèÍçá
; 775  : 
; 776  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN9@PMC_Add_X_

; 777  :         {
; 778  :             // v == 0 ÇÃèÍçá
; 779  : 
; 780  :             // 0 Çï‘Ç∑
; 781  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 782  :         }

	jmp	SHORT $LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 783  :         else
; 784  :         {
; 785  :             // v != 0 ÇÃèÍçá
; 786  : 
; 787  :             // v Çï‘Ç∑
; 788  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 789  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 790  :         }
; 791  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 792  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN12@PMC_Add_X_

; 793  :     {
; 794  :         // u > 0 ÇÃèÍçá
; 795  : 
; 796  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN14@PMC_Add_X_

; 797  :         {
; 798  :             // v == 0 ÇÃèÍçá
; 799  : 
; 800  :             // u Çï‘Ç∑
; 801  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Add_X_

; 802  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN16@PMC_Add_X_:

; 803  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN14@PMC_Add_X_:

; 804  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_Add_X_

; 805  :         {
; 806  :             // v > 0 ÇÃèÍçá
; 807  : 
; 808  :             // abs(u) + abs(v) Çï‘Ç∑
; 809  :             if ((result = AddU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Add_X_

; 810  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN19@PMC_Add_X_:

; 811  :         }

	jmp	SHORT $LN15@PMC_Add_X_
$LN17@PMC_Add_X_:

; 812  :         else
; 813  :         {
; 814  :             // v < 0 ÇÃèÍçá
; 815  : 
; 816  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 817  :             if ((result = SubtructU_X_X_Imp(1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Add_X_

; 818  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN15@PMC_Add_X_:

; 819  :         }
; 820  :     }

	jmp	$LN8@PMC_Add_X_
$LN12@PMC_Add_X_:

; 821  :     else
; 822  :     {
; 823  :         // u < 0 ÇÃèÍçá
; 824  : 
; 825  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN21@PMC_Add_X_

; 826  :         {
; 827  :             // v == 0 ÇÃèÍçá
; 828  : 
; 829  :             // u Çï‘Ç∑
; 830  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Add_X_

; 831  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN23@PMC_Add_X_:

; 832  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN21@PMC_Add_X_:

; 833  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN24@PMC_Add_X_

; 834  :         {
; 835  :             // v > 0 ÇÃèÍçá
; 836  : 
; 837  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 838  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Add_X_

; 839  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN26@PMC_Add_X_:

; 840  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN24@PMC_Add_X_:

; 841  :         else
; 842  :         {
; 843  :             // v < 0 ÇÃèÍçá
; 844  : 
; 845  :             // - abs(u) - abs(v) Çï‘Ç∑
; 846  :             if ((result = AddU_X_X_Imp(-1, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 847  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 848  :         }
; 849  :     }
; 850  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 851  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 852  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN31@PMC_Add_X_:
	DD	1
	DD	$LN30@PMC_Add_X_
$LN30@PMC_Add_X_:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_UX@12
_TEXT	SEGMENT
_type$1 = -72						; size = 4
_new_v$2 = -60						; size = 4
_v_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_UX@12 PROC					; COMDAT

; 665  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 666  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 667  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 668  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 669  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 670  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Add_X_

; 671  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 672  :     PMC_STATUS_CODE result;
; 673  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 674  :     NUMBER_HEADER* nw;
; 675  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_X_

; 676  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 677  :     char v_is_zero;
; 678  :     if ((result = IsZero_UINT(v, &v_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _v_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_IsZero_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 679  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 680  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	$LN7@PMC_Add_X_

; 681  :     {
; 682  :         // u == 0 ÇÃèÍçá
; 683  : 
; 684  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN9@PMC_Add_X_

; 685  :         {
; 686  :             // v == 0 ÇÃèÍçá
; 687  : 
; 688  :             // 0 Çï‘Ç∑
; 689  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 690  :         }

	jmp	$LN10@PMC_Add_X_
$LN9@PMC_Add_X_:

; 691  :         else
; 692  :         {
; 693  :             // v > 0 ÇÃèÍçá
; 694  : 
; 695  :             // v Çï‘Ç∑
; 696  :             PMC_HANDLE_UINT new_v;
; 697  :             if ((result = ep_uint.Clone_X(v, &new_v)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Add_X_

; 698  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 699  :             PMC_NUMBER_TYPE_CODE type;
; 700  :             if ((result = ep_uint.GetNumberType_X(new_v, &type)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _type$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_v$2[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Add_X_

; 701  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN12@PMC_Add_X_:

; 702  :             if ((result = AllocateNumber(&nw, 1, new_v)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Add_X_

; 703  :             {
; 704  :                 ep_uint.Dispose(new_v);

	mov	esi, esp
	mov	eax, DWORD PTR _new_v$2[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 705  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN10@PMC_Add_X_:

; 706  :             }
; 707  :         }
; 708  :     }

	jmp	$LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 709  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN14@PMC_Add_X_

; 710  :     {
; 711  :         // u > 0 ÇÃèÍçá
; 712  : 
; 713  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN16@PMC_Add_X_

; 714  :         {
; 715  :             // v == 0 ÇÃèÍçá
; 716  : 
; 717  :             // u Çï‘Ç∑
; 718  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Add_X_

; 719  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN18@PMC_Add_X_:

; 720  :         }

	jmp	SHORT $LN17@PMC_Add_X_
$LN16@PMC_Add_X_:

; 721  :         else
; 722  :         {
; 723  :             // v > 0 ÇÃèÍçá
; 724  : 
; 725  :             // abs(u) + v Çï‘Ç∑
; 726  :             if ((result = AddU_X_X_Imp(1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 727  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 728  :         }
; 729  :     }

	jmp	SHORT $LN8@PMC_Add_X_
$LN14@PMC_Add_X_:

; 730  :     else
; 731  :     {
; 732  :         // u < 0 ÇÃèÍçá
; 733  : 
; 734  :         if (v_is_zero)

	movsx	eax, BYTE PTR _v_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN20@PMC_Add_X_

; 735  :         {
; 736  :             // v == 0 ÇÃèÍçá
; 737  : 
; 738  :             // u Çï‘Ç∑
; 739  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Add_X_

; 740  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN22@PMC_Add_X_:

; 741  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN20@PMC_Add_X_:

; 742  :         else
; 743  :         {
; 744  :             // v > 0 ÇÃèÍçá
; 745  : 
; 746  :             // - abs(u) + v Çï‘Ç∑
; 747  :             if ((result = SubtructU_X_X_Imp(-1, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 748  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 749  :         }
; 750  : 
; 751  :     }
; 752  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 753  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 754  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN30@PMC_Add_X_:
	DD	4
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN26@PMC_Add_X_
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN26@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN25@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_L@16
_TEXT	SEGMENT
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Add_X_L@16 PROC					; COMDAT

; 570  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 571  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 572  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 573  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 574  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 575  :     PMC_STATUS_CODE result;
; 576  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 577  :     NUMBER_HEADER* nw;
; 578  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 579  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 580  :     char v_sign;
; 581  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 582  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 583  :     {
; 584  :         // u == 0 ÇÃèÍçá
; 585  : 
; 586  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 587  :         {
; 588  :             // v == 0 ÇÃèÍçá
; 589  : 
; 590  :             // 0 Çï‘Ç∑
; 591  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 592  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 593  :         else
; 594  :         {
; 595  :             // v != 0 ÇÃèÍçá
; 596  : 
; 597  :             // v Çï‘Ç∑
; 598  :             if ((result = From_L_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _v_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 599  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 600  :         }
; 601  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 602  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN10@PMC_Add_X_

; 603  :     {
; 604  :         // u > 0 ÇÃèÍçá
; 605  : 
; 606  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Add_X_

; 607  :         {
; 608  :             // v == 0 ÇÃèÍçá
; 609  : 
; 610  :             // u Çï‘Ç∑
; 611  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 612  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 613  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 614  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Add_X_

; 615  :         {
; 616  :             // v > 0 ÇÃèÍçá
; 617  : 
; 618  :             // abs(u) + abs(v) Çï‘Ç∑
; 619  :             if ((result = AddU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 620  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 621  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN15@PMC_Add_X_:

; 622  :         else
; 623  :         {
; 624  :             // v < 0 ÇÃèÍçá
; 625  : 
; 626  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 627  :             if ((result = SubtructU_X_L_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_X_

; 628  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN13@PMC_Add_X_:

; 629  :         }
; 630  :     }

	jmp	$LN6@PMC_Add_X_
$LN10@PMC_Add_X_:

; 631  :     else
; 632  :     {
; 633  :         // u < 0 ÇÃèÍçá
; 634  : 
; 635  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Add_X_

; 636  :         {
; 637  :             // v == 0 ÇÃèÍçá
; 638  : 
; 639  :             // u Çï‘Ç∑
; 640  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_X_

; 641  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 642  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN19@PMC_Add_X_:

; 643  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Add_X_

; 644  :         {
; 645  :             // v > 0 ÇÃèÍçá
; 646  : 
; 647  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 648  :             if ((result = SubtructU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 649  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 650  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 651  :         else
; 652  :         {
; 653  :             // v < 0 ÇÃèÍçá
; 654  : 
; 655  :             // - abs(u) - abs(v) Çï‘Ç∑
; 656  :             if ((result = AddU_X_L_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 657  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 658  :         }
; 659  :     }
; 660  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 661  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 662  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN30@PMC_Add_X_:
	DD	2
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_X_I@12
_TEXT	SEGMENT
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_X_I@12 PROC					; COMDAT

; 475  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 476  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Add_X_

; 477  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 478  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_X_

; 479  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_X_
$LN3@PMC_Add_X_:

; 480  :     PMC_STATUS_CODE result;
; 481  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 482  :     NUMBER_HEADER* nw;
; 483  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_X_

; 484  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN4@PMC_Add_X_:

; 485  :     char v_sign;
; 486  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 487  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_Add_X_

; 488  :     {
; 489  :         // u == 0 ÇÃèÍçá
; 490  : 
; 491  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN7@PMC_Add_X_

; 492  :         {
; 493  :             // v == 0 ÇÃèÍçá
; 494  : 
; 495  :             // 0 Çï‘Ç∑
; 496  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 497  :         }

	jmp	SHORT $LN8@PMC_Add_X_
$LN7@PMC_Add_X_:

; 498  :         else
; 499  :         {
; 500  :             // v != 0 ÇÃèÍçá
; 501  : 
; 502  :             // v Çï‘Ç∑
; 503  :             if ((result = From_I_Imp(v_sign, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _v_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_X_

; 504  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 505  :         }
; 506  :     }

	jmp	$LN6@PMC_Add_X_
$LN5@PMC_Add_X_:

; 507  :     else if (nu->SIGN > 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	$LN10@PMC_Add_X_

; 508  :     {
; 509  :         // u > 0 ÇÃèÍçá
; 510  : 
; 511  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Add_X_

; 512  :         {
; 513  :             // v == 0 ÇÃèÍçá
; 514  : 
; 515  :             // u Çï‘Ç∑
; 516  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_X_

; 517  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN14@PMC_Add_X_:

; 518  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN12@PMC_Add_X_:

; 519  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN15@PMC_Add_X_

; 520  :         {
; 521  :             // v > 0 ÇÃèÍçá
; 522  : 
; 523  :             // abs(u) + abs(v) Çï‘Ç∑
; 524  :             if ((result = AddU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_X_

; 525  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN17@PMC_Add_X_:

; 526  :         }

	jmp	SHORT $LN13@PMC_Add_X_
$LN15@PMC_Add_X_:

; 527  :         else
; 528  :         {
; 529  :             // v < 0 ÇÃèÍçá
; 530  : 
; 531  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 532  :             if ((result = SubtructU_X_I_Imp(1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_X_

; 533  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_X_
$LN13@PMC_Add_X_:

; 534  :         }
; 535  :     }

	jmp	$LN6@PMC_Add_X_
$LN10@PMC_Add_X_:

; 536  :     else
; 537  :     {
; 538  :         // u < 0 ÇÃèÍçá
; 539  : 
; 540  :         if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN19@PMC_Add_X_

; 541  :         {
; 542  :             // v == 0 ÇÃèÍçá
; 543  : 
; 544  :             // u Çï‘Ç∑
; 545  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_X_

; 546  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN21@PMC_Add_X_:

; 547  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN19@PMC_Add_X_:

; 548  :         else if (v_sign > 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN22@PMC_Add_X_

; 549  :         {
; 550  :             // v > 0 ÇÃèÍçá
; 551  : 
; 552  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 553  :             if ((result = SubtructU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_X_

; 554  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN24@PMC_Add_X_:

; 555  :         }

	jmp	SHORT $LN6@PMC_Add_X_
$LN22@PMC_Add_X_:

; 556  :         else
; 557  :         {
; 558  :             // v < 0 ÇÃèÍçá
; 559  : 
; 560  :             // - abs(u) - abs(v) Çï‘Ç∑
; 561  :             if ((result = AddU_X_I_Imp(-1, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_X_

; 562  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 563  :         }
; 564  :     }
; 565  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 566  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_X_:

; 567  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_X_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN30@PMC_Add_X_:
	DD	2
	DD	$LN29@PMC_Add_X_
$LN29@PMC_Add_X_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_X_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_X_
$LN28@PMC_Add_X_:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_X_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_UX_X@12
_TEXT	SEGMENT
_new_u$1 = -60						; size = 4
_u_is_zero$ = -45					; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_UX_X@12 PROC					; COMDAT

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 403  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_UX

; 404  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN2@PMC_Add_UX:

; 405  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_UX

; 406  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_UX
$LN3@PMC_Add_UX:

; 407  :     PMC_STATUS_CODE result;
; 408  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 409  :     NUMBER_HEADER* nw;
; 410  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_UX

; 411  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN4@PMC_Add_UX:

; 412  :     char u_is_zero;
; 413  :     if ((result = IsZero_UINT(u, &u_is_zero)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _u_is_zero$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_IsZero_UINT
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Add_UX

; 414  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN5@PMC_Add_UX:

; 415  :     if (u_is_zero)

	movsx	eax, BYTE PTR _u_is_zero$[ebp]
	test	eax, eax
	je	SHORT $LN6@PMC_Add_UX

; 416  :     {
; 417  :         // u == 0 ÇÃèÍçá
; 418  : 
; 419  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_Add_UX

; 420  :         {
; 421  :             // v == 0 ÇÃèÍçá
; 422  : 
; 423  :             // 0 Çï‘Ç∑
; 424  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 425  :         }

	jmp	SHORT $LN9@PMC_Add_UX
$LN8@PMC_Add_UX:

; 426  :         else
; 427  :         {
; 428  :             // v != 0 ÇÃèÍçá
; 429  : 
; 430  :             // v Çï‘Ç∑
; 431  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Add_UX

; 432  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN9@PMC_Add_UX:

; 433  :         }
; 434  :     }

	jmp	$LN7@PMC_Add_UX
$LN6@PMC_Add_UX:

; 435  :     else
; 436  :     {
; 437  :         // u > 0 ÇÃèÍçá
; 438  : 
; 439  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN11@PMC_Add_UX

; 440  :         {
; 441  :             // v == 0 ÇÃèÍçá
; 442  : 
; 443  :             // u Çï‘Ç∑
; 444  :             PMC_HANDLE_UINT new_u;
; 445  :             if ((result = ep_uint.Clone_X(u, &new_u)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_UX

; 446  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_UX
$LN13@PMC_Add_UX:

; 447  :             if ((result = AllocateNumber(&nw, 1, new_u)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_UX

; 448  :             {
; 449  :                 ep_uint.Dispose(new_u);

	mov	esi, esp
	mov	eax, DWORD PTR _new_u$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 450  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN14@PMC_Add_UX:

; 451  :             }
; 452  :         }

	jmp	SHORT $LN7@PMC_Add_UX
$LN11@PMC_Add_UX:

; 453  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_UX

; 454  :         {
; 455  :             // v > 0 ÇÃèÍçá
; 456  : 
; 457  :             // u + abs(v) Çï‘Ç∑
; 458  :             if ((result = AddU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_AddU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_UX

; 459  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN17@PMC_Add_UX:

; 460  :         }

	jmp	SHORT $LN7@PMC_Add_UX
$LN15@PMC_Add_UX:

; 461  :         else
; 462  :         {
; 463  :             // v < 0 ÇÃèÍçá
; 464  : 
; 465  :             // u - abs(v) ÇåvéZÇ∑ÇÈ
; 466  :             if ((result = SubtructU_X_X_Imp(1, u, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	call	_SubtructU_X_X_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Add_UX

; 467  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_UX
$LN7@PMC_Add_UX:

; 468  :         }
; 469  :     }
; 470  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 471  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_UX:

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@PMC_Add_UX
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN24@PMC_Add_UX:
	DD	3
	DD	$LN23@PMC_Add_UX
$LN23@PMC_Add_UX:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@PMC_Add_UX
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN21@PMC_Add_UX
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN22@PMC_Add_UX
$LN22@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	0
$LN21@PMC_Add_UX:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	0
$LN20@PMC_Add_UX:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_L_X@16
_TEXT	SEGMENT
_u_abs$ = -64						; size = 8
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Add_L_X@16 PROC					; COMDAT

; 307  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 308  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_L_

; 309  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN2@PMC_Add_L_:

; 310  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_L_

; 311  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_L_
$LN3@PMC_Add_L_:

; 312  :     PMC_STATUS_CODE result;
; 313  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 314  :     NUMBER_HEADER* nw;
; 315  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_L_

; 316  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN4@PMC_Add_L_:

; 317  :     char u_sign;
; 318  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 319  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_L_

; 320  :     {
; 321  :         // u == 0 ÇÃèÍçá
; 322  : 
; 323  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_L_

; 324  :         {
; 325  :             // v == 0 ÇÃèÍçá
; 326  : 
; 327  :             // 0 Çï‘Ç∑
; 328  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 329  :         }

	jmp	SHORT $LN8@PMC_Add_L_
$LN7@PMC_Add_L_:

; 330  :         else
; 331  :         {
; 332  :             // v != 0 ÇÃèÍçá
; 333  : 
; 334  :             // v Çï‘Ç∑
; 335  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_L_

; 336  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN8@PMC_Add_L_:

; 337  :         }
; 338  :     }

	jmp	$LN6@PMC_Add_L_
$LN5@PMC_Add_L_:

; 339  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_L_

; 340  :     {
; 341  :         // u > 0 ÇÃèÍçá
; 342  : 
; 343  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_L_

; 344  :         {
; 345  :             // v == 0 ÇÃèÍçá
; 346  : 
; 347  :             // u Çï‘Ç∑
; 348  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_L_

; 349  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN14@PMC_Add_L_:

; 350  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN12@PMC_Add_L_:

; 351  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_L_

; 352  :         {
; 353  :             // v > 0 ÇÃèÍçá
; 354  : 
; 355  :             // abs(u) + abs(v) Çï‘Ç∑
; 356  :             if ((result = AddU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_L_

; 357  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN17@PMC_Add_L_:

; 358  :         }

	jmp	SHORT $LN13@PMC_Add_L_
$LN15@PMC_Add_L_:

; 359  :         else
; 360  :         {
; 361  :             // v < 0 ÇÃèÍçá
; 362  : 
; 363  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 364  :             if ((result = SubtructU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_L_

; 365  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_L_
$LN13@PMC_Add_L_:

; 366  :         }
; 367  :     }

	jmp	$LN6@PMC_Add_L_
$LN10@PMC_Add_L_:

; 368  :     else
; 369  :     {
; 370  :         // u < 0 ÇÃèÍçá
; 371  : 
; 372  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_L_

; 373  :         {
; 374  :             // v == 0 ÇÃèÍçá
; 375  : 
; 376  :             // u Çï‘Ç∑
; 377  :             if ((result = From_L_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	movzx	eax, BYTE PTR _u_sign$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_L_

; 378  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN21@PMC_Add_L_:

; 379  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN19@PMC_Add_L_:

; 380  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_L_

; 381  :         {
; 382  :             // v > 0 ÇÃèÍçá
; 383  : 
; 384  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 385  :             if ((result = SubtructU_X_L_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	1
	call	_SubtructU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_L_

; 386  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN24@PMC_Add_L_:

; 387  :         }

	jmp	SHORT $LN6@PMC_Add_L_
$LN22@PMC_Add_L_:

; 388  :         else
; 389  :         {
; 390  :             // v < 0 ÇÃèÍçá
; 391  : 
; 392  :             // - abs(u) - abs(v) Çï‘Ç∑
; 393  :             if ((result = AddU_X_L_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	-1
	call	_AddU_X_L_Imp
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_L_

; 394  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_L_
$LN6@PMC_Add_L_:

; 395  :         }
; 396  :     }
; 397  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 398  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_L_:

; 399  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_L_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN30@PMC_Add_L_:
	DD	2
	DD	$LN29@PMC_Add_L_
$LN29@PMC_Add_L_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_L_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_L_
$LN28@PMC_Add_L_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_L_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_add_sub.c
;	COMDAT _PMC_Add_I_X@12
_TEXT	SEGMENT
_u_abs$ = -60						; size = 4
_u_sign$ = -45						; size = 1
_nw$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Add_I_X@12 PROC					; COMDAT

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __5A8189A9_pmc_add_sub@c
	call	@__CheckForDebuggerJustMyCode@4

; 213  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Add_I_

; 214  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN2@PMC_Add_I_:

; 215  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Add_I_

; 216  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Add_I_
$LN3@PMC_Add_I_:

; 217  :     PMC_STATUS_CODE result;
; 218  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 219  :     NUMBER_HEADER* nw;
; 220  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Add_I_

; 221  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN4@PMC_Add_I_:

; 222  :     char u_sign;
; 223  :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 224  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Add_I_

; 225  :     {
; 226  :         // u == 0 ÇÃèÍçá
; 227  : 
; 228  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_Add_I_

; 229  :         {
; 230  :             // v == 0 ÇÃèÍçá
; 231  : 
; 232  :             // 0 Çï‘Ç∑
; 233  :             nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero

; 234  :         }

	jmp	SHORT $LN8@PMC_Add_I_
$LN7@PMC_Add_I_:

; 235  :         else
; 236  :         {
; 237  :             // v != 0 ÇÃèÍçá
; 238  : 
; 239  :             // v Çï‘Ç∑
; 240  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_Add_I_

; 241  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN8@PMC_Add_I_:

; 242  :         }
; 243  :     }

	jmp	$LN6@PMC_Add_I_
$LN5@PMC_Add_I_:

; 244  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	$LN10@PMC_Add_I_

; 245  :     {
; 246  :         // u > 0 ÇÃèÍçá
; 247  : 
; 248  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@PMC_Add_I_

; 249  :         {
; 250  :             // v == 0 ÇÃèÍçá
; 251  : 
; 252  :             // u Çï‘Ç∑
; 253  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Add_I_

; 254  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN14@PMC_Add_I_:

; 255  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN12@PMC_Add_I_:

; 256  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN15@PMC_Add_I_

; 257  :         {
; 258  :             // v > 0 ÇÃèÍçá
; 259  : 
; 260  :             // abs(u) + abs(v) Çï‘Ç∑
; 261  :             if ((result = AddU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Add_I_

; 262  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN17@PMC_Add_I_:

; 263  :         }

	jmp	SHORT $LN13@PMC_Add_I_
$LN15@PMC_Add_I_:

; 264  :         else
; 265  :         {
; 266  :             // v < 0 ÇÃèÍçá
; 267  : 
; 268  :             // abs(u) - abs(v) ÇåvéZÇ∑ÇÈ
; 269  :             if ((result = SubtructU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Add_I_

; 270  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Add_I_
$LN13@PMC_Add_I_:

; 271  :         }
; 272  :     }

	jmp	$LN6@PMC_Add_I_
$LN10@PMC_Add_I_:

; 273  :     else
; 274  :     {
; 275  :         // u < 0 ÇÃèÍçá
; 276  : 
; 277  :         if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN19@PMC_Add_I_

; 278  :         {
; 279  :             // v == 0 ÇÃèÍçá
; 280  : 
; 281  :             // u Çï‘Ç∑
; 282  :             if ((result = From_I_Imp(u_sign, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _u_sign$[ebp]
	push	edx
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Add_I_

; 283  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN21@PMC_Add_I_:

; 284  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN19@PMC_Add_I_:

; 285  :         else if (nv->SIGN > 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jle	SHORT $LN22@PMC_Add_I_

; 286  :         {
; 287  :             // v > 0 ÇÃèÍçá
; 288  : 
; 289  :             // - abs(u) + abs(v) ÇåvéZÇ∑ÇÈ
; 290  :             if ((result = SubtructU_X_I_Imp(1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	1
	call	_SubtructU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Add_I_

; 291  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN24@PMC_Add_I_:

; 292  :         }

	jmp	SHORT $LN6@PMC_Add_I_
$LN22@PMC_Add_I_:

; 293  :         else
; 294  :         {
; 295  :             // v < 0 ÇÃèÍçá
; 296  : 
; 297  :             // - abs(u) - abs(v) Çï‘Ç∑
; 298  :             if ((result = AddU_X_I_Imp(-1, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	-1
	call	_AddU_X_I_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Add_I_

; 299  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Add_I_
$LN6@PMC_Add_I_:

; 300  :         }
; 301  :     }
; 302  :     *w = (PMC_HANDLE_SINT)nw;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [eax], ecx

; 303  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Add_I_:

; 304  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@PMC_Add_I_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN30@PMC_Add_I_:
	DD	2
	DD	$LN29@PMC_Add_I_
$LN29@PMC_Add_I_:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_Add_I_
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN28@PMC_Add_I_
$LN28@PMC_Add_I_:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN27@PMC_Add_I_:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Add_I_X@12 ENDP
_TEXT	ENDS
END
