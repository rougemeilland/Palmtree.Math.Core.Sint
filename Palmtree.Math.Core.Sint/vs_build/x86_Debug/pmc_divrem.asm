; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_divrem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E9C852B3_pmc_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_DivRem_I_X@16
PUBLIC	_PMC_DivRem_L_X@20
PUBLIC	_PMC_DivRem_UX_X@16
PUBLIC	_PMC_DivRem_X_I@16
PUBLIC	_PMC_DivRem_X_L@20
PUBLIC	_PMC_DivRem_X_UX@16
PUBLIC	_PMC_DivRem_X_X@16
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_X@16
_TEXT	SEGMENT
tv175 = -332						; size = 4
tv152 = -332						; size = 4
tv139 = -332						; size = 4
tv90 = -332						; size = 4
tv80 = -332						; size = 4
_r_abs$1 = -132						; size = 4
_r_sign$2 = -117					; size = 1
_r_abs$3 = -108						; size = 4
_q_abs$4 = -96						; size = 4
_r_sign$5 = -81						; size = 1
_q_sign$6 = -69						; size = 1
_nr$ = -60						; size = 4
_nq$ = -48						; size = 4
_nv$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_X@16 PROC					; COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 419  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 420  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 421  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 422  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 423  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 424  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 425  :     PMC_STATUS_CODE result;
; 426  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 427  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 428  :     NUMBER_HEADER* nq;
; 429  :     NUMBER_HEADER* nr;
; 430  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_DivRem

; 431  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 432  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 433  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 434  :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN7@PMC_DivRem

; 435  :     {
; 436  :         // v == 0 ÇÃèÍçá
; 437  : 
; 438  :         // ÉGÉâÅ[Çï‘Ç∑
; 439  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 440  :     }
; 441  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN8@PMC_DivRem

; 442  :     {
; 443  :         // u == 0 ÇÃèÍçá
; 444  : 
; 445  :         nq = q != NULL ? nq = &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN19@PMC_DivRem
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:
	mov	DWORD PTR tv80[ebp], 0
$LN20@PMC_DivRem:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _nq$[ebp], ecx

; 446  :         nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 447  :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 448  :     else
; 449  :     {
; 450  :         // u != 0 ÇÃèÍçá
; 451  : 
; 452  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN10@PMC_DivRem

; 453  :         {
; 454  :             char q_sign = nu->SIGN > 0 ? nv->SIGN : -nv->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN21@PMC_DivRem
	mov	edx, DWORD PTR _nv$[ebp]
	movsx	eax, BYTE PTR [edx+16]
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:
	mov	ecx, DWORD PTR _nv$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	neg	edx
	mov	DWORD PTR tv90[ebp], edx
$LN22@PMC_DivRem:
	mov	al, BYTE PTR tv90[ebp]
	mov	BYTE PTR _q_sign$6[ebp], al

; 455  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$5[ebp], cl

; 456  :             PMC_HANDLE_UINT q_abs;
; 457  :             PMC_HANDLE_UINT r_abs;
; 458  :             if ((result = ep_uint.DivRem_X_X(nu->ABS, nv->ABS, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 459  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 460  :             if ((result = AllocateNumber(&nq, q_abs->FLAGS.IS_ZERO ? 0 : q_sign, q_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$4[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN23@PMC_DivRem
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:
	movsx	edx, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv139[ebp], edx
$LN24@PMC_DivRem:
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv139[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 461  :             {
; 462  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 463  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 464  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 465  :             }
; 466  :             if ((result = AllocateNumber(&nr, r_abs->FLAGS.IS_ZERO ? 0 : r_sign, r_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$3[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN25@PMC_DivRem
	mov	DWORD PTR tv152[ebp], 0
	jmp	SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:
	movsx	edx, BYTE PTR _r_sign$5[ebp]
	mov	DWORD PTR tv152[ebp], edx
$LN26@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv152[ebp]
	push	ecx
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_DivRem

; 467  :             {
; 468  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 469  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 470  :                 DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 471  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 472  :             }
; 473  :         }

	jmp	$LN9@PMC_DivRem
$LN10@PMC_DivRem:

; 474  :         else
; 475  :         {
; 476  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$2[ebp], cl

; 477  :             PMC_HANDLE_UINT r_abs;
; 478  :             if ((result = ep_uint.DivRem_X_X(nu->ABS, nv->ABS, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_DivRem

; 479  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN15@PMC_DivRem:

; 480  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 481  :             if ((result = AllocateNumber(&nr, r_abs->FLAGS.IS_ZERO ? 0 : r_sign, r_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$1[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN27@PMC_DivRem
	mov	DWORD PTR tv175[ebp], 0
	jmp	SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:
	movsx	edx, BYTE PTR _r_sign$2[ebp]
	mov	DWORD PTR tv175[ebp], edx
$LN28@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv175[ebp]
	push	ecx
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_DivRem

; 482  :             {
; 483  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 484  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN9@PMC_DivRem:

; 485  :             }
; 486  :         }
; 487  :     }
; 488  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN17@PMC_DivRem

; 489  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN17@PMC_DivRem:

; 490  :     *r = (PMC_HANDLE_SINT)nr;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [eax], ecx

; 491  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN35@PMC_DivRem:
	DD	5
	DD	$LN34@PMC_DivRem
$LN34@PMC_DivRem:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN29@PMC_DivRem
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN30@PMC_DivRem
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN31@PMC_DivRem
	DD	-108					; ffffff94H
	DD	4
	DD	$LN32@PMC_DivRem
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN33@PMC_DivRem
$LN33@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN32@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN31@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN30@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN29@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_UX@16
_TEXT	SEGMENT
tv161 = -320						; size = 4
tv139 = -320						; size = 4
tv94 = -320						; size = 4
tv77 = -320						; size = 4
_r_abs$1 = -120						; size = 4
_r_sign$2 = -105					; size = 1
_r_abs$3 = -96						; size = 4
_q_abs$4 = -84						; size = 4
_r_sign$5 = -69						; size = 1
_q_sign$6 = -57						; size = 1
_nr$ = -48						; size = 4
_nq$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_UX@16 PROC				; COMDAT

; 344  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 345  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 346  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 347  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 348  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 349  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 350  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 351  :     PMC_STATUS_CODE result;
; 352  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 353  :     NUMBER_HEADER* nq;
; 354  :     NUMBER_HEADER* nr;
; 355  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_DivRem

; 356  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 357  :     if (v->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN6@PMC_DivRem

; 358  :     {
; 359  :         // v == 0 ÇÃèÍçá
; 360  : 
; 361  :         // ÉGÉâÅ[Çï‘Ç∑
; 362  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 363  :     }
; 364  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN7@PMC_DivRem

; 365  :     {
; 366  :         // u == 0 ÇÃèÍçá
; 367  : 
; 368  :         nq = q != NULL ? nq = &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN18@PMC_DivRem
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:
	mov	DWORD PTR tv77[ebp], 0
$LN19@PMC_DivRem:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _nq$[ebp], ecx

; 369  :         nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 370  :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 371  :     else
; 372  :     {
; 373  :         // u != 0 ÇÃèÍçá
; 374  : 
; 375  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN9@PMC_DivRem

; 376  :         {
; 377  :             char q_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _q_sign$6[ebp], cl

; 378  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$5[ebp], cl

; 379  :             PMC_HANDLE_UINT q_abs;
; 380  :             PMC_HANDLE_UINT r_abs;
; 381  :             if ((result = ep_uint.DivRem_X_X(nu->ABS, v, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 382  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 383  :             if ((result = AllocateNumber(&nq, q_abs->FLAGS.IS_ZERO ? 0 : q_sign, q_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$4[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN20@PMC_DivRem
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN21@PMC_DivRem
$LN20@PMC_DivRem:
	movsx	edx, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv94[ebp], edx
$LN21@PMC_DivRem:
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv94[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 384  :             {
; 385  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 386  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 387  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 388  :             }
; 389  :             if ((result = AllocateNumber(&nr, r_abs->FLAGS.IS_ZERO ? 0 : r_sign, r_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$3[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN22@PMC_DivRem
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN23@PMC_DivRem
$LN22@PMC_DivRem:
	movsx	edx, BYTE PTR _r_sign$5[ebp]
	mov	DWORD PTR tv139[ebp], edx
$LN23@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv139[ebp]
	push	ecx
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 390  :             {
; 391  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 392  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 393  :                 DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 394  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 395  :             }
; 396  :         }

	jmp	$LN8@PMC_DivRem
$LN9@PMC_DivRem:

; 397  :         else
; 398  :         {
; 399  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$2[ebp], cl

; 400  :             PMC_HANDLE_UINT r_abs;
; 401  :             if ((result = ep_uint.DivRem_X_X(nu->ABS, v, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_DivRem

; 402  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 403  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 404  :             if ((result = AllocateNumber(&nr, r_abs->FLAGS.IS_ZERO ? 0 : r_sign, r_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$1[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN24@PMC_DivRem
	mov	DWORD PTR tv161[ebp], 0
	jmp	SHORT $LN25@PMC_DivRem
$LN24@PMC_DivRem:
	movsx	edx, BYTE PTR _r_sign$2[ebp]
	mov	DWORD PTR tv161[ebp], edx
$LN25@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv161[ebp]
	push	ecx
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_DivRem

; 405  :             {
; 406  :                 ep_uint.Dispose(r_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 407  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 408  :             }
; 409  :         }
; 410  :     }
; 411  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN16@PMC_DivRem

; 412  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN16@PMC_DivRem:

; 413  :     *r = (PMC_HANDLE_SINT)nr;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [eax], ecx

; 414  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 415  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN32@PMC_DivRem:
	DD	5
	DD	$LN31@PMC_DivRem
$LN31@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN26@PMC_DivRem
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN27@PMC_DivRem
	DD	-84					; ffffffacH
	DD	4
	DD	$LN28@PMC_DivRem
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN29@PMC_DivRem
	DD	-120					; ffffff88H
	DD	4
	DD	$LN30@PMC_DivRem
$LN30@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN29@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN28@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN27@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN26@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_UX@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_L@20
_TEXT	SEGMENT
tv155 = -348						; size = 8
tv143 = -348						; size = 8
tv134 = -344						; size = 4
tv86 = -344						; size = 4
tv78 = -344						; size = 4
_r_abs$1 = -144						; size = 8
_r_sign$2 = -125					; size = 1
_r_abs$3 = -116						; size = 8
_q_abs$4 = -100						; size = 4
_r_sign$5 = -85						; size = 1
_q_sign$6 = -73						; size = 1
_v_abs$ = -64						; size = 8
_v_sign$ = -45						; size = 1
_nq$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_X_L@20 PROC					; COMDAT

; 283  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 284  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 285  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 286  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 287  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 288  :     PMC_STATUS_CODE result;
; 289  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 290  :     NUMBER_HEADER* nq;
; 291  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_DivRem

; 292  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 293  :     char v_sign;
; 294  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 295  :     if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_DivRem

; 296  :     {
; 297  :         // v == 0 ÇÃèÍçá
; 298  : 
; 299  :         // ÉGÉâÅ[Çï‘Ç∑
; 300  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 301  :     }
; 302  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_DivRem

; 303  :     {
; 304  :         // u == 0 ÇÃèÍçá
; 305  : 
; 306  :         nq = q != NULL ? nq = &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN15@PMC_DivRem
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:
	mov	DWORD PTR tv78[ebp], 0
$LN16@PMC_DivRem:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _nq$[ebp], ecx

; 307  :         *r = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 308  :     }

	jmp	$LN7@PMC_DivRem
$LN6@PMC_DivRem:

; 309  :     else
; 310  :     {
; 311  :         // u != 0 ÇÃèÍçá
; 312  : 
; 313  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN8@PMC_DivRem

; 314  :         {
; 315  :             char q_sign = nu->SIGN > 0 ? v_sign : -v_sign;

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_DivRem
	movsx	edx, BYTE PTR _v_sign$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	mov	DWORD PTR tv86[ebp], eax
$LN18@PMC_DivRem:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _q_sign$6[ebp], cl

; 316  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$5[ebp], cl

; 317  :             PMC_HANDLE_UINT q_abs;
; 318  :             _UINT64_T r_abs;
; 319  :             if ((result = ep_uint.DivRem_X_L(nu->ABS, v_abs, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+128
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_DivRem

; 320  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:

; 321  :             if ((result = AllocateNumber(&nq, q_abs->FLAGS.IS_ZERO ? 0 : q_sign, q_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$4[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN19@PMC_DivRem
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:
	movsx	edx, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN20@PMC_DivRem:
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv134[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 322  :             {
; 323  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 324  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 325  :             }
; 326  :             *r = r_sign > 0 ? (_INT64_T)r_abs : -(_INT64_T)r_abs;

	movsx	eax, BYTE PTR _r_sign$5[ebp]
	test	eax, eax
	jle	SHORT $LN21@PMC_DivRem
	mov	ecx, DWORD PTR _r_abs$3[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	mov	edx, DWORD PTR _r_abs$3[ebp+4]
	mov	DWORD PTR tv143[ebp+4], edx
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$3[ebp]
	neg	eax
	mov	ecx, DWORD PTR _r_abs$3[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv143[ebp], eax
	mov	DWORD PTR tv143[ebp+4], ecx
$LN22@PMC_DivRem:
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv143[ebp+4]
	mov	DWORD PTR [edx+4], ecx

; 327  :         }

	jmp	$LN7@PMC_DivRem
$LN8@PMC_DivRem:

; 328  :         else
; 329  :         {
; 330  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$2[ebp], cl

; 331  :             _UINT64_T r_abs;
; 332  :             if ((result = ep_uint.DivRem_X_L(nu->ABS, v_abs, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+128
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 333  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 334  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 335  :             *r = r_sign > 0 ? (_INT64_T)r_abs : -(_INT64_T)r_abs;

	movsx	eax, BYTE PTR _r_sign$2[ebp]
	test	eax, eax
	jle	SHORT $LN23@PMC_DivRem
	mov	ecx, DWORD PTR _r_abs$1[ebp]
	mov	DWORD PTR tv155[ebp], ecx
	mov	edx, DWORD PTR _r_abs$1[ebp+4]
	mov	DWORD PTR tv155[ebp+4], edx
	jmp	SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:
	mov	eax, DWORD PTR _r_abs$1[ebp]
	neg	eax
	mov	ecx, DWORD PTR _r_abs$1[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv155[ebp], eax
	mov	DWORD PTR tv155[ebp+4], ecx
$LN24@PMC_DivRem:
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR tv155[ebp+4]
	mov	DWORD PTR [edx+4], ecx
$LN7@PMC_DivRem:

; 336  :         }
; 337  :     }
; 338  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 339  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN13@PMC_DivRem:

; 340  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 341  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN31@PMC_DivRem:
	DD	5
	DD	$LN30@PMC_DivRem
$LN30@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@PMC_DivRem
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN26@PMC_DivRem
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN27@PMC_DivRem
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN28@PMC_DivRem
	DD	-144					; ffffff70H
	DD	8
	DD	$LN29@PMC_DivRem
$LN29@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN28@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN27@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN26@PMC_DivRem:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN25@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_L@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_X_I@16
_TEXT	SEGMENT
tv155 = -332						; size = 4
tv143 = -332						; size = 4
tv134 = -332						; size = 4
tv86 = -332						; size = 4
tv78 = -332						; size = 4
_r_abs$1 = -132						; size = 4
_r_sign$2 = -117					; size = 1
_r_abs$3 = -108						; size = 4
_q_abs$4 = -96						; size = 4
_r_sign$5 = -81						; size = 1
_q_sign$6 = -69						; size = 1
_v_abs$ = -60						; size = 4
_v_sign$ = -45						; size = 1
_nq$ = -36						; size = 4
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_I@16 PROC					; COMDAT

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 223  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 224  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 225  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 226  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 227  :     PMC_STATUS_CODE result;
; 228  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 229  :     NUMBER_HEADER* nq;
; 230  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_DivRem

; 231  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 232  :     char v_sign;
; 233  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 234  :     if (v_sign == 0)

	movsx	eax, BYTE PTR _v_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN5@PMC_DivRem

; 235  :     {
; 236  :         // v == 0 ÇÃèÍçá
; 237  : 
; 238  :         // ÉGÉâÅ[Çï‘Ç∑
; 239  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 240  :     }
; 241  :     if (nu->SIGN == 0)

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_DivRem

; 242  :     {
; 243  :         // u == 0 ÇÃèÍçá
; 244  : 
; 245  :         nq = q != NULL ? nq = &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN15@PMC_DivRem
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:
	mov	DWORD PTR tv78[ebp], 0
$LN16@PMC_DivRem:
	mov	ecx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _nq$[ebp], ecx

; 246  :         *r = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0

; 247  :     }

	jmp	$LN7@PMC_DivRem
$LN6@PMC_DivRem:

; 248  :     else
; 249  :     {
; 250  :         // u != 0 ÇÃèÍçá
; 251  : 
; 252  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN8@PMC_DivRem

; 253  :         {
; 254  :             char q_sign = nu->SIGN > 0 ? v_sign : -v_sign;

	mov	eax, DWORD PTR _nu$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jle	SHORT $LN17@PMC_DivRem
	movsx	edx, BYTE PTR _v_sign$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:
	movsx	eax, BYTE PTR _v_sign$[ebp]
	neg	eax
	mov	DWORD PTR tv86[ebp], eax
$LN18@PMC_DivRem:
	mov	cl, BYTE PTR tv86[ebp]
	mov	BYTE PTR _q_sign$6[ebp], cl

; 255  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$5[ebp], cl

; 256  :             PMC_HANDLE_UINT q_abs;
; 257  :             _UINT32_T r_abs;
; 258  :             if ((result = ep_uint.DivRem_X_I(nu->ABS, v_abs, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+124
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_DivRem

; 259  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:

; 260  :             if ((result = AllocateNumber(&nq, q_abs->FLAGS.IS_ZERO ? 0 : q_sign, q_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$4[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN19@PMC_DivRem
	mov	DWORD PTR tv134[ebp], 0
	jmp	SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:
	movsx	edx, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN20@PMC_DivRem:
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv134[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 261  :             {
; 262  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$4[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 263  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 264  :             }
; 265  :             *r = r_sign > 0 ? (_INT32_T)r_abs : -(_INT32_T)r_abs;

	movsx	eax, BYTE PTR _r_sign$5[ebp]
	test	eax, eax
	jle	SHORT $LN21@PMC_DivRem
	mov	ecx, DWORD PTR _r_abs$3[ebp]
	mov	DWORD PTR tv143[ebp], ecx
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:
	mov	edx, DWORD PTR _r_abs$3[ebp]
	neg	edx
	mov	DWORD PTR tv143[ebp], edx
$LN22@PMC_DivRem:
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [eax], ecx

; 266  :         }

	jmp	SHORT $LN7@PMC_DivRem
$LN8@PMC_DivRem:

; 267  :         else
; 268  :         {
; 269  :             char r_sign = nu->SIGN;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _r_sign$2[ebp], cl

; 270  :             _UINT32_T r_abs;
; 271  :             if ((result = ep_uint.DivRem_X_I(nu->ABS, v_abs, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _ep_uint+124
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 272  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 273  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 274  :             *r = r_sign > 0 ? (_INT32_T)r_abs : -(_INT32_T)r_abs;

	movsx	eax, BYTE PTR _r_sign$2[ebp]
	test	eax, eax
	jle	SHORT $LN23@PMC_DivRem
	mov	ecx, DWORD PTR _r_abs$1[ebp]
	mov	DWORD PTR tv155[ebp], ecx
	jmp	SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:
	mov	edx, DWORD PTR _r_abs$1[ebp]
	neg	edx
	mov	DWORD PTR tv155[ebp], edx
$LN24@PMC_DivRem:
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR tv155[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@PMC_DivRem:

; 275  :         }
; 276  :     }
; 277  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 278  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN13@PMC_DivRem:

; 279  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 280  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN31@PMC_DivRem:
	DD	5
	DD	$LN30@PMC_DivRem
$LN30@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN25@PMC_DivRem
	DD	-45					; ffffffd3H
	DD	1
	DD	$LN26@PMC_DivRem
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN27@PMC_DivRem
	DD	-108					; ffffff94H
	DD	4
	DD	$LN28@PMC_DivRem
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN29@PMC_DivRem
$LN29@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN28@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN27@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN26@PMC_DivRem:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN25@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_I@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_UX_X@16
_TEXT	SEGMENT
tv93 = -260						; size = 4
tv77 = -260						; size = 4
_q_abs$1 = -60						; size = 4
_q_sign$2 = -45						; size = 1
_nq$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_UX_X@16 PROC				; COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 167  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 168  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 169  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 170  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 171  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 172  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 173  :     PMC_STATUS_CODE result;
; 174  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 175  :     NUMBER_HEADER* nq;
; 176  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_DivRem

; 177  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 178  :     if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_DivRem

; 179  :     {
; 180  :         // v == 0 ÇÃèÍçá
; 181  : 
; 182  :         // ÉGÉâÅ[Çï‘Ç∑
; 183  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 184  :     }
; 185  :     if (u->FLAGS.IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN7@PMC_DivRem

; 186  :     {
; 187  :         // u == 0 ÇÃèÍçá
; 188  : 
; 189  :         nq = q != NULL ? nq = &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN16@PMC_DivRem
	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN17@PMC_DivRem
$LN16@PMC_DivRem:
	mov	DWORD PTR tv77[ebp], 0
$LN17@PMC_DivRem:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _nq$[ebp], ecx

; 190  :         *r = uint_number_zero;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _uint_number_zero
	mov	DWORD PTR [eax], ecx

; 191  :     }

	jmp	$LN8@PMC_DivRem
$LN7@PMC_DivRem:

; 192  :     else
; 193  :     {
; 194  :         // u != 0 ÇÃèÍçá
; 195  : 
; 196  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN9@PMC_DivRem

; 197  :         {
; 198  :             char q_sign = nv->SIGN;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _q_sign$2[ebp], cl

; 199  :             PMC_HANDLE_UINT q_abs;
; 200  :             if ((result = ep_uint.DivRem_X_X(u, nv->ABS, &q_abs, r)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 201  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 202  :             if ((result = AllocateNumber(&nq, q_abs->FLAGS.IS_ZERO ? 0 : q_sign, q_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$1[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN18@PMC_DivRem
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:
	movsx	edx, BYTE PTR _q_sign$2[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LN19@PMC_DivRem:
	mov	eax, DWORD PTR _q_abs$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv93[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 203  :             {
; 204  :                 ep_uint.Dispose(q_abs);

	mov	esi, esp
	mov	eax, DWORD PTR _q_abs$1[ebp]
	push	eax
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  :                 ep_uint.Dispose(*r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR _ep_uint+16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 206  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 207  :             }
; 208  :         }

	jmp	SHORT $LN8@PMC_DivRem
$LN9@PMC_DivRem:

; 209  :         else
; 210  :         {
; 211  :             if ((result = ep_uint.DivRem_X_X(u, nv->ABS, NULL, r)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+132
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 212  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 213  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0
$LN8@PMC_DivRem:

; 214  :         }
; 215  :     }
; 216  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN14@PMC_DivRem

; 217  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN14@PMC_DivRem:

; 218  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 219  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN23@PMC_DivRem:
	DD	2
	DD	$LN22@PMC_DivRem
$LN22@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN20@PMC_DivRem
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN21@PMC_DivRem
$LN21@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN20@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_UX_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_L_X@20
_TEXT	SEGMENT
tv159 = -360						; size = 4
tv142 = -360						; size = 4
tv133 = -360						; size = 4
tv87 = -360						; size = 4
tv78 = -360						; size = 4
_r_abs$1 = -160						; size = 8
_r_sign$2 = -141					; size = 1
_r_abs$3 = -132						; size = 8
_q_abs$4 = -116						; size = 8
_r_sign$5 = -97						; size = 1
_q_sign$6 = -85						; size = 1
_u_abs$ = -76						; size = 8
_u_sign$ = -57						; size = 1
_nr$ = -48						; size = 4
_nq$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_L_X@20 PROC					; COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 360				; 00000168H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 100  :     // ëÂíÔÇÃèÍçáÇÕ q Ç∆ r ÇÃê∏ìxÇÕ _INT32_T Ç≈ñ‚ëËÇ»Ç¢Ç™ÅAÉIÅ[ÉoÅ[ÉtÉçÅ[ÇµÇƒÇµÇ‹Ç§ÉPÅ[ÉXÇ™ë∂ç›Ç∑ÇÈÇΩÇﬂÅAPMC_HANDLE_SINT å^Ç∆Ç∑ÇÈ
; 101  :     // ó·: u == -9223372036854775808, v == -1 ÇÃèÍçáÅAq = 9223372036854775808, r = 0 Ç∆Ç»ÇÈÇ™ 9223372036854775808 ÇÕ _INT64_TÇ≈ÇÕï\åªÇ≈Ç´Ç»Ç¢ÅB
; 102  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 103  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 104  :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 105  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 106  :     PMC_STATUS_CODE result;
; 107  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 108  :     NUMBER_HEADER* nq;
; 109  :     NUMBER_HEADER* nr;
; 110  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_DivRem

; 111  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 112  :     char u_sign;
; 113  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 114  :     if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_DivRem

; 115  :     {
; 116  :         // v == 0 ÇÃèÍçá
; 117  : 
; 118  :         // ÉGÉâÅ[Çï‘Ç∑
; 119  :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 120  :     }
; 121  :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN6@PMC_DivRem

; 122  :     {
; 123  :         // u == 0 ÇÃèÍçá
; 124  : 
; 125  :         nq = q != NULL ? &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN17@PMC_DivRem
	mov	DWORD PTR tv78[ebp], OFFSET _number_zero
	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:
	mov	DWORD PTR tv78[ebp], 0
$LN18@PMC_DivRem:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _nq$[ebp], eax

; 126  :         nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 127  :     }

	jmp	$LN7@PMC_DivRem
$LN6@PMC_DivRem:

; 128  :     else
; 129  :     {
; 130  :         // u != 0 ÇÃèÍçá
; 131  : 
; 132  :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN8@PMC_DivRem

; 133  :         {
; 134  :             char q_sign = u_sign > 0 ? nv->SIGN : -nv->SIGN;

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN19@PMC_DivRem
	mov	ecx, DWORD PTR _nv$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:
	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	DWORD PTR tv87[ebp], ecx
$LN20@PMC_DivRem:
	mov	dl, BYTE PTR tv87[ebp]
	mov	BYTE PTR _q_sign$6[ebp], dl

; 135  :             char r_sign = u_sign;

	mov	al, BYTE PTR _u_sign$[ebp]
	mov	BYTE PTR _r_sign$5[ebp], al

; 136  :             _UINT64_T q_abs;
; 137  :             _UINT64_T r_abs;
; 138  :             if ((result = ep_uint.DivRem_L_X(u_abs, nv->ABS, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u_abs$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+120
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_DivRem

; 139  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:

; 140  :             if ((result = From_L_Imp(q_abs == 0 ? 0 : q_sign, q_abs, &nq)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _q_abs$4[ebp]
	or	eax, DWORD PTR _q_abs$4[ebp+4]
	jne	SHORT $LN21@PMC_DivRem
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:
	movsx	ecx, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv133[ebp], ecx
$LN22@PMC_DivRem:
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_abs$4[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	movzx	edx, BYTE PTR tv133[ebp]
	push	edx
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 141  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 142  :             if ((result = From_L_Imp(r_abs == 0 ? 0 :  r_sign, r_abs, &nr)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$3[ebp]
	or	eax, DWORD PTR _r_abs$3[ebp+4]
	jne	SHORT $LN23@PMC_DivRem
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:
	movsx	ecx, BYTE PTR _r_sign$5[ebp]
	mov	DWORD PTR tv142[ebp], ecx
$LN24@PMC_DivRem:
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	mov	eax, DWORD PTR _r_abs$3[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _r_abs$3[ebp]
	push	ecx
	movzx	edx, BYTE PTR tv142[ebp]
	push	edx
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 143  :             {
; 144  :                 DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 145  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 146  :             }
; 147  :         }

	jmp	$LN7@PMC_DivRem
$LN8@PMC_DivRem:

; 148  :         else
; 149  :         {
; 150  :             char r_sign = u_sign;

	mov	al, BYTE PTR _u_sign$[ebp]
	mov	BYTE PTR _r_sign$2[ebp], al

; 151  :             _UINT64_T r_abs;
; 152  :             if ((result = ep_uint.DivRem_L_X(u_abs, nv->ABS, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u_abs$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+120
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 153  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 154  :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 155  :             if ((result = From_L_Imp(r_abs == 0 ? 0 : r_sign, r_abs, &nr)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_abs$1[ebp]
	or	eax, DWORD PTR _r_abs$1[ebp+4]
	jne	SHORT $LN25@PMC_DivRem
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:
	movsx	ecx, BYTE PTR _r_sign$2[ebp]
	mov	DWORD PTR tv159[ebp], ecx
$LN26@PMC_DivRem:
	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	mov	eax, DWORD PTR _r_abs$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _r_abs$1[ebp]
	push	ecx
	movzx	edx, BYTE PTR tv159[ebp]
	push	edx
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_DivRem

; 156  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 157  :         }
; 158  :     }
; 159  :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN15@PMC_DivRem

; 160  :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@PMC_DivRem:

; 161  :     *r = (PMC_HANDLE_SINT)nr;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [eax], ecx

; 162  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 163  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN34@PMC_DivRem:
	DD	6
	DD	$LN33@PMC_DivRem
$LN33@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_DivRem
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN28@PMC_DivRem
	DD	-57					; ffffffc7H
	DD	1
	DD	$LN29@PMC_DivRem
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN30@PMC_DivRem
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN31@PMC_DivRem
	DD	-160					; ffffff60H
	DD	8
	DD	$LN32@PMC_DivRem
$LN32@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN31@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN30@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN29@PMC_DivRem:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN28@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN27@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_L_X@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_divrem.c
;	COMDAT _PMC_DivRem_I_X@16
_TEXT	SEGMENT
tv159 = -344						; size = 4
tv142 = -344						; size = 4
tv133 = -344						; size = 4
tv87 = -344						; size = 4
tv78 = -344						; size = 4
_r_abs$1 = -144						; size = 4
_r_sign$2 = -129					; size = 1
_r_abs$3 = -120						; size = 4
_q_abs$4 = -108						; size = 4
_r_sign$5 = -93						; size = 1
_q_sign$6 = -81						; size = 1
_u_abs$ = -72						; size = 4
_u_sign$ = -57						; size = 1
_nr$ = -48						; size = 4
_nq$ = -36						; size = 4
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_I_X@16 PROC					; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __E9C852B3_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     // ëÂíÔÇÃèÍçáÇÕ q Ç∆ r ÇÃê∏ìxÇÕ _INT32_T Ç≈ñ‚ëËÇ»Ç¢Ç™ÅAÉIÅ[ÉoÅ[ÉtÉçÅ[ÇµÇƒÇµÇ‹Ç§ÉPÅ[ÉXÇ™ë∂ç›Ç∑ÇÈÇΩÇﬂÅAPMC_HANDLE_SINT å^Ç∆Ç∑ÇÈ
; 34   :     // ó·: u == -2147483648, v == -1 ÇÃèÍçáÅAq = 2147483648, r = 0 Ç∆Ç»ÇÈÇ™ 2147483648 ÇÕ _INT32_TÇ≈ÇÕï\åªÇ≈Ç´Ç»Ç¢ÅB
; 35   :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 36   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 37   :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 38   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 39   :     PMC_STATUS_CODE result;
; 40   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 41   :     NUMBER_HEADER* nq;
; 42   :     NUMBER_HEADER* nr;
; 43   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_DivRem

; 44   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 45   :     char u_sign;
; 46   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 47   :     if (nv->SIGN == 0)

	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN5@PMC_DivRem

; 48   :     {
; 49   :         // v == 0 ÇÃèÍçá
; 50   : 
; 51   :         // ÉGÉâÅ[Çï‘Ç∑
; 52   :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 53   :     }
; 54   :     if (u_sign == 0)

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN6@PMC_DivRem

; 55   :     {
; 56   :         // u == 0 ÇÃèÍçá
; 57   : 
; 58   :         nq = q != NULL ? &number_zero : NULL;

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN17@PMC_DivRem
	mov	DWORD PTR tv78[ebp], OFFSET _number_zero
	jmp	SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:
	mov	DWORD PTR tv78[ebp], 0
$LN18@PMC_DivRem:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _nq$[ebp], eax

; 59   :         nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 60   :     }

	jmp	$LN7@PMC_DivRem
$LN6@PMC_DivRem:

; 61   :     else
; 62   :     {
; 63   :         // u != 0 ÇÃèÍçá
; 64   : 
; 65   :         if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	$LN8@PMC_DivRem

; 66   :         {
; 67   :             char q_sign = u_sign > 0 ? nv->SIGN : -nv->SIGN;

	movsx	eax, BYTE PTR _u_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN19@PMC_DivRem
	mov	ecx, DWORD PTR _nv$[ebp]
	movsx	edx, BYTE PTR [ecx+16]
	mov	DWORD PTR tv87[ebp], edx
	jmp	SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:
	mov	eax, DWORD PTR _nv$[ebp]
	movsx	ecx, BYTE PTR [eax+16]
	neg	ecx
	mov	DWORD PTR tv87[ebp], ecx
$LN20@PMC_DivRem:
	mov	dl, BYTE PTR tv87[ebp]
	mov	BYTE PTR _q_sign$6[ebp], dl

; 68   :             char r_sign = u_sign;

	mov	al, BYTE PTR _u_sign$[ebp]
	mov	BYTE PTR _r_sign$5[ebp], al

; 69   :             _UINT32_T q_abs;
; 70   :             _UINT32_T r_abs;
; 71   :             if ((result = ep_uint.DivRem_I_X(u_abs, nv->ABS, &q_abs, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _q_abs$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+116
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_DivRem

; 72   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:

; 73   :             if ((result = From_I_Imp(q_abs == 0 ? 0 : q_sign, q_abs, &nq)) != PMC_STATUS_OK)

	cmp	DWORD PTR _q_abs$4[ebp], 0
	jne	SHORT $LN21@PMC_DivRem
	mov	DWORD PTR tv133[ebp], 0
	jmp	SHORT $LN22@PMC_DivRem
$LN21@PMC_DivRem:
	movsx	eax, BYTE PTR _q_sign$6[ebp]
	mov	DWORD PTR tv133[ebp], eax
$LN22@PMC_DivRem:
	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_abs$4[ebp]
	push	edx
	movzx	eax, BYTE PTR tv133[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_DivRem

; 74   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 75   :             if ((result = From_I_Imp(r_abs == 0 ? 0 : r_sign, r_abs, &nr)) != PMC_STATUS_OK)

	cmp	DWORD PTR _r_abs$3[ebp], 0
	jne	SHORT $LN23@PMC_DivRem
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:
	movsx	eax, BYTE PTR _r_sign$5[ebp]
	mov	DWORD PTR tv142[ebp], eax
$LN24@PMC_DivRem:
	lea	ecx, DWORD PTR _nr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_abs$3[ebp]
	push	edx
	movzx	eax, BYTE PTR tv142[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 76   :             {
; 77   :                 DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 78   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 79   :             }
; 80   :         }

	jmp	$LN7@PMC_DivRem
$LN8@PMC_DivRem:

; 81   :         else
; 82   :         {
; 83   :             char r_sign = u_sign;

	mov	al, BYTE PTR _u_sign$[ebp]
	mov	BYTE PTR _r_sign$2[ebp], al

; 84   :             _UINT32_T r_abs;
; 85   :             if ((result = ep_uint.DivRem_I_X(u_abs, nv->ABS, NULL, &r_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _r_abs$1[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+116
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 86   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 87   :             nq = NULL;

	mov	DWORD PTR _nq$[ebp], 0

; 88   :             if ((result = From_I_Imp(r_abs == 0 ? 0 : r_sign, r_abs, &nr)) != PMC_STATUS_OK)

	cmp	DWORD PTR _r_abs$1[ebp], 0
	jne	SHORT $LN25@PMC_DivRem
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:
	movsx	eax, BYTE PTR _r_sign$2[ebp]
	mov	DWORD PTR tv159[ebp], eax
$LN26@PMC_DivRem:
	lea	ecx, DWORD PTR _nr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_abs$1[ebp]
	push	edx
	movzx	eax, BYTE PTR tv159[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_DivRem

; 89   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 90   :         }
; 91   :     }
; 92   :     if (q != NULL)

	cmp	DWORD PTR _q$[ebp], 0
	je	SHORT $LN15@PMC_DivRem

; 93   :         *q = (PMC_HANDLE_SINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx
$LN15@PMC_DivRem:

; 94   :     *r = (PMC_HANDLE_SINT)nr;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [eax], ecx

; 95   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN34@PMC_DivRem:
	DD	6
	DD	$LN33@PMC_DivRem
$LN33@PMC_DivRem:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN27@PMC_DivRem
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN28@PMC_DivRem
	DD	-57					; ffffffc7H
	DD	1
	DD	$LN29@PMC_DivRem
	DD	-108					; ffffff94H
	DD	4
	DD	$LN30@PMC_DivRem
	DD	-120					; ffffff88H
	DD	4
	DD	$LN31@PMC_DivRem
	DD	-144					; ffffff70H
	DD	4
	DD	$LN32@PMC_DivRem
$LN32@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN31@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN30@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
$LN29@PMC_DivRem:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
$LN28@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN27@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_I_X@16 ENDP
_TEXT	ENDS
END
