; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_from.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__B21D7C08_pmc_from@c DB 01H
msvcjmc	ENDS
PUBLIC	_From_I_Imp
PUBLIC	_From_L_Imp
PUBLIC	_PMC_From_I@8
PUBLIC	_PMC_From_L@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	_number_zero:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT _PMC_From_L@12
_TEXT	SEGMENT
_p$1 = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 8
_o$ = 16						; size = 4
_PMC_From_L@12 PROC					; COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B21D7C08_pmc_from@c
	call	@__CheckForDebuggerJustMyCode@4

; 85   :     PMC_STATUS_CODE result;
; 86   :     if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	or	eax, DWORD PTR _x$[ebp+4]
	jne	SHORT $LN2@PMC_From_L

; 87   :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	SHORT $LN3@PMC_From_L
$LN2@PMC_From_L:

; 88   :     else
; 89   :     {
; 90   :         NUMBER_HEADER* p;
; 91   :         if (x == 0)

	mov	eax, DWORD PTR _x$[ebp]
	or	eax, DWORD PTR _x$[ebp+4]
	jne	SHORT $LN4@PMC_From_L

; 92   :             result = From_L_Imp(0, 0, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	push	0
	push	0
	push	0
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN5@PMC_From_L
$LN4@PMC_From_L:

; 93   :         else if (x > 0)

	cmp	DWORD PTR _x$[ebp+4], 0
	jl	SHORT $LN6@PMC_From_L
	jg	SHORT $LN10@PMC_From_L
	cmp	DWORD PTR _x$[ebp], 0
	jbe	SHORT $LN6@PMC_From_L
$LN10@PMC_From_L:

; 94   :             result = From_L_Imp(1, x, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	1
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN5@PMC_From_L
$LN6@PMC_From_L:

; 95   :         else
; 96   :             result = From_L_Imp(-1, -x, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _x$[ebp+4]
	adc	edx, 0
	neg	edx
	push	edx
	push	ecx
	push	-1
	call	_From_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
$LN5@PMC_From_L:

; 97   :         if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_From_L

; 98   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_From_L
$LN8@PMC_From_L:

; 99   :         *o = (PMC_HANDLE_SINT)p;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@PMC_From_L:

; 100  :     }
; 101  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_L:

; 102  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PMC_From_L
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN13@PMC_From_L:
	DD	1
	DD	$LN12@PMC_From_L
$LN12@PMC_From_L:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN11@PMC_From_L
$LN11@PMC_From_L:
	DB	112					; 00000070H
	DB	0
_PMC_From_L@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT _PMC_From_I@8
_TEXT	SEGMENT
_p$1 = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_From_I@8 PROC					; COMDAT

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B21D7C08_pmc_from@c
	call	@__CheckForDebuggerJustMyCode@4

; 64   :     PMC_STATUS_CODE result;
; 65   :     if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@PMC_From_I

; 66   :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	SHORT $LN3@PMC_From_I
$LN2@PMC_From_I:

; 67   :     else
; 68   :     {
; 69   :         NUMBER_HEADER* p;
; 70   :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN4@PMC_From_I

; 71   :             result = From_I_Imp(0, 0, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	push	0
	push	0
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN5@PMC_From_I
$LN4@PMC_From_I:

; 72   :         else if (x > 0)

	cmp	DWORD PTR _x$[ebp], 0
	jle	SHORT $LN6@PMC_From_I

; 73   :             result = From_I_Imp(1, x, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	1
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN5@PMC_From_I
$LN6@PMC_From_I:

; 74   :         else
; 75   :             result = From_I_Imp(-1, -x, &p);

	lea	eax, DWORD PTR _p$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	neg	ecx
	push	ecx
	push	-1
	call	_From_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
$LN5@PMC_From_I:

; 76   :         if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@PMC_From_I

; 77   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_From_I
$LN8@PMC_From_I:

; 78   :         *o = (PMC_HANDLE_SINT)p;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@PMC_From_I:

; 79   :     }
; 80   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_I:

; 81   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@PMC_From_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN12@PMC_From_I:
	DD	1
	DD	$LN11@PMC_From_I
$LN11@PMC_From_I:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@PMC_From_I
$LN10@PMC_From_I:
	DB	112					; 00000070H
	DB	0
_PMC_From_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT _From_L_Imp
_TEXT	SEGMENT
_o_abs$1 = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 8
_o$ = 20						; size = 4
_From_L_Imp PROC					; COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B21D7C08_pmc_from@c
	call	@__CheckForDebuggerJustMyCode@4

; 48   :     PMC_STATUS_CODE result;
; 49   :     if (x_sign == 0)

	movsx	eax, BYTE PTR _x_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN2@From_L_Imp

; 50   :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	SHORT $LN3@From_L_Imp
$LN2@From_L_Imp:

; 51   :     else
; 52   :     {
; 53   :         PMC_HANDLE_UINT o_abs;
; 54   :         if ((result = ep_uint.From_L(x_abs, &o_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _o_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _x_abs$[ebp]
	push	edx
	call	DWORD PTR _ep_uint+12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@From_L_Imp

; 55   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@From_L_Imp
$LN4@From_L_Imp:

; 56   :         if ((result = AllocateNumber(o, x_sign, o_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_abs$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR _x_sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@From_L_Imp

; 57   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@From_L_Imp
$LN3@From_L_Imp:

; 58   :     }
; 59   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_L_Imp:

; 60   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@From_L_Imp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@From_L_Imp:
	DD	1
	DD	$LN8@From_L_Imp
$LN8@From_L_Imp:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@From_L_Imp
$LN7@From_L_Imp:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_From_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT _From_I_Imp
_TEXT	SEGMENT
_o_abs$1 = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_o$ = 16						; size = 4
_From_I_Imp PROC					; COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __B21D7C08_pmc_from@c
	call	@__CheckForDebuggerJustMyCode@4

; 32   :     PMC_STATUS_CODE result;
; 33   :     if (x_sign == 0)

	movsx	eax, BYTE PTR _x_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN2@From_I_Imp

; 34   :         *o = &number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	SHORT $LN3@From_I_Imp
$LN2@From_I_Imp:

; 35   :     else
; 36   :     {
; 37   :         PMC_HANDLE_UINT o_abs;
; 38   :         if ((result = ep_uint.From_I(x_abs, &o_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _o_abs$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_abs$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@From_I_Imp

; 39   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@From_I_Imp
$LN4@From_I_Imp:

; 40   :         if ((result = AllocateNumber(o, x_sign, o_abs)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o_abs$1[ebp]
	push	eax
	movzx	ecx, BYTE PTR _x_sign$[ebp]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@From_I_Imp

; 41   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@From_I_Imp
$LN3@From_I_Imp:

; 42   :     }
; 43   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_I_Imp:

; 44   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@From_I_Imp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@From_I_Imp:
	DD	1
	DD	$LN8@From_I_Imp
$LN8@From_I_Imp:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@From_I_Imp
$LN7@From_I_Imp:
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_From_I_Imp ENDP
_TEXT	ENDS
END
