; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_initialize.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_ep_uint:BYTE:0118H
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__331E732B_malloc@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__A52C17B2_pmc_initialize@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_SINT_Initialize@4
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ ; `string'
PUBLIC	??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@		; `string'
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	_Initialize_Memory:PROC
EXTRN	_PMC_GetStatisticsInfo@4:PROC
EXTRN	_PMC_From_I@8:PROC
EXTRN	_PMC_From_L@12:PROC
EXTRN	_PMC_Dispose@4:PROC
EXTRN	_PMC_GetNumberType_X@8:PROC
EXTRN	_PMC_GetConstantValue_I@8:PROC
EXTRN	_PMC_FromByteArray@12:PROC
EXTRN	_PMC_ToByteArray@16:PROC
EXTRN	_PMC_Clone_X@8:PROC
EXTRN	_PMC_To_X_I@8:PROC
EXTRN	_PMC_To_X_L@8:PROC
EXTRN	_PMC_Negate_X@8:PROC
EXTRN	_PMC_Add_I_X@12:PROC
EXTRN	_PMC_Add_L_X@16:PROC
EXTRN	_PMC_Add_UX_X@12:PROC
EXTRN	_PMC_Add_X_I@12:PROC
EXTRN	_PMC_Add_X_L@16:PROC
EXTRN	_PMC_Add_X_UX@12:PROC
EXTRN	_PMC_Add_X_X@12:PROC
EXTRN	_PMC_Subtruct_I_X@12:PROC
EXTRN	_PMC_Subtruct_L_X@16:PROC
EXTRN	_PMC_Subtruct_UX_X@12:PROC
EXTRN	_PMC_Subtruct_X_I@12:PROC
EXTRN	_PMC_Subtruct_X_L@16:PROC
EXTRN	_PMC_Subtruct_X_UX@12:PROC
EXTRN	_PMC_Subtruct_X_X@12:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_entry_points DB 0180H DUP (?)
_hLib_UINT DD	01H DUP (?)
_fp_PMC_UINT_Initialize DD 01H DUP (?)
_initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
CONST	SEGMENT
??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@ DB 'PMC_UINT_Initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
CONST	SEGMENT
??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ DB 'Palmtree.Math.Cor'
	DB	'e.Uint.dll', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT _LoadUINTLIbrary
_TEXT	SEGMENT
_LoadUINTLIbrary PROC					; COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A52C17B2_pmc_initialize@c
	call	@__CheckForDebuggerJustMyCode@4

; 62   :     hLib_UINT = LoadLibraryA("Palmtree.Math.Core.Uint.dll");

	mov	esi, esp
	push	OFFSET ??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
	call	DWORD PTR __imp__LoadLibraryA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLib_UINT, eax

; 63   :     if (hLib_UINT == NULL)

	cmp	DWORD PTR _hLib_UINT, 0
	jne	SHORT $LN2@LoadUINTLI

; 64   :     {
; 65   :         fp_PMC_UINT_Initialize = NULL;

	mov	DWORD PTR _fp_PMC_UINT_Initialize, 0

; 66   :         return;

	jmp	SHORT $LN1@LoadUINTLI
$LN2@LoadUINTLI:

; 67   :     }
; 68   :     fp_PMC_UINT_Initialize = (void*)GetProcAddress(hLib_UINT, "PMC_UINT_Initialize");

	mov	esi, esp
	push	OFFSET ??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
	mov	eax, DWORD PTR _hLib_UINT
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp_PMC_UINT_Initialize, eax

; 69   :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	DWORD PTR _fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN1@LoadUINTLI

; 70   :     {
; 71   :         FreeLibrary(hLib_UINT);

	mov	esi, esp
	mov	eax, DWORD PTR _hLib_UINT
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   :         hLib_UINT = NULL;

	mov	DWORD PTR _hLib_UINT, 0
$LN1@LoadUINTLI:

; 73   :         return;
; 74   :     }
; 75   :     return;
; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LoadUINTLIbrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT _CopyUINTEntryPointStructure
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_CopyUINTEntryPointStructure PROC			; COMDAT

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A52C17B2_pmc_initialize@c
	call	@__CheckForDebuggerJustMyCode@4

; 43   : #ifdef _M_IX86
; 44   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@CopyUINTEn

; 45   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));

	push	70					; 00000046H
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	call	__COPY_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@CopyUINTEn
$LN2@CopyUINTEn:

; 46   :     else
; 47   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));

	push	280					; 00000118H
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d$[ebp]
	push	ecx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@CopyUINTEn:

; 48   : #elif defined(_M_IX64)
; 49   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)
; 50   :         _COPY_MEMORY_64((_UINT64_T*)d, (_UINT64_T*)s, sizeof(*s) / sizeof(_UINT64_T));
; 51   :     else if (sizeof(*s) % sizeof(_UINT64_T) == 0)
; 52   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));
; 53   :     else
; 54   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));
; 55   : #else
; 56   : #error unknown platform
; 57   : #endif
; 58   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CopyUINTEntryPointStructure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_32
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_32 PROC					; COMDAT

; 48   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 49   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 50   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__COPY_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT __COPY_MEMORY_BYTE
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_BYTE PROC					; COMDAT

; 43   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 44   :         __movsb(d, s, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsb

; 45   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT _PMC_SINT_Initialize@4
_TEXT	SEGMENT
_ep$ = -8						; size = 4
_config$ = 8						; size = 4
_PMC_SINT_Initialize@4 PROC				; COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A52C17B2_pmc_initialize@c
	call	@__CheckForDebuggerJustMyCode@4

; 80   :     if (hLib_UINT == NULL)

	cmp	DWORD PTR _hLib_UINT, 0
	jne	SHORT $LN2@PMC_SINT_I

; 81   :         LoadUINTLIbrary();

	call	_LoadUINTLIbrary
$LN2@PMC_SINT_I:

; 82   :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	DWORD PTR _fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN3@PMC_SINT_I

; 83   :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN3@PMC_SINT_I:

; 84   :     PMC_UINT_ENTRY_POINTS* ep = (*fp_PMC_UINT_Initialize)(config);

	mov	esi, esp
	mov	eax, DWORD PTR _config$[ebp]
	push	eax
	call	DWORD PTR _fp_PMC_UINT_Initialize
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ep$[ebp], eax

; 85   :     if (ep == NULL)

	cmp	DWORD PTR _ep$[ebp], 0
	jne	SHORT $LN4@PMC_SINT_I

; 86   :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN4@PMC_SINT_I:

; 87   : 
; 88   :     if (!initialized)

	cmp	DWORD PTR _initialized, 0
	jne	$LN5@PMC_SINT_I

; 89   :     {
; 90   :         CopyUINTEntryPointStructure(&ep_uint, ep);

	mov	eax, DWORD PTR _ep$[ebp]
	push	eax
	push	OFFSET _ep_uint
	call	_CopyUINTEntryPointStructure
	add	esp, 8

; 91   :         CopyUINTEntryPointStructure(&entry_points.uint, ep);

	mov	eax, DWORD PTR _ep$[ebp]
	push	eax
	push	OFFSET _entry_points
	call	_CopyUINTEntryPointStructure
	add	esp, 8

; 92   : 
; 93   :         if (Initialize_Memory() != PMC_STATUS_OK)

	call	_Initialize_Memory
	test	eax, eax
	je	SHORT $LN6@PMC_SINT_I

; 94   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN6@PMC_SINT_I:

; 95   : 
; 96   :         entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

	mov	DWORD PTR _entry_points+280, OFFSET _PMC_GetStatisticsInfo@4

; 97   :         entry_points.From_I = PMC_From_I;

	mov	DWORD PTR _entry_points+284, OFFSET _PMC_From_I@8

; 98   :         entry_points.From_L = PMC_From_L;

	mov	DWORD PTR _entry_points+288, OFFSET _PMC_From_L@12

; 99   :         entry_points.FromByteArray = PMC_FromByteArray;

	mov	DWORD PTR _entry_points+304, OFFSET _PMC_FromByteArray@12

; 100  :         entry_points.Dispose = PMC_Dispose;

	mov	DWORD PTR _entry_points+292, OFFSET _PMC_Dispose@4

; 101  :         entry_points.To_X_I = PMC_To_X_I;

	mov	DWORD PTR _entry_points+316, OFFSET _PMC_To_X_I@8

; 102  :         entry_points.To_X_L = PMC_To_X_L;

	mov	DWORD PTR _entry_points+320, OFFSET _PMC_To_X_L@8

; 103  :         entry_points.ToByteArray = PMC_ToByteArray;

	mov	DWORD PTR _entry_points+308, OFFSET _PMC_ToByteArray@16

; 104  :         /*
; 105  :         entry_points.ToString = PMC_ToString;
; 106  :         entry_points.TryParse = PMC_TryParse;
; 107  :         */
; 108  :         entry_points.Add_I_X = PMC_Add_I_X;

	mov	DWORD PTR _entry_points+328, OFFSET _PMC_Add_I_X@12

; 109  :         entry_points.Add_L_X = PMC_Add_L_X;

	mov	DWORD PTR _entry_points+332, OFFSET _PMC_Add_L_X@16

; 110  :         entry_points.Add_UX_X = PMC_Add_UX_X;

	mov	DWORD PTR _entry_points+336, OFFSET _PMC_Add_UX_X@12

; 111  :         entry_points.Add_X_I = PMC_Add_X_I;

	mov	DWORD PTR _entry_points+340, OFFSET _PMC_Add_X_I@12

; 112  :         entry_points.Add_X_L = PMC_Add_X_L;

	mov	DWORD PTR _entry_points+344, OFFSET _PMC_Add_X_L@16

; 113  :         entry_points.Add_X_UX = PMC_Add_X_UX;

	mov	DWORD PTR _entry_points+348, OFFSET _PMC_Add_X_UX@12

; 114  :         entry_points.Add_X_X = PMC_Add_X_X;

	mov	DWORD PTR _entry_points+352, OFFSET _PMC_Add_X_X@12

; 115  :         entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

	mov	DWORD PTR _entry_points+356, OFFSET _PMC_Subtruct_I_X@12

; 116  :         entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

	mov	DWORD PTR _entry_points+360, OFFSET _PMC_Subtruct_L_X@16

; 117  :         entry_points.Subtruct_UX_X = PMC_Subtruct_UX_X;

	mov	DWORD PTR _entry_points+364, OFFSET _PMC_Subtruct_UX_X@12

; 118  :         entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

	mov	DWORD PTR _entry_points+368, OFFSET _PMC_Subtruct_X_I@12

; 119  :         entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

	mov	DWORD PTR _entry_points+372, OFFSET _PMC_Subtruct_X_L@16

; 120  :         entry_points.Subtruct_X_UX = PMC_Subtruct_X_UX;

	mov	DWORD PTR _entry_points+376, OFFSET _PMC_Subtruct_X_UX@12

; 121  :         entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

	mov	DWORD PTR _entry_points+380, OFFSET _PMC_Subtruct_X_X@12

; 122  :         /*
; 123  :         entry_points.Multiply_I_X = PMC_Multiply_I_X;
; 124  :         entry_points.Multiply_L_X = PMC_Multiply_L_X;
; 125  :         entry_points.Multiply_X_I = PMC_Multiply_X_I;
; 126  :         entry_points.Multiply_X_L = PMC_Multiply_X_L;
; 127  :         entry_points.Multiply_X_X = PMC_Multiply_X_X;
; 128  :         entry_points.DivRem_I_X = PMC_DivRem_I_X;
; 129  :         entry_points.DivRem_L_X = PMC_DivRem_L_X;
; 130  :         entry_points.DivRem_X_I = PMC_DivRem_X_I;
; 131  :         entry_points.DivRem_X_L = PMC_DivRem_X_L;
; 132  :         entry_points.DivRem_X_X = PMC_DivRem_X_X;
; 133  :         entry_points.RightShift_X_I = PMC_RightShift_X_I;
; 134  :         entry_points.LeftShift_X_I = PMC_LeftShift_X_I;
; 135  :         entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;
; 136  :         entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;
; 137  :         entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;
; 138  :         entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;
; 139  :         entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;
; 140  :         entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;
; 141  :         entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;
; 142  :         entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;
; 143  :         entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;
; 144  :         entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;
; 145  :         entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;
; 146  :         entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;
; 147  :         entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;
; 148  :         entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;
; 149  :         entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;
; 150  :         entry_points.Compare_I_X = PMC_Compare_I_X;
; 151  :         entry_points.Compare_L_X = PMC_Compare_L_X;
; 152  :         entry_points.Compare_X_I = PMC_Compare_X_I;
; 153  :         entry_points.Compare_X_L = PMC_Compare_X_L;
; 154  :         entry_points.Compare_X_X = PMC_Compare_X_X;
; 155  :         entry_points.Equals_I_X = PMC_Equals_I_X;
; 156  :         entry_points.Equals_L_X = PMC_Equals_L_X;
; 157  :         entry_points.Equals_X_I = PMC_Equals_X_I;
; 158  :         entry_points.Equals_X_L = PMC_Equals_X_L;
; 159  :         entry_points.Equals_X_X = PMC_Equals_X_X;
; 160  :         entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;
; 161  :         entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;
; 162  :         entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;
; 163  :         entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;
; 164  :         entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;
; 165  :         entry_points.Pow_X_I = PMC_Pow_X_I;
; 166  :         entry_points.ModPow_X_X_X = PMC_ModPow_X_X_X;
; 167  :         */
; 168  :         entry_points.GetNumberType_X = PMC_GetNumberType_X;

	mov	DWORD PTR _entry_points+296, OFFSET _PMC_GetNumberType_X@8

; 169  :         entry_points.GetConstantValue_I = PMC_GetConstantValue_I;

	mov	DWORD PTR _entry_points+300, OFFSET _PMC_GetConstantValue_I@8

; 170  :         entry_points.Clone_X = PMC_Clone_X;

	mov	DWORD PTR _entry_points+312, OFFSET _PMC_Clone_X@8

; 171  :         entry_points.Negate_X = PMC_Negate_X;

	mov	DWORD PTR _entry_points+324, OFFSET _PMC_Negate_X@8

; 172  : 
; 173  :         initialized = TRUE;

	mov	DWORD PTR _initialized, 1
$LN5@PMC_SINT_I:

; 174  :     }
; 175  : 
; 176  :     return (&entry_points);

	mov	eax, OFFSET _entry_points
$LN1@PMC_SINT_I:

; 177  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_SINT_Initialize@4 ENDP
_TEXT	ENDS
END
