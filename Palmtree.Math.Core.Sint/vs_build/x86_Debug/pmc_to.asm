; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_to.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__9DF65EBA_pmc_to@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_To_X_I@8
PUBLIC	_PMC_To_X_L@8
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_to.c
;	COMDAT _PMC_To_X_L@8
_TEXT	SEGMENT
_p_abs$ = -52						; size = 8
_p_sign$ = -33						; size = 1
_result$ = -24						; size = 4
_np$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_L@8 PROC					; COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9DF65EBA_pmc_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 59   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 60   :     PMC_STATUS_CODE result;
; 61   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _np$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@PMC_To_X_L

; 62   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_To_X_L
$LN2@PMC_To_X_L:

; 63   :     char p_sign = np->SIGN;

	mov	eax, DWORD PTR _np$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _p_sign$[ebp], cl

; 64   :     _UINT64_T p_abs;
; 65   :     if ((result = ep_uint.To_X_L(np->ABS, &p_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _p_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+48
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_To_X_L

; 66   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_To_X_L
$LN3@PMC_To_X_L:

; 67   :     if (p_sign == 0)

	movsx	eax, BYTE PTR _p_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN4@PMC_To_X_L

; 68   :         *o = 0;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	jmp	SHORT $LN5@PMC_To_X_L
$LN4@PMC_To_X_L:

; 69   :     else if (p_sign > 0)

	movsx	eax, BYTE PTR _p_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN6@PMC_To_X_L

; 70   :     {
; 71   :         if (p_abs > 0x7fffffffffffffffLU)

	cmp	DWORD PTR _p_abs$[ebp+4], 2147483647	; 7fffffffH
	jb	SHORT $LN8@PMC_To_X_L
	ja	SHORT $LN11@PMC_To_X_L
	cmp	DWORD PTR _p_abs$[ebp], -1
	jbe	SHORT $LN8@PMC_To_X_L
$LN11@PMC_To_X_L:

; 72   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_To_X_L
$LN8@PMC_To_X_L:

; 73   :         *o = (_INT64_T)p_abs;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _p_abs$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _p_abs$[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 74   :     }

	jmp	SHORT $LN5@PMC_To_X_L
$LN6@PMC_To_X_L:

; 75   :     else
; 76   :     {
; 77   :         if (p_abs > 0x8000000000000000LU)

	cmp	DWORD PTR _p_abs$[ebp+4], -2147483648	; 80000000H
	jb	SHORT $LN9@PMC_To_X_L
	ja	SHORT $LN12@PMC_To_X_L
	cmp	DWORD PTR _p_abs$[ebp], 0
	jbe	SHORT $LN9@PMC_To_X_L
$LN12@PMC_To_X_L:

; 78   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_To_X_L
$LN9@PMC_To_X_L:

; 79   :         *o = -(_INT64_T)p_abs;

	mov	eax, DWORD PTR _p_abs$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _p_abs$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
$LN5@PMC_To_X_L:

; 80   :     }
; 81   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_L:

; 82   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@PMC_To_X_L
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@PMC_To_X_L:
	DD	1
	DD	$LN14@PMC_To_X_L
$LN14@PMC_To_X_L:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN13@PMC_To_X_L
$LN13@PMC_To_X_L:
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_PMC_To_X_L@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_to.c
;	COMDAT _PMC_To_X_I@8
_TEXT	SEGMENT
_p_abs$ = -48						; size = 4
_p_sign$ = -33						; size = 1
_result$ = -24						; size = 4
_np$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_I@8 PROC					; COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __9DF65EBA_pmc_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 32   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 33   :     PMC_STATUS_CODE result;
; 34   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _np$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@PMC_To_X_I

; 35   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_To_X_I
$LN2@PMC_To_X_I:

; 36   :     char p_sign = np->SIGN;

	mov	eax, DWORD PTR _np$[ebp]
	mov	cl, BYTE PTR [eax+16]
	mov	BYTE PTR _p_sign$[ebp], cl

; 37   :     _UINT32_T p_abs;
; 38   :     if ((result = ep_uint.To_X_I(np->ABS, &p_abs)) != PMC_STATUS_OK)

	mov	esi, esp
	lea	eax, DWORD PTR _p_abs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _ep_uint+44
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_To_X_I

; 39   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_To_X_I
$LN3@PMC_To_X_I:

; 40   :     if (p_sign == 0)

	movsx	eax, BYTE PTR _p_sign$[ebp]
	test	eax, eax
	jne	SHORT $LN4@PMC_To_X_I

; 41   :         *o = 0;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN5@PMC_To_X_I
$LN4@PMC_To_X_I:

; 42   :     else if (p_sign > 0)

	movsx	eax, BYTE PTR _p_sign$[ebp]
	test	eax, eax
	jle	SHORT $LN6@PMC_To_X_I

; 43   :     {
; 44   :         if (p_abs > 0x7fffffffU)

	cmp	DWORD PTR _p_abs$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN8@PMC_To_X_I

; 45   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_To_X_I
$LN8@PMC_To_X_I:

; 46   :         *o = (_INT32_T)p_abs;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _p_abs$[ebp]
	mov	DWORD PTR [eax], ecx

; 47   :     }

	jmp	SHORT $LN5@PMC_To_X_I
$LN6@PMC_To_X_I:

; 48   :     else
; 49   :     {
; 50   :         if (p_abs > 0x80000000U)

	cmp	DWORD PTR _p_abs$[ebp], -2147483648	; 80000000H
	jbe	SHORT $LN9@PMC_To_X_I

; 51   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_To_X_I
$LN9@PMC_To_X_I:

; 52   :         *o = -(_INT32_T)p_abs;

	mov	eax, DWORD PTR _p_abs$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@PMC_To_X_I:

; 53   :     }
; 54   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_I:

; 55   : }   

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PMC_To_X_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN13@PMC_To_X_I:
	DD	1
	DD	$LN12@PMC_To_X_I
$LN12@PMC_To_X_I:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN11@PMC_To_X_I
$LN11@PMC_To_X_I:
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	0
_PMC_To_X_I@8 ENDP
_TEXT	ENDS
END
