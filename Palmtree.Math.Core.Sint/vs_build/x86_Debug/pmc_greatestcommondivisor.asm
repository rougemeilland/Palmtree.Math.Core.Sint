; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Sint\Palmtree.Math.Core.Sint\pmc_greatestcommondivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_uint_number_zero:DWORD
COMM	_uint_number_one:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__3666D5C6_pmc_greatestcommondivisor@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_GreatestCommonDivisor_I_X@12
PUBLIC	_PMC_GreatestCommonDivisor_L_X@16
PUBLIC	_PMC_GreatestCommonDivisor_UX_X@12
PUBLIC	_PMC_GreatestCommonDivisor_X_I@12
PUBLIC	_PMC_GreatestCommonDivisor_X_L@16
PUBLIC	_PMC_GreatestCommonDivisor_X_UX@12
PUBLIC	_PMC_GreatestCommonDivisor_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_ep_uint:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_64
_TEXT	SEGMENT
tv68 = -200						; size = 8
_u$ = 8							; size = 8
_sign$ = 16						; size = 4
_GET_ABS_64 PROC					; COMDAT

; 800  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 801  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp+4], 0
	jl	SHORT $LN2@GET_ABS_64
	jg	SHORT $LN9@GET_ABS_64
	cmp	DWORD PTR _u$[ebp], 0
	jbe	SHORT $LN2@GET_ABS_64
$LN9@GET_ABS_64:

; 802  :         {
; 803  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 804  :             return ((_UINT64_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR _u$[ebp+4]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 809  :             return (0);

	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN1@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN7@GET_ABS_64
	cmp	DWORD PTR _u$[ebp+4], -2147483648	; 80000000H
	jne	SHORT $LN7@GET_ABS_64
	mov	DWORD PTR tv68[ebp], 0
	mov	DWORD PTR tv68[ebp+4], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR tv68[ebp], eax
	mov	DWORD PTR tv68[ebp+4], ecx
$LN8@GET_ABS_64:
	mov	eax, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp+4]
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _GET_ABS_32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC					; COMDAT

; 780  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 781  :         if (u > 0)

	cmp	DWORD PTR _u$[ebp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR _u$[ebp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	eax, DWORD PTR _sign$[ebp]
	mov	BYTE PTR [eax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR _u$[ebp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[ebp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR _u$[ebp]
	neg	eax
	mov	DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_X@12
_TEXT	SEGMENT
_nv$ = -32						; size = 4
_nu$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_X@12 PROC			; COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 135  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 136  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate
$LN2@PMC_Greate:

; 137  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 138  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 139  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 140  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 141  :     PMC_STATUS_CODE result;
; 142  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 143  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 144  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 145  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 146  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 147  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 148  :     if ((result = ep_uint.GreatestCommonDivisor_X_X(nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+264
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Greate

; 149  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN7@PMC_Greate:

; 150  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 151  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_UX@12
_TEXT	SEGMENT
_nu$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_UX@12 PROC			; COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 118  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 119  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 120  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 121  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 122  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 123  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 124  :     PMC_STATUS_CODE result;
; 125  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 126  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 127  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 128  :     if ((result = ep_uint.GreatestCommonDivisor_X_X(nu->ABS, v, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _ep_uint+264
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 129  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 130  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_UX@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_L@16
_TEXT	SEGMENT
_v_abs$ = -52						; size = 8
_v_sign$ = -33						; size = 1
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L@16 PROC			; COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 101  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 102  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 103  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 104  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 105  :     PMC_STATUS_CODE result;
; 106  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 107  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Greate

; 108  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 109  :     char v_sign;
; 110  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_abs$[ebp], eax
	mov	DWORD PTR _v_abs$[ebp+4], edx

; 111  :     if ((result = ep_uint.GreatestCommonDivisor_X_L(nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v_abs$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _ep_uint+260
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 112  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 113  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 114  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN9@PMC_Greate:
	DD	1
	DD	$LN8@PMC_Greate
$LN8@PMC_Greate:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN7@PMC_Greate
$LN7@PMC_Greate:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_GreatestCommonDivisor_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_X_I@12
_TEXT	SEGMENT
_v_abs$ = -48						; size = 4
_v_sign$ = -33						; size = 1
_nu$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I@12 PROC			; COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 84   :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 85   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 86   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 87   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 88   :     PMC_STATUS_CODE result;
; 89   :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 90   :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Greate

; 91   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 92   :     char v_sign;
; 93   :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	eax, DWORD PTR _v_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _v_abs$[ebp], eax

; 94   :     if ((result = ep_uint.GreatestCommonDivisor_X_I(nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_abs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _ep_uint+256
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 95   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 96   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 97   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@PMC_Greate:
	DD	1
	DD	$LN8@PMC_Greate
$LN8@PMC_Greate:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN7@PMC_Greate
$LN7@PMC_Greate:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_GreatestCommonDivisor_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_UX_X@12
_TEXT	SEGMENT
_nv$ = -20						; size = 4
_result$ = -8						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_UX_X@12 PROC			; COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 67   :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 68   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 69   :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 70   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 71   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 72   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 73   :     PMC_STATUS_CODE result;
; 74   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 75   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 76   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 77   :     if ((result = ep_uint.GreatestCommonDivisor_X_X(u, nv->ABS, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+264
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 78   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 79   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_UX_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_L_X@16
_TEXT	SEGMENT
_u_abs$ = -52						; size = 8
_u_sign$ = -33						; size = 1
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_L_X@16 PROC			; COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 50   :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 51   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 52   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 53   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 54   :     PMC_STATUS_CODE result;
; 55   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 56   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Greate

; 57   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 58   :     char u_sign;
; 59   :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_GET_ABS_64
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_abs$[ebp], eax
	mov	DWORD PTR _u_abs$[ebp+4], edx

; 60   :     if ((result = ep_uint.GreatestCommonDivisor_L_X(u_abs, nv->ABS, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u_abs$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u_abs$[ebp]
	push	ecx
	call	DWORD PTR _ep_uint+252
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 61   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 62   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 63   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN9@PMC_Greate:
	DD	1
	DD	$LN8@PMC_Greate
$LN8@PMC_Greate:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN7@PMC_Greate
$LN7@PMC_Greate:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_GreatestCommonDivisor_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_greatestcommondivisor.c
;	COMDAT _PMC_GreatestCommonDivisor_I_X@12
_TEXT	SEGMENT
_u_abs$ = -48						; size = 4
_u_sign$ = -33						; size = 1
_nv$ = -24						; size = 4
_result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_I_X@12 PROC			; COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __3666D5C6_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 34   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 35   :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 36   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 37   :     PMC_STATUS_CODE result;
; 38   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	eax, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], eax

; 39   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@PMC_Greate

; 40   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 41   :     char u_sign;
; 42   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	eax, DWORD PTR _u_sign$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_GET_ABS_32
	add	esp, 8
	mov	DWORD PTR _u_abs$[ebp], eax

; 43   :     if ((result = ep_uint.GreatestCommonDivisor_I_X(u_abs, nv->ABS, w)) != PMC_STATUS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _u_abs$[ebp]
	push	eax
	call	DWORD PTR _ep_uint+248
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 44   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 45   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN9@PMC_Greate:
	DD	1
	DD	$LN8@PMC_Greate
$LN8@PMC_Greate:
	DD	-33					; ffffffdfH
	DD	1
	DD	$LN7@PMC_Greate
$LN7@PMC_Greate:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	0
_PMC_GreatestCommonDivisor_I_X@12 ENDP
_TEXT	ENDS
END
