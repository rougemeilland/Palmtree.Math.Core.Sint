; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__059414E1_pmc_sint_debug@h DB 01H
__2415E362_test_op_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	TEST_Equals_I_X
PUBLIC	TEST_Equals_L_X
PUBLIC	TEST_Equals_UX_X
PUBLIC	TEST_Equals_X_I
PUBLIC	TEST_Equals_X_L
PUBLIC	TEST_Equals_X_UX
PUBLIC	TEST_Equals_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@DIPCKLML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1CG@KKLNDHML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@GDGMFIFF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@ ; `string'
PUBLIC	??_C@_1DO@PEPKKHHD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@GEGJHNOM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@CMCFOAHJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
PUBLIC	??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@ ; `string'
PUBLIC	??_C@_1DO@HDBPOJFD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ ; `string'
PUBLIC	??_C@_1DM@NGGGJAGM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_I_X DD imagerel $LN10
	DD	imagerel $LN10+512
	DD	imagerel $unwind$TEST_Equals_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_L_X DD imagerel $LN10
	DD	imagerel $LN10+513
	DD	imagerel $unwind$TEST_Equals_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_UX_X DD imagerel $LN13
	DD	imagerel $LN13+691
	DD	imagerel $unwind$TEST_Equals_UX_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_X_I DD imagerel $LN10
	DD	imagerel $LN10+512
	DD	imagerel $unwind$TEST_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_X_L DD imagerel $LN10
	DD	imagerel $LN10+513
	DD	imagerel $unwind$TEST_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_X_UX DD imagerel $LN13
	DD	imagerel $LN13+691
	DD	imagerel $unwind$TEST_Equals_X_UX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Equals_X_X DD imagerel $LN13
	DD	imagerel $LN13+697
	DD	imagerel $unwind$TEST_Equals_X_X
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DM@NGGGJAGM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@NGGGJAGM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@HDBPOJFD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@HDBPOJFD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
CONST	SEGMENT
??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CMCFOAHJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@CMCFOAHJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GEGJHNOM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@GEGJHNOM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@PEPKKHHD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@PEPKKHHD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
CONST	SEGMENT
??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@GDGMFIFF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@GDGMFIFF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KKLNDHML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@KKLNDHML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 0c7H
	DB	'0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H, 'N', 0f4H
	DB	081H, 'W0j0D0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@DIPCKLML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
CONST	SEGMENT
??_C@_1DM@DIPCKLML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH
	DB	'0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0'
	DB	'o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
CONST	SEGMENT
??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@ DB 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H
	DB	'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd'
	DB	00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ DB 'F'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_X_X DD 025054a19H
	DD	011d2322H
	DD	070160037H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_X_X$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Equals_X_X$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Equals_X_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_X_X$rtcVarDesc DD 064H
	DD	04H
	DQ	FLAT:TEST_Equals_X_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Equals_X_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_X_X$rtcName$0
	ORG $+144
TEST_Equals_X_X$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_Equals_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_X_UX DD 025054a19H
	DD	011d2322H
	DD	070160037H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_X_UX$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Equals_X_UX$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Equals_X_UX$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_X_UX$rtcVarDesc DD 064H
	DD	04H
	DQ	FLAT:TEST_Equals_X_UX$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Equals_X_UX$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_X_UX$rtcName$0
	ORG $+144
TEST_Equals_X_UX$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_Equals_X_UX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_X_L DD 025054a19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_X_L$rtcName$0 DB 075H
	DB	00H
	ORG $+6
TEST_Equals_X_L$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_X_L$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:TEST_Equals_X_L$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_X_L$rtcName$0
	ORG $+96
TEST_Equals_X_L$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_Equals_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_X_I DD 025054a19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_X_I$rtcName$0 DB 075H
	DB	00H
	ORG $+6
TEST_Equals_X_I$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_X_I$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:TEST_Equals_X_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_X_I$rtcName$0
	ORG $+96
TEST_Equals_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_Equals_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_UX_X DD 025054a19H
	DD	011d2322H
	DD	070160037H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_UX_X$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Equals_UX_X$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Equals_UX_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_UX_X$rtcVarDesc DD 064H
	DD	04H
	DQ	FLAT:TEST_Equals_UX_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Equals_UX_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_UX_X$rtcName$0
	ORG $+144
TEST_Equals_UX_X$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:TEST_Equals_UX_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_L_X DD 025054a19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_L_X$rtcName$0 DB 076H
	DB	00H
	ORG $+6
TEST_Equals_L_X$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_L_X$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:TEST_Equals_L_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_L_X$rtcName$0
	ORG $+96
TEST_Equals_L_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_Equals_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Equals_I_X DD 025054a19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Equals_I_X$rtcName$0 DB 076H
	DB	00H
	ORG $+6
TEST_Equals_I_X$rtcName$1 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	00H
	ORG $+15
TEST_Equals_I_X$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:TEST_Equals_I_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Equals_I_X$rtcName$0
	ORG $+96
TEST_Equals_I_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:TEST_Equals_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_X_X
_TEXT	SEGMENT
u$ = 8
v$ = 40
actual_w$ = 68
result$ = 100
u_result$ = 132
v_result$ = 164
tv152 = 372
tv142 = 372
tv92 = 372
tv74 = 372
tv132 = 376
tv82 = 376
tv64 = 376
__$ArrayPad$ = 384
env$ = 432
ep$ = 440
no$ = 448
u_buf$ = 456
u_buf_size$ = 464
v_buf$ = 472
v_buf_size$ = 480
desired_w$ = 488
TEST_Equals_X_X PROC					; COMDAT

; 121  : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 122  :     PMC_HANDLE_SINT u;
; 123  :     PMC_HANDLE_SINT v;
; 124  :     __int32 actual_w;
; 125  :     PMC_STATUS_CODE result;
; 126  :     PMC_STATUS_CODE u_result;
; 127  :     PMC_STATUS_CODE v_result;
; 128  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_X (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Equal
$LN5@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Equal:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 129  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN7@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Equal
$LN7@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Equal:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 130  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_X (%d.%d)", no, 3), (result = ep->Equals_X_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_X_Xの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+968]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Equal
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN10@TEST_Equal
$LN9@TEST_Equal:
	mov	DWORD PTR tv142[rbp], 0
$LN10@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@NGGGJAGM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 131  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_X (%d.%d)", no, 4), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN11@TEST_Equal
	mov	DWORD PTR tv152[rbp], 1
	jmp	SHORT $LN12@TEST_Equal
$LN11@TEST_Equal:
	mov	DWORD PTR tv152[rbp], 0
$LN12@TEST_Equal:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@LMNANGKJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv152[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 132  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 133  :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 134  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN3@TEST_Equal

; 135  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Equal:

; 136  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+408]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_X_UX
_TEXT	SEGMENT
u$ = 8
v$ = 40
actual_w$ = 68
result$ = 100
u_result$ = 132
v_result$ = 164
tv152 = 372
tv142 = 372
tv92 = 372
tv74 = 372
tv132 = 376
tv82 = 376
tv64 = 376
__$ArrayPad$ = 384
env$ = 432
ep$ = 440
no$ = 448
u_buf$ = 456
u_buf_size$ = 464
v_buf$ = 472
v_buf_size$ = 480
desired_w$ = 488
TEST_Equals_X_UX PROC					; COMDAT

; 103  : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 104  :     PMC_HANDLE_SINT u;
; 105  :     PMC_HANDLE_UINT v;
; 106  :     __int32 actual_w;
; 107  :     PMC_STATUS_CODE result;
; 108  :     PMC_STATUS_CODE u_result;
; 109  :     PMC_STATUS_CODE v_result;
; 110  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_UX (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Equal
$LN5@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Equal:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 111  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_UX (%d.%d)", no, 2), (v_result = ep->UINT_ENTRY_POINTS.FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN7@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Equal
$LN7@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Equal:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 112  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_UX (%d.%d)", no, 3), (result = ep->Equals_X_UX(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_X_UXの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+960]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Equal
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN10@TEST_Equal
$LN9@TEST_Equal:
	mov	DWORD PTR tv142[rbp], 0
$LN10@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@HDBPOJFD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 113  :     TEST_Assert(env, FormatTestLabel(L"Equals_X_UX (%d.%d)", no, 4), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN11@TEST_Equal
	mov	DWORD PTR tv152[rbp], 1
	jmp	SHORT $LN12@TEST_Equal
$LN11@TEST_Equal:
	mov	DWORD PTR tv152[rbp], 0
$LN12@TEST_Equal:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@NLHEPFBK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv152[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 114  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 115  :         ep->UINT_ENTRY_POINTS.Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN2@TEST_Equal:

; 116  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN3@TEST_Equal

; 117  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Equal:

; 118  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_X_UX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+408]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_X_L
_TEXT	SEGMENT
u$ = 8
actual_w$ = 36
result$ = 68
u_result$ = 100
tv134 = 308
tv92 = 308
tv74 = 308
tv82 = 312
tv64 = 312
__$ArrayPad$ = 320
env$ = 368
ep$ = 376
no$ = 384
u_buf$ = 392
u_buf_size$ = 400
v$ = 408
desired_w$ = 416
TEST_Equals_X_L PROC					; COMDAT

; 90   : {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 91   :     PMC_HANDLE_SINT u;
; 92   :     __int32 actual_w;
; 93   :     PMC_STATUS_CODE result;
; 94   :     PMC_STATUS_CODE u_result;
; 95   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_L (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN5@TEST_Equal
$LN4@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN5@TEST_Equal:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 96   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_L (%d.%d)", no, 2), (result = ep->Equals_X_L(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_X_Lの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+952]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_Equal
$LN6@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@CMCFOAHJ@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 97   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_L (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN8@TEST_Equal
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN9@TEST_Equal
$LN8@TEST_Equal:
	mov	DWORD PTR tv134[rbp], 0
$LN9@TEST_Equal:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@BCPLJGNF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 98   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 99   :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 100  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_X_I
_TEXT	SEGMENT
u$ = 8
actual_w$ = 36
result$ = 68
u_result$ = 100
tv134 = 308
tv92 = 308
tv74 = 308
tv82 = 312
tv64 = 312
__$ArrayPad$ = 320
env$ = 368
ep$ = 376
no$ = 384
u_buf$ = 392
u_buf_size$ = 400
v$ = 408
desired_w$ = 416
TEST_Equals_X_I PROC					; COMDAT

; 77   : {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 78   :     PMC_HANDLE_SINT u;
; 79   :     __int32 actual_w;
; 80   :     PMC_STATUS_CODE result;
; 81   :     PMC_STATUS_CODE u_result;
; 82   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_I (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN5@TEST_Equal
$LN4@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN5@TEST_Equal:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 83   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_I (%d.%d)", no, 2), (result = ep->Equals_X_I(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_X_Iの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+944]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_Equal
$LN6@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@GEGJHNOM@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 84   :     TEST_Assert(env, FormatTestLabel(L"Equals_X_I (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN8@TEST_Equal
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN9@TEST_Equal
$LN8@TEST_Equal:
	mov	DWORD PTR tv134[rbp], 0
$LN9@TEST_Equal:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@DJHBEGMK@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 85   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 86   :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 87   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_UX_X
_TEXT	SEGMENT
u$ = 8
v$ = 40
actual_w$ = 68
result$ = 100
u_result$ = 132
v_result$ = 164
tv152 = 372
tv142 = 372
tv92 = 372
tv74 = 372
tv132 = 376
tv82 = 376
tv64 = 376
__$ArrayPad$ = 384
env$ = 432
ep$ = 440
no$ = 448
u_buf$ = 456
u_buf_size$ = 464
v_buf$ = 472
v_buf_size$ = 480
desired_w$ = 488
TEST_Equals_UX_X PROC					; COMDAT

; 59   : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 60   :     PMC_HANDLE_UINT u;
; 61   :     PMC_HANDLE_SINT v;
; 62   :     __int32 actual_w;
; 63   :     PMC_STATUS_CODE result;
; 64   :     PMC_STATUS_CODE u_result;
; 65   :     PMC_STATUS_CODE v_result;
; 66   :     TEST_Assert(env, FormatTestLabel(L"Equals_UX_X (%d.%d)", no, 1), (u_result = ep->UINT_ENTRY_POINTS.FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Equal
$LN5@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Equal:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 67   :     TEST_Assert(env, FormatTestLabel(L"Equals_UX_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN7@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Equal
$LN7@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Equal:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 68   :     TEST_Assert(env, FormatTestLabel(L"Equals_UX_X (%d.%d)", no, 3), (result = ep->Equals_UX_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_UX_Xの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+936]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Equal
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN10@TEST_Equal
$LN9@TEST_Equal:
	mov	DWORD PTR tv142[rbp], 0
$LN10@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@PEPKKHHD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 69   :     TEST_Assert(env, FormatTestLabel(L"Equals_UX_X (%d.%d)", no, 4), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN11@TEST_Equal
	mov	DWORD PTR tv152[rbp], 1
	jmp	SHORT $LN12@TEST_Equal
$LN11@TEST_Equal:
	mov	DWORD PTR tv152[rbp], 0
$LN12@TEST_Equal:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CI@OFNPDABI@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv152[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 70   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 71   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 72   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN3@TEST_Equal

; 73   :         ep->UINT_ENTRY_POINTS.Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_Equal:

; 74   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_UX_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+408]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_L_X
_TEXT	SEGMENT
v$ = 8
actual_w$ = 36
result$ = 68
v_result$ = 100
tv134 = 308
tv92 = 308
tv74 = 308
tv82 = 312
tv64 = 312
__$ArrayPad$ = 320
env$ = 368
ep$ = 376
no$ = 384
u$ = 392
v_buf$ = 400
v_buf_size$ = 408
desired_w$ = 416
TEST_Equals_L_X PROC					; COMDAT

; 46   : {

$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 47   :     PMC_HANDLE_SINT v;
; 48   :     __int32 actual_w;
; 49   :     PMC_STATUS_CODE result;
; 50   :     PMC_STATUS_CODE v_result;
; 51   :     TEST_Assert(env, FormatTestLabel(L"Equals_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN4@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN5@TEST_Equal
$LN4@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN5@TEST_Equal:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@KKLNDHML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 52   :     TEST_Assert(env, FormatTestLabel(L"Equals_L_X (%d.%d)", no, 2), (result = ep->Equals_L_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_L_Xの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+928]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_Equal
$LN6@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@GDGMFIFF@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@KKLNDHML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 53   :     TEST_Assert(env, FormatTestLabel(L"Equals_I_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN8@TEST_Equal
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN9@TEST_Equal
$LN8@TEST_Equal:
	mov	DWORD PTR tv134[rbp], 0
$LN9@TEST_Equal:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 54   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 55   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 56   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_equals.c
;	COMDAT TEST_Equals_I_X
_TEXT	SEGMENT
v$ = 8
actual_w$ = 36
result$ = 68
v_result$ = 100
tv134 = 308
tv92 = 308
tv74 = 308
tv82 = 312
tv64 = 312
__$ArrayPad$ = 320
env$ = 368
ep$ = 376
no$ = 384
u$ = 392
v_buf$ = 400
v_buf_size$ = 408
desired_w$ = 416
TEST_Equals_I_X PROC					; COMDAT

; 33   : {

$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__2415E362_test_op_equals@c
	call	__CheckForDebuggerJustMyCode

; 34   :     PMC_HANDLE_SINT v;
; 35   :     __int32 actual_w;
; 36   :     PMC_STATUS_CODE result;
; 37   :     PMC_STATUS_CODE v_result;
; 38   :     TEST_Assert(env, FormatTestLabel(L"Equals_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN4@TEST_Equal
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN5@TEST_Equal
$LN4@TEST_Equal:
	mov	DWORD PTR tv74[rbp], 0
$LN5@TEST_Equal:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 39   :     TEST_Assert(env, FormatTestLabel(L"Equals_I_X (%d.%d)", no, 2), (result = ep->Equals_I_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"Equals_I_Xの復帰コードが期待通りではない(%d)", result));

	lea	r8, QWORD PTR actual_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+920]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@TEST_Equal
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN7@TEST_Equal
$LN6@TEST_Equal:
	mov	DWORD PTR tv92[rbp], 0
$LN7@TEST_Equal:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DM@DIPCKLML@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0?$PP?$LD?$PP?$PM@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 40   :     TEST_Assert(env, FormatTestLabel(L"Equals_I_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR desired_w$[rbp]
	cmp	DWORD PTR actual_w$[rbp], eax
	jne	SHORT $LN8@TEST_Equal
	mov	DWORD PTR tv134[rbp], 1
	jmp	SHORT $LN9@TEST_Equal
$LN8@TEST_Equal:
	mov	DWORD PTR tv134[rbp], 0
$LN9@TEST_Equal:
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CG@ECJOMMLD@?$AAE?$AAq?$AAu?$AAa?$AAl?$AAs?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?4@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv134[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 41   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN2@TEST_Equal

; 42   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Equal:

; 43   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Equals_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
TEST_Equals_I_X ENDP
_TEXT	ENDS
END
