; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	number_zero:BYTE:020H
COMM	number_one:BYTE:020H
COMM	number_minus_one:BYTE:020H
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
COMM	hLocalHeap:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__16A7E60D_pmc_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	AllocateHeapArea
PUBLIC	DeallocateHeapArea
PUBLIC	AllocateNumber
PUBLIC	DeallocateNumber
PUBLIC	CheckNumber
PUBLIC	DuplicateNumber
PUBLIC	Negate_Imp
PUBLIC	Initialize_Memory
PUBLIC	PMC_Dispose
PUBLIC	PMC_GetConstantValue_I
PUBLIC	AttatchNumber
PUBLIC	DetatchNumber
PUBLIC	__JustMyCode_Default
EXTRN	__imp_HeapCreate:PROC
EXTRN	__imp_HeapDestroy:PROC
EXTRN	__imp_HeapAlloc:PROC
EXTRN	__imp_HeapFree:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateHeapArea DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$AllocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateHeapArea DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$DeallocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateNumber DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$AllocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateNumber DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$DeallocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckNumber DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$CheckNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DuplicateNumber DD imagerel $LN9
	DD	imagerel $LN9+385
	DD	imagerel $unwind$DuplicateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Negate_Imp DD imagerel $LN8
	DD	imagerel $LN8+349
	DD	imagerel $unwind$Negate_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Memory DD imagerel $LN17
	DD	imagerel $LN17+384
	DD	imagerel $unwind$Initialize_Memory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Dispose DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$PMC_Dispose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GetConstantValue_I DD imagerel $LN9
	DD	imagerel $LN9+176
	DD	imagerel $unwind$PMC_GetConstantValue_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_BYTE DD imagerel _ZERO_MEMORY_BYTE
	DD	imagerel _ZERO_MEMORY_BYTE+87
	DD	imagerel $unwind$_ZERO_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_16 DD imagerel _ZERO_MEMORY_16
	DD	imagerel _ZERO_MEMORY_16+88
	DD	imagerel $unwind$_ZERO_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_32 DD imagerel _ZERO_MEMORY_32
	DD	imagerel _ZERO_MEMORY_32+87
	DD	imagerel $unwind$_ZERO_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_64 DD imagerel _ZERO_MEMORY_64
	DD	imagerel _ZERO_MEMORY_64+88
	DD	imagerel $unwind$_ZERO_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_BYTE DD imagerel _FILL_MEMORY_BYTE
	DD	imagerel _FILL_MEMORY_BYTE+96
	DD	imagerel $unwind$_FILL_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_16 DD imagerel _FILL_MEMORY_16
	DD	imagerel _FILL_MEMORY_16+98
	DD	imagerel $unwind$_FILL_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_32 DD imagerel _FILL_MEMORY_32
	DD	imagerel _FILL_MEMORY_32+95
	DD	imagerel $unwind$_FILL_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_64 DD imagerel _FILL_MEMORY_64
	DD	imagerel _FILL_MEMORY_64+98
	DD	imagerel $unwind$_FILL_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ClearNumberHeader DD imagerel ClearNumberHeader
	DD	imagerel ClearNumberHeader+409
	DD	imagerel $unwind$ClearNumberHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$FillNumberHeader DD imagerel FillNumberHeader
	DD	imagerel FillNumberHeader+458
	DD	imagerel $unwind$FillNumberHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeNumber DD imagerel InitializeNumber
	DD	imagerel InitializeNumber+568
	DD	imagerel $unwind$InitializeNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CleanUpNumber DD imagerel CleanUpNumber
	DD	imagerel CleanUpNumber+81
	DD	imagerel $unwind$CleanUpNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AttatchNumber DD imagerel $LN4
	DD	imagerel $LN4+138
	DD	imagerel $unwind$AttatchNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DetatchNumber DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$DetatchNumber
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DetatchNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AttatchNumber DD 025053301H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CleanUpNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeNumber DD 025053301H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FillNumberHeader DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ClearNumberHeader DD 025052a01H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_64 DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_32 DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_16 DD 025053401H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_BYTE DD 025053301H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_64 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_32 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_16 DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_BYTE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GetConstantValue_I DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Dispose DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Memory DD 025051e01H
	DD	010a230fH
	DD	070030035H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Negate_Imp DD 025054019H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
Negate_Imp$rtcName$0 DB 06eH
	DB	065H
	DB	077H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
Negate_Imp$rtcName$1 DB 06fH
	DB	00H
	ORG $+6
Negate_Imp$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:Negate_Imp$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:Negate_Imp$rtcName$0
	ORG $+96
Negate_Imp$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:Negate_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DuplicateNumber DD 025054019H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
DuplicateNumber$rtcName$0 DB 06eH
	DB	065H
	DB	077H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
DuplicateNumber$rtcName$1 DB 06fH
	DB	00H
	ORG $+6
DuplicateNumber$rtcVarDesc DD 068H
	DD	08H
	DQ	FLAT:DuplicateNumber$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:DuplicateNumber$rtcName$0
	ORG $+96
DuplicateNumber$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:DuplicateNumber$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateNumber DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateNumber DD 025053301H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateHeapArea DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateHeapArea DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT DetatchNumber
_TEXT	SEGMENT
p$ = 224
DetatchNumber PROC					; COMDAT

; 180  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 181  :     if (p == NULL || !p->IS_STATIC)

	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN3@DetatchNum
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+28]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 182  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 183  :     CleanUpNumber(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	CleanUpNumber
$LN1@DetatchNum:

; 184  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT AttatchNumber
_TEXT	SEGMENT
result$ = 4
p$ = 256
sign$ = 264
abs$ = 272
AttatchNumber PROC					; COMDAT

; 158  : {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 159  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	r8, QWORD PTR abs$[rbp]
	movzx	edx, BYTE PTR sign$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	InitializeNumber
	mov	DWORD PTR result$[rbp], eax

; 160  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@AttatchNum

; 161  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 162  :     p->IS_STATIC = TRUE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+28]
	or	eax, 1
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+28], eax

; 163  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 164  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT CleanUpNumber
_TEXT	SEGMENT
p$ = 224
CleanUpNumber PROC					; COMDAT

; 153  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 154  :     ep_uint.Dispose(p->ABS);

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+32

; 155  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT InitializeNumber
_TEXT	SEGMENT
tv143 = 192
tv130 = 192
tv85 = 192
p$ = 240
sign$ = 248
abs$ = 256
InitializeNumber PROC					; COMDAT

; 131  : {

	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 132  :     ClearNumberHeader(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	ClearNumberHeader

; 133  :     p->SIGNATURE1 = PMC_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax+4], 1231244656		; 49634d70H

; 134  :     p->SIGNATURE2 = PMC_SINT_SIGNATURE;

	mov	rax, QWORD PTR p$[rbp]
	mov	DWORD PTR [rax+8], 1951287667		; 744e4973H

; 135  :     p->SIGN = sign;

	mov	rax, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR sign$[rbp]
	mov	BYTE PTR [rax+24], cl

; 136  :     p->ABS = abs;

	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR abs$[rbp]
	mov	QWORD PTR [rax+16], rcx

; 137  :     p->IS_EVEN = abs->FLAGS.IS_EVEN;

	mov	rax, QWORD PTR abs$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1
	and	eax, 1
	shl	eax, 3
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -9					; fffffff7H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx], eax

; 138  :     p->IS_MINUS_ONE = sign < 0 && abs->FLAGS.IS_ONE;

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jge	SHORT $LN5@Initialize
	mov	rax, QWORD PTR abs$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@Initialize
	mov	DWORD PTR tv85[rbp], 1
	jmp	SHORT $LN6@Initialize
$LN5@Initialize:
	mov	DWORD PTR tv85[rbp], 0
$LN6@Initialize:
	mov	eax, DWORD PTR tv85[rbp]
	and	eax, 1
	shl	eax, 2
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -5					; fffffffbH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx], eax

; 139  :     p->IS_ONE = sign > 0 && abs->FLAGS.IS_ONE;

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jle	SHORT $LN7@Initialize
	mov	rax, QWORD PTR abs$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@Initialize
	mov	DWORD PTR tv130[rbp], 1
	jmp	SHORT $LN8@Initialize
$LN7@Initialize:
	mov	DWORD PTR tv130[rbp], 0
$LN8@Initialize:
	mov	eax, DWORD PTR tv130[rbp]
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx], eax

; 140  :     p->IS_POWER_OF_TWO = sign > 0 && abs->FLAGS.IS_POWER_OF_TWO;

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jle	SHORT $LN9@Initialize
	mov	rax, QWORD PTR abs$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@Initialize
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN10@Initialize
$LN9@Initialize:
	mov	DWORD PTR tv143[rbp], 0
$LN10@Initialize:
	mov	eax, DWORD PTR tv143[rbp]
	and	eax, 1
	shl	eax, 4
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -17				; ffffffefH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx], eax

; 141  :     p->IS_ZERO = abs->FLAGS.IS_ZERO;

	mov	rax, QWORD PTR abs$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	and	eax, 1
	mov	rcx, QWORD PTR p$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx], eax

; 142  : 
; 143  :     if (sign != 0 && p->IS_ZERO)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	je	SHORT $LN2@Initialize
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Initialize

; 144  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@Initialize
$LN2@Initialize:

; 145  : 
; 146  :     if (sign == 0 && !p->IS_ZERO)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jne	SHORT $LN3@Initialize
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN3@Initialize

; 147  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@Initialize
$LN3@Initialize:

; 148  : 
; 149  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 150  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT FillNumberHeader
_TEXT	SEGMENT
__p$1 = 8
__p$2 = 40
p$ = 288
FillNumberHeader PROC					; COMDAT

; 92   : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 93   : #ifdef _M_IX64
; 94   :     if (sizeof(*p) == sizeof(_UINT64_T) * 4)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@FillNumber

; 95   :     {
; 96   :         _UINT64_T* __p = (_UINT64_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$1[rbp], rax

; 97   :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 98   :         __p[1] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 99   :         __p[2] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 100  :         __p[3] = DEFAULT_MEMORY_DATA;

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx+rax], rdx

; 101  :     }

	jmp	$LN3@FillNumber
$LN2@FillNumber:

; 102  :     else
; 103  :     {
; 104  : #endif
; 105  :         if (sizeof(*p) == sizeof(_UINT32_T) * 6)

	xor	eax, eax
	test	eax, eax
	je	$LN4@FillNumber

; 106  :         {
; 107  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$2[rbp], rax

; 108  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 109  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 110  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 111  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 112  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 113  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], -858993460		; ccccccccH

; 114  :         }

	jmp	SHORT $LN5@FillNumber
$LN4@FillNumber:

; 115  : #ifdef _M_IX64
; 116  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@FillNumber

; 117  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));

	mov	r8d, 4
	mov	rdx, -3689348814741910324		; ccccccccccccccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_64
	jmp	SHORT $LN7@FillNumber
$LN6@FillNumber:

; 118  : #endif
; 119  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@FillNumber

; 120  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	mov	r8d, 8
	mov	edx, -858993460				; ccccccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_32
	jmp	SHORT $LN9@FillNumber
$LN8@FillNumber:

; 121  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN10@FillNumber

; 122  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	mov	r8d, 16
	mov	dx, 52428				; 0000ccccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_16
	jmp	SHORT $LN11@FillNumber
$LN10@FillNumber:

; 123  :         else
; 124  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	mov	r8d, 32					; 00000020H
	mov	dl, 204					; 000000ccH
	mov	rcx, QWORD PTR p$[rbp]
	call	_FILL_MEMORY_BYTE
$LN11@FillNumber:
$LN9@FillNumber:
$LN7@FillNumber:
$LN5@FillNumber:
$LN3@FillNumber:

; 125  : #ifdef _M_IX64
; 126  :     }
; 127  : #endif
; 128  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT ClearNumberHeader
_TEXT	SEGMENT
__p$1 = 8
__p$2 = 40
p$ = 288
ClearNumberHeader PROC					; COMDAT

; 53   : {

	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 54   : #ifdef _M_IX64
; 55   :     if (sizeof(*p) == sizeof(_UINT64_T) * 4)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@ClearNumbe

; 56   :     {
; 57   :         _UINT64_T* __p = (_UINT64_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$1[rbp], rax

; 58   :         __p[0] = 0;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 59   :         __p[1] = 0;

	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 60   :         __p[2] = 0;

	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 61   :         __p[3] = 0;

	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$1[rbp]
	mov	QWORD PTR [rcx+rax], 0

; 62   :     }

	jmp	$LN3@ClearNumbe
$LN2@ClearNumbe:

; 63   :     else
; 64   :     {
; 65   : #endif
; 66   :         if (sizeof(*p) == sizeof(_UINT32_T) * 6)

	xor	eax, eax
	test	eax, eax
	je	$LN4@ClearNumbe

; 67   :         {
; 68   :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR __p$2[rbp], rax

; 69   :             __p[0] = 0;

	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 70   :             __p[1] = 0;

	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 71   :             __p[2] = 0;

	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 72   :             __p[3] = 0;

	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 73   :             __p[4] = 0;

	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 74   :             __p[5] = 0;

	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR __p$2[rbp]
	mov	DWORD PTR [rcx+rax], 0

; 75   :         }

	jmp	SHORT $LN5@ClearNumbe
$LN4@ClearNumbe:

; 76   : #ifdef _M_IX64
; 77   :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN6@ClearNumbe

; 78   :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));

	mov	edx, 4
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_64
	jmp	SHORT $LN7@ClearNumbe
$LN6@ClearNumbe:

; 79   : #endif
; 80   :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@ClearNumbe

; 81   :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	mov	edx, 8
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_32
	jmp	SHORT $LN9@ClearNumbe
$LN8@ClearNumbe:

; 82   :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN10@ClearNumbe

; 83   :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	mov	edx, 16
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_16
	jmp	SHORT $LN11@ClearNumbe
$LN10@ClearNumbe:

; 84   :         else
; 85   :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR p$[rbp]
	call	_ZERO_MEMORY_BYTE
$LN11@ClearNumbe:
$LN9@ClearNumbe:
$LN7@ClearNumbe:
$LN5@ClearNumbe:
$LN3@ClearNumbe:

; 86   : #ifdef _M_IX64
; 87   :     }
; 88   : #endif
; 89   : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_64
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_64 PROC					; COMDAT

; 154  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 155  :         __stosq(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 156  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_32
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_32 PROC					; COMDAT

; 148  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	eax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosd

; 150  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_16
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_16 PROC					; COMDAT

; 143  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 144  :         __stosw(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	movzx	eax, WORD PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosw

; 145  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
x$ = 232
count$ = 240
_FILL_MEMORY_BYTE PROC					; COMDAT

; 138  :     {

	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 139  :         __stosb(d, x, count);

	mov	rdi, QWORD PTR d$[rbp]
	movzx	eax, BYTE PTR x$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 140  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_64
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_64 PROC					; COMDAT

; 104  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 105  :         __stosq(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosq

; 106  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_32
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_32 PROC					; COMDAT

; 98   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosd

; 100  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_16
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_16 PROC					; COMDAT

; 93   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 94   :         __stosw(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosw

; 95   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 89   :         __stosb(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 90   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT PMC_GetConstantValue_I
_TEXT	SEGMENT
tv64 = 192
type$ = 240
o$ = 248
PMC_GetConstantValue_I PROC				; COMDAT

; 270  : {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 271  :     switch (type)

	mov	eax, DWORD PTR type$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 1
	je	SHORT $LN4@PMC_GetCon
	cmp	DWORD PTR tv64[rbp], 2
	je	SHORT $LN5@PMC_GetCon
	cmp	DWORD PTR tv64[rbp], 3
	je	SHORT $LN6@PMC_GetCon
	jmp	SHORT $LN7@PMC_GetCon
$LN4@PMC_GetCon:

; 272  :     {
; 273  :     case PMC_CONSTANT_ZERO:
; 274  :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 275  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 276  :     case PMC_CONSTANT_ONE:
; 277  :         *o = (PMC_HANDLE_SINT)&number_one;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 278  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 279  :     case PMC_CONSTANT_MINUS_ONE:
; 280  :         *o = (PMC_HANDLE_SINT)&number_minus_one;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_minus_one
	mov	QWORD PTR [rax], rcx

; 281  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_GetCon
$LN7@PMC_GetCon:

; 282  :     default:
; 283  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_GetCon:

; 284  :     }
; 285  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
PMC_GetConstantValue_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT PMC_Dispose
_TEXT	SEGMENT
np$ = 8
p$ = 256
PMC_Dispose PROC					; COMDAT

; 288  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 289  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 290  :     DeallocateNumber(np);

	mov	rcx, QWORD PTR np$[rbp]
	call	DeallocateNumber

; 291  :     return;
; 292  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_Dispose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT Initialize_Memory
_TEXT	SEGMENT
result$ = 4
number_unsigned_zero_ok$ = 36
number_unsigned_one_ok$ = 68
number_zero_ok$ = 100
number_one_ok$ = 132
number_minus_one_ok$ = 164
Initialize_Memory PROC					; COMDAT

; 295  : {

$LN17:
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 296  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR result$[rbp], 0

; 297  : 
; 298  :     BOOL number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR number_unsigned_zero_ok$[rbp], 1

; 299  :     BOOL number_unsigned_one_ok = TRUE;

	mov	DWORD PTR number_unsigned_one_ok$[rbp], 1

; 300  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR number_zero_ok$[rbp], 1

; 301  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR number_one_ok$[rbp], 1

; 302  :     BOOL number_minus_one_ok = TRUE;

	mov	DWORD PTR number_minus_one_ok$[rbp], 1

; 303  : 
; 304  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN2@Initialize

; 305  :     {
; 306  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ZERO, &uint_number_zero)) == PMC_STATUS_OK)

	lea	rdx, OFFSET FLAT:uint_number_zero
	mov	ecx, 1
	call	QWORD PTR ep_uint+40
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN3@Initialize

; 307  :             number_unsigned_zero_ok = TRUE;

	mov	DWORD PTR number_unsigned_zero_ok$[rbp], 1
$LN3@Initialize:
$LN2@Initialize:

; 308  :     }
; 309  : 
; 310  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN4@Initialize

; 311  :     {
; 312  :         if ((result = ep_uint.GetConstantValue_I(PMC_CONSTANT_ONE, &uint_number_one)) == PMC_STATUS_OK)

	lea	rdx, OFFSET FLAT:uint_number_one
	mov	ecx, 2
	call	QWORD PTR ep_uint+40
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN5@Initialize

; 313  :             number_unsigned_one_ok = TRUE;

	mov	DWORD PTR number_unsigned_one_ok$[rbp], 1
$LN5@Initialize:
$LN4@Initialize:

; 314  :     }
; 315  : 
; 316  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN6@Initialize

; 317  :     {
; 318  :         if ((result = AttatchNumber(&number_zero, 0, uint_number_zero)) == PMC_STATUS_OK)

	mov	r8, QWORD PTR uint_number_zero
	xor	edx, edx
	lea	rcx, OFFSET FLAT:number_zero
	call	AttatchNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN7@Initialize

; 319  :             number_zero_ok = TRUE;

	mov	DWORD PTR number_zero_ok$[rbp], 1
$LN7@Initialize:
$LN6@Initialize:

; 320  :     }
; 321  : 
; 322  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN8@Initialize

; 323  :     {
; 324  :         if ((result = AttatchNumber(&number_one, 1, uint_number_one)) == PMC_STATUS_OK)

	mov	r8, QWORD PTR uint_number_one
	mov	dl, 1
	lea	rcx, OFFSET FLAT:number_one
	call	AttatchNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@Initialize

; 325  :             number_one_ok = TRUE;

	mov	DWORD PTR number_one_ok$[rbp], 1
$LN9@Initialize:
$LN8@Initialize:

; 326  :     }
; 327  : 
; 328  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN10@Initialize

; 329  :     {
; 330  :         if ((result = AttatchNumber(&number_minus_one, -1, uint_number_one)) == PMC_STATUS_OK)

	mov	r8, QWORD PTR uint_number_one
	mov	dl, -1
	lea	rcx, OFFSET FLAT:number_minus_one
	call	AttatchNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN11@Initialize

; 331  :             number_minus_one_ok = TRUE;

	mov	DWORD PTR number_minus_one_ok$[rbp], 1
$LN11@Initialize:
$LN10@Initialize:

; 332  :     }
; 333  : 
; 334  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@Initialize

; 335  :     {
; 336  :         if (number_zero_ok)

	cmp	DWORD PTR number_zero_ok$[rbp], 0
	je	SHORT $LN13@Initialize

; 337  :             DetatchNumber(&number_zero);

	lea	rcx, OFFSET FLAT:number_zero
	call	DetatchNumber
$LN13@Initialize:

; 338  :         if (number_one_ok)

	cmp	DWORD PTR number_one_ok$[rbp], 0
	je	SHORT $LN14@Initialize

; 339  :             DetatchNumber(&number_one);

	lea	rcx, OFFSET FLAT:number_one
	call	DetatchNumber
$LN14@Initialize:

; 340  :         if (number_minus_one_ok)

	cmp	DWORD PTR number_minus_one_ok$[rbp], 0
	je	SHORT $LN15@Initialize

; 341  :             DetatchNumber(&number_minus_one);

	lea	rcx, OFFSET FLAT:number_minus_one
	call	DetatchNumber
$LN15@Initialize:
$LN12@Initialize:

; 342  :     }
; 343  : 
; 344  :     return (result);

	mov	eax, DWORD PTR result$[rbp]

; 345  : }

	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT Negate_Imp
_TEXT	SEGMENT
result$ = 4
new_abs$ = 40
o$ = 72
__$ArrayPad$ = 280
x$ = 320
op$ = 328
Negate_Imp PROC						; COMDAT

; 239  : {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 240  :     if (x->IS_ZERO)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Negate_Imp

; 241  :     {
; 242  :         *op = &number_zero;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 243  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN2@Negate_Imp:

; 244  :     }
; 245  :     if (x->IS_ONE)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@Negate_Imp

; 246  :     {
; 247  :         *op = &number_minus_one;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_minus_one
	mov	QWORD PTR [rax], rcx

; 248  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@Negate_Imp
$LN3@Negate_Imp:

; 249  :     }
; 250  :     if (x->IS_MINUS_ONE)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@Negate_Imp

; 251  :     {
; 252  :         *op = &number_one;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 253  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@Negate_Imp
$LN4@Negate_Imp:

; 254  :     }
; 255  :     PMC_STATUS_CODE result;
; 256  :     PMC_HANDLE_UINT new_abs;
; 257  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR new_abs$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+80
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@Negate_Imp

; 258  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@Negate_Imp
$LN5@Negate_Imp:

; 259  :     NUMBER_HEADER* o;
; 260  :     if ((result = AllocateNumber(&o, -x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR x$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	neg	eax
	mov	r8, QWORD PTR new_abs$[rbp]
	movzx	edx, al
	lea	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@Negate_Imp

; 261  :     {
; 262  :         ep_uint.Dispose(new_abs);

	mov	rcx, QWORD PTR new_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 263  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@Negate_Imp
$LN6@Negate_Imp:

; 264  :     }
; 265  :     *op = o;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	mov	QWORD PTR [rax], rcx

; 266  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Negate_Imp:

; 267  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:Negate_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
Negate_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT DuplicateNumber
_TEXT	SEGMENT
result$ = 4
new_abs$ = 40
o$ = 72
__$ArrayPad$ = 280
x$ = 320
op$ = 328
DuplicateNumber PROC					; COMDAT

; 203  : {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 204  :     if (x->IS_STATIC)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax+28]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@DuplicateN

; 205  :     {
; 206  :         *op = x;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	mov	QWORD PTR [rax], rcx

; 207  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN2@DuplicateN:

; 208  :     }
; 209  :     if (x->IS_ZERO)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@DuplicateN

; 210  :     {
; 211  :         *op = &number_zero;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx

; 212  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN3@DuplicateN:

; 213  :     }
; 214  :     if (x->IS_ONE)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@DuplicateN

; 215  :     {
; 216  :         *op = &number_one;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_one
	mov	QWORD PTR [rax], rcx

; 217  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DuplicateN
$LN4@DuplicateN:

; 218  :     }
; 219  :     if (x->IS_MINUS_ONE)

	mov	rax, QWORD PTR x$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@DuplicateN

; 220  :     {
; 221  :         *op = &number_minus_one;

	mov	rax, QWORD PTR op$[rbp]
	lea	rcx, OFFSET FLAT:number_minus_one
	mov	QWORD PTR [rax], rcx

; 222  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN5@DuplicateN:

; 223  :     }
; 224  :     PMC_STATUS_CODE result;
; 225  :     PMC_HANDLE_UINT new_abs;
; 226  :     if ((result = ep_uint.Clone_X(x->ABS, &new_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR new_abs$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+80
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@DuplicateN

; 227  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@DuplicateN
$LN6@DuplicateN:

; 228  :     NUMBER_HEADER* o;
; 229  :     if ((result = AllocateNumber(&o, x->SIGN, new_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR new_abs$[rbp]
	mov	rax, QWORD PTR x$[rbp]
	movzx	edx, BYTE PTR [rax+24]
	lea	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@DuplicateN

; 230  :     {
; 231  :         ep_uint.Dispose(new_abs);

	mov	rcx, QWORD PTR new_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 232  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@DuplicateN
$LN7@DuplicateN:

; 233  :     }
; 234  :     *op = o;

	mov	rax, QWORD PTR op$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	mov	QWORD PTR [rax], rcx

; 235  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 236  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:DuplicateNumber$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT CheckNumber
_TEXT	SEGMENT
p$ = 224
CheckNumber PROC					; COMDAT

; 196  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 197  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_SINT_SIGNATURE)

	mov	rax, QWORD PTR p$[rbp]
	cmp	DWORD PTR [rax+4], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	rax, QWORD PTR p$[rbp]
	cmp	DWORD PTR [rax+8], 1951287667		; 744e4973H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 198  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 199  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 200  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT DeallocateNumber
_TEXT	SEGMENT
p$ = 224
DeallocateNumber PROC					; COMDAT

; 187  : {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 188  :     if (p == NULL || p->IS_STATIC)

	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN3@Deallocate
	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+28]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 189  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 190  :     CleanUpNumber(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	CleanUpNumber

; 191  :     FillNumberHeader(p);

	mov	rcx, QWORD PTR p$[rbp]
	call	FillNumberHeader

; 192  :     HeapFree(hLocalHeap, 0, p);

	mov	r8, QWORD PTR p$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapFree
$LN1@Deallocate:

; 193  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT AllocateNumber
_TEXT	SEGMENT
p$ = 8
result$ = 36
pp$ = 288
sign$ = 296
abs$ = 304
AllocateNumber PROC					; COMDAT

; 167  : {

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 168  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	r8d, 32					; 00000020H
	mov	edx, 8
	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapAlloc
	mov	QWORD PTR p$[rbp], rax

; 169  :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN2@AllocateNu

; 170  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 171  :     PMC_STATUS_CODE result = InitializeNumber(p, sign, abs);

	mov	r8, QWORD PTR abs$[rbp]
	movzx	edx, BYTE PTR sign$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	InitializeNumber
	mov	DWORD PTR result$[rbp], eax

; 172  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@AllocateNu

; 173  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 174  :     p->IS_STATIC = FALSE;

	mov	rax, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rax+28]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR p$[rbp]
	mov	DWORD PTR [rcx+28], eax

; 175  :     *pp = p;

	mov	rax, QWORD PTR pp$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax], rcx

; 176  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 177  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT DeallocateHeapArea
_TEXT	SEGMENT
DeallocateHeapArea PROC					; COMDAT

; 356  : {

$LN4:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 357  :     if (hLocalHeap != NULL)

	cmp	QWORD PTR hLocalHeap, 0
	je	SHORT $LN2@Deallocate

; 358  :     {
; 359  :         HeapDestroy(hLocalHeap);

	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapDestroy

; 360  :         hLocalHeap = NULL;

	mov	QWORD PTR hLocalHeap, 0
$LN2@Deallocate:

; 361  :     }
; 362  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_memory.c
;	COMDAT AllocateHeapArea
_TEXT	SEGMENT
AllocateHeapArea PROC					; COMDAT

; 348  : {

$LN4:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__16A7E60D_pmc_memory@c
	call	__CheckForDebuggerJustMyCode

; 349  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	xor	r8d, r8d
	mov	edx, 4096				; 00001000H
	xor	ecx, ecx
	call	QWORD PTR __imp_HeapCreate
	mov	QWORD PTR hLocalHeap, rax

; 350  :     if (hLocalHeap == NULL)

	cmp	QWORD PTR hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 351  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 352  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 353  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
AllocateHeapArea ENDP
_TEXT	ENDS
END
