; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__B76D73AB_pmc_bytes@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_FromByteArray
PUBLIC	PMC_ToByteArray
PUBLIC	__JustMyCode_Default
EXTRN	AllocateNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_FromByteArray DD imagerel $LN8
	DD	imagerel $LN8+281
	DD	imagerel $unwind$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ToByteArray DD imagerel $LN6
	DD	imagerel $LN6+194
	DD	imagerel $unwind$PMC_ToByteArray
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ToByteArray DD 035053901H
	DD	011d3322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_FromByteArray DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_FromByteArray$rtcName$0 DB 06fH
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+1
PMC_FromByteArray$rtcName$1 DB 06fH
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+2
PMC_FromByteArray$rtcName$2 DB 06eH
	DB	06fH
	DB	00H
	ORG $+5
PMC_FromByteArray$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:PMC_FromByteArray$rtcVarDesc
	ORG $+8
PMC_FromByteArray$rtcVarDesc DD 088H
	DD	08H
	DQ	FLAT:PMC_FromByteArray$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:PMC_FromByteArray$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:PMC_FromByteArray$rtcName$0
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_bytes.c
;	COMDAT PMC_ToByteArray
_TEXT	SEGMENT
np$ = 8
result$ = 36
p$ = 288
buffer$ = 296
buffer_size$ = 304
count$ = 312
PMC_ToByteArray PROC					; COMDAT

; 54   : {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	lea	rcx, OFFSET FLAT:__B76D73AB_pmc_bytes@c
	call	__CheckForDebuggerJustMyCode

; 55   :     if (p == NULL)

	cmp	QWORD PTR p$[rbp], 0
	jne	SHORT $LN2@PMC_ToByte

; 56   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 57   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 58   :     PMC_STATUS_CODE result;
; 59   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_ToByte

; 60   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ToByte
$LN3@PMC_ToByte:

; 61   :     if ((result = ep_uint.ToByteArrayForSINT(np->SIGN, np->ABS, buffer, buffer_size, count)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR buffer_size$[rbp]
	mov	r8, QWORD PTR buffer$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR np$[rbp]
	movzx	ecx, BYTE PTR [rax+24]
	call	QWORD PTR ep_uint+72
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_ToByte

; 62   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_ToByte
$LN4@PMC_ToByte:

; 63   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ToByte:

; 64   : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_ToByteArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_bytes.c
;	COMDAT PMC_FromByteArray
_TEXT	SEGMENT
result$ = 4
o_sign$ = 36
o_abs$ = 72
no$ = 104
__$ArrayPad$ = 312
buffer$ = 352
count$ = 360
o$ = 368
PMC_FromByteArray PROC					; COMDAT

; 31   : {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B76D73AB_pmc_bytes@c
	call	__CheckForDebuggerJustMyCode

; 32   :     PMC_STATUS_CODE result;
; 33   :     if (buffer == NULL)

	cmp	QWORD PTR buffer$[rbp], 0
	jne	SHORT $LN2@PMC_FromBy

; 34   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_FromBy
$LN2@PMC_FromBy:

; 35   :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN3@PMC_FromBy

; 36   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_FromBy
$LN3@PMC_FromBy:

; 37   :     if (count < 1)

	cmp	QWORD PTR count$[rbp], 1
	jae	SHORT $LN4@PMC_FromBy

; 38   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@PMC_FromBy
$LN4@PMC_FromBy:

; 39   :     char o_sign;
; 40   :     PMC_HANDLE_UINT o_abs;
; 41   :     if ((result = ep_uint.FromByteArrayForSINT(buffer, count, &o_sign, &o_abs)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR o_abs$[rbp]
	lea	r8, QWORD PTR o_sign$[rbp]
	mov	rdx, QWORD PTR count$[rbp]
	mov	rcx, QWORD PTR buffer$[rbp]
	call	QWORD PTR ep_uint+64
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_FromBy

; 42   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_FromBy
$LN5@PMC_FromBy:

; 43   :     NUMBER_HEADER* no;
; 44   :     if ((result = AllocateNumber(&no, o_sign, o_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR o_abs$[rbp]
	movzx	edx, BYTE PTR o_sign$[rbp]
	lea	rcx, QWORD PTR no$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_FromBy

; 45   :     {
; 46   :         ep_uint.Dispose(o_abs);

	mov	rcx, QWORD PTR o_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 47   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_FromBy
$LN6@PMC_FromBy:

; 48   :     }
; 49   :     *o = (PMC_HANDLE_SINT)no;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR no$[rbp]
	mov	QWORD PTR [rax], rcx

; 50   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_FromBy:

; 51   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_FromByteArray$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_FromByteArray ENDP
_TEXT	ENDS
END
