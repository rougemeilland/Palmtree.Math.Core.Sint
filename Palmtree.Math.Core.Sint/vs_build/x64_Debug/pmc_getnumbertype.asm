; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__C5291EA6_pmc_getnumbertype@c DB 01H
msvcjmc	ENDS
PUBLIC	IsZero_UINT
PUBLIC	PMC_GetNumberType_X
PUBLIC	Initialize_GetPropertyValue
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$IsZero_UINT DD imagerel $LN6
	DD	imagerel $LN6+204
	DD	imagerel $unwind$IsZero_UINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GetNumberType_X DD imagerel $LN11
	DD	imagerel $LN11+296
	DD	imagerel $unwind$PMC_GetNumberType_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_GetPropertyValue DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$Initialize_GetPropertyValue
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_GetPropertyValue DD 025052a01H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GetNumberType_X DD 025052f01H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IsZero_UINT DD 025054019H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
IsZero_UINT$rtcName$0 DB 074H
	DB	079H
	DB	070H
	DB	065H
	DB	00H
	ORG $+11
IsZero_UINT$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:IsZero_UINT$rtcName$0
	ORG $+48
IsZero_UINT$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:IsZero_UINT$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_getnumbertype.c
;	COMDAT Initialize_GetPropertyValue
_TEXT	SEGMENT
feature$ = 224
Initialize_GetPropertyValue PROC			; COMDAT

; 66   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__C5291EA6_pmc_getnumbertype@c
	call	__CheckForDebuggerJustMyCode

; 67   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 68   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
Initialize_GetPropertyValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_getnumbertype.c
;	COMDAT PMC_GetNumberType_X
_TEXT	SEGMENT
result$ = 4
nx$ = 40
value$ = 68
x$ = 320
o$ = 328
PMC_GetNumberType_X PROC				; COMDAT

; 41   : {

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__C5291EA6_pmc_getnumbertype@c
	call	__CheckForDebuggerJustMyCode

; 42   :     if (x == NULL)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@PMC_GetNum

; 43   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_GetNum
$LN2@PMC_GetNum:

; 44   :     if (o == NULL)

	cmp	QWORD PTR o$[rbp], 0
	jne	SHORT $LN3@PMC_GetNum

; 45   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_GetNum
$LN3@PMC_GetNum:

; 46   :     PMC_STATUS_CODE result;
; 47   :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	rax, QWORD PTR x$[rbp]
	mov	QWORD PTR nx$[rbp], rax

; 48   :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nx$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_GetNum

; 49   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_GetNum
$LN4@PMC_GetNum:

; 50   :     PMC_NUMBER_TYPE_CODE value = 0;

	mov	DWORD PTR value$[rbp], 0

; 51   :     if (nx->IS_ZERO)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@PMC_GetNum

; 52   :         value |= 0x01;

	mov	eax, DWORD PTR value$[rbp]
	or	eax, 1
	mov	DWORD PTR value$[rbp], eax
$LN5@PMC_GetNum:

; 53   :     if (nx->IS_ONE)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_GetNum

; 54   :         value |= 0x02;

	mov	eax, DWORD PTR value$[rbp]
	or	eax, 2
	mov	DWORD PTR value$[rbp], eax
$LN6@PMC_GetNum:

; 55   :     if (nx->IS_MINUS_ONE)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@PMC_GetNum

; 56   :         value |= 0x04;

	mov	eax, DWORD PTR value$[rbp]
	or	eax, 4
	mov	DWORD PTR value$[rbp], eax
$LN7@PMC_GetNum:

; 57   :     if (nx->IS_EVEN)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 4
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_GetNum

; 58   :         value |= 0x08;

	mov	eax, DWORD PTR value$[rbp]
	or	eax, 8
	mov	DWORD PTR value$[rbp], eax
$LN8@PMC_GetNum:

; 59   :     if (nx->IS_POWER_OF_TWO)

	mov	rax, QWORD PTR nx$[rbp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 5
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@PMC_GetNum

; 60   :         value |= 0x10;

	mov	eax, DWORD PTR value$[rbp]
	or	eax, 16
	mov	DWORD PTR value$[rbp], eax
$LN9@PMC_GetNum:

; 61   :     *o = value;

	mov	rax, QWORD PTR o$[rbp]
	mov	ecx, DWORD PTR value$[rbp]
	mov	DWORD PTR [rax], ecx

; 62   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_GetNum:

; 63   : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_GetNumberType_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_getnumbertype.c
;	COMDAT IsZero_UINT
_TEXT	SEGMENT
result$ = 4
type$ = 36
tv70 = 244
__$ArrayPad$ = 248
x$ = 288
is_zero$ = 296
IsZero_UINT PROC					; COMDAT

; 31   : {

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C5291EA6_pmc_getnumbertype@c
	call	__CheckForDebuggerJustMyCode

; 32   :     PMC_STATUS_CODE result;
; 33   :     PMC_NUMBER_TYPE_CODE type;
; 34   :     if ((result = ep_uint.GetNumberType_X(x, &type)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR type$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	call	QWORD PTR ep_uint+40
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@IsZero_UIN

; 35   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@IsZero_UIN
$LN2@IsZero_UIN:

; 36   :     *is_zero = (type & PMC_NUMBER_TYPE_IS_ZERO) ? 1 : 0;

	mov	eax, DWORD PTR type$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@IsZero_UIN
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN5@IsZero_UIN
$LN4@IsZero_UIN:
	mov	DWORD PTR tv70[rbp], 0
$LN5@IsZero_UIN:
	mov	rax, QWORD PTR is_zero$[rbp]
	movzx	ecx, BYTE PTR tv70[rbp]
	mov	BYTE PTR [rax], cl

; 37   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@IsZero_UIN:

; 38   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:IsZero_UINT$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
IsZero_UINT ENDP
_TEXT	ENDS
END
