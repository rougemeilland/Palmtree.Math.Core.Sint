; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	ep_uint:BYTE:0230H
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__331E732B_malloc@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__A52C17B2_pmc_initialize@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_SINT_Initialize
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ ; `string'
PUBLIC	??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@		; `string'
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	Initialize_Memory:PROC
EXTRN	PMC_GetStatisticsInfo:PROC
EXTRN	PMC_From_I:PROC
EXTRN	PMC_From_L:PROC
EXTRN	PMC_Dispose:PROC
EXTRN	PMC_GetNumberType_X:PROC
EXTRN	PMC_GetConstantValue_I:PROC
EXTRN	PMC_FromByteArray:PROC
EXTRN	PMC_ToByteArray:PROC
EXTRN	PMC_Clone_X:PROC
EXTRN	PMC_To_X_I:PROC
EXTRN	PMC_To_X_L:PROC
EXTRN	PMC_Negate_X:PROC
EXTRN	PMC_Add_I_X:PROC
EXTRN	PMC_Add_L_X:PROC
EXTRN	PMC_Add_UX_X:PROC
EXTRN	PMC_Add_X_I:PROC
EXTRN	PMC_Add_X_L:PROC
EXTRN	PMC_Add_X_UX:PROC
EXTRN	PMC_Add_X_X:PROC
EXTRN	PMC_Subtruct_I_X:PROC
EXTRN	PMC_Subtruct_L_X:PROC
EXTRN	PMC_Subtruct_UX_X:PROC
EXTRN	PMC_Subtruct_X_I:PROC
EXTRN	PMC_Subtruct_X_L:PROC
EXTRN	PMC_Subtruct_X_UX:PROC
EXTRN	PMC_Subtruct_X_X:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
_BSS	SEGMENT
entry_points DB	0300H DUP (?)
hLib_UINT DQ	01H DUP (?)
fp_PMC_UINT_Initialize DQ 01H DUP (?)
initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_SINT_Initialize DD imagerel $LN8
	DD	imagerel $LN8+569
	DD	imagerel $unwind$PMC_SINT_Initialize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_BYTE DD imagerel _COPY_MEMORY_BYTE
	DD	imagerel _COPY_MEMORY_BYTE+99
	DD	imagerel $unwind$_COPY_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_32 DD imagerel _COPY_MEMORY_32
	DD	imagerel _COPY_MEMORY_32+100
	DD	imagerel $unwind$_COPY_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_64 DD imagerel _COPY_MEMORY_64
	DD	imagerel _COPY_MEMORY_64+100
	DD	imagerel $unwind$_COPY_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CopyUINTEntryPointStructure DD imagerel CopyUINTEntryPointStructure
	DD	imagerel CopyUINTEntryPointStructure+162
	DD	imagerel $unwind$CopyUINTEntryPointStructure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadUINTLIbrary DD imagerel LoadUINTLIbrary
	DD	imagerel LoadUINTLIbrary+156
	DD	imagerel $unwind$LoadUINTLIbrary
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
CONST	SEGMENT
??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@ DB 'PMC_UINT_Initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
CONST	SEGMENT
??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ DB 'Palmtree.Math.Cor'
	DB	'e.Uint.dll', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadUINTLIbrary DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CopyUINTEntryPointStructure DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_64 DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_32 DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_BYTE DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_SINT_Initialize DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT LoadUINTLIbrary
_TEXT	SEGMENT
LoadUINTLIbrary PROC					; COMDAT

; 61   : {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 62   :     hLib_UINT = LoadLibraryA("Palmtree.Math.Core.Uint.dll");

	lea	rcx, OFFSET FLAT:??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR hLib_UINT, rax

; 63   :     if (hLib_UINT == NULL)

	cmp	QWORD PTR hLib_UINT, 0
	jne	SHORT $LN2@LoadUINTLI

; 64   :     {
; 65   :         fp_PMC_UINT_Initialize = NULL;

	mov	QWORD PTR fp_PMC_UINT_Initialize, 0

; 66   :         return;

	jmp	SHORT $LN1@LoadUINTLI
$LN2@LoadUINTLI:

; 67   :     }
; 68   :     fp_PMC_UINT_Initialize = (void*)GetProcAddress(hLib_UINT, "PMC_UINT_Initialize");

	lea	rdx, OFFSET FLAT:??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
	mov	rcx, QWORD PTR hLib_UINT
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR fp_PMC_UINT_Initialize, rax

; 69   :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	QWORD PTR fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN3@LoadUINTLI

; 70   :     {
; 71   :         FreeLibrary(hLib_UINT);

	mov	rcx, QWORD PTR hLib_UINT
	call	QWORD PTR __imp_FreeLibrary

; 72   :         hLib_UINT = NULL;

	mov	QWORD PTR hLib_UINT, 0
$LN3@LoadUINTLI:
$LN1@LoadUINTLI:

; 73   :         return;
; 74   :     }
; 75   :     return;
; 76   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
LoadUINTLIbrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT CopyUINTEntryPointStructure
_TEXT	SEGMENT
d$ = 224
s$ = 232
CopyUINTEntryPointStructure PROC			; COMDAT

; 42   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 43   : #ifdef _M_IX86
; 44   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)
; 45   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));
; 46   :     else
; 47   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));
; 48   : #elif defined(_M_IX64)
; 49   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@CopyUINTEn

; 50   :         _COPY_MEMORY_64((_UINT64_T*)d, (_UINT64_T*)s, sizeof(*s) / sizeof(_UINT64_T));

	mov	r8d, 70					; 00000046H
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_64
	jmp	SHORT $LN3@CopyUINTEn
$LN2@CopyUINTEn:

; 51   :     else if (sizeof(*s) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN4@CopyUINTEn

; 52   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));

	mov	r8d, 140				; 0000008cH
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_32
	jmp	SHORT $LN5@CopyUINTEn
$LN4@CopyUINTEn:

; 53   :     else
; 54   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));

	mov	r8d, 560				; 00000230H
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_BYTE
$LN5@CopyUINTEn:
$LN3@CopyUINTEn:

; 55   : #else
; 56   : #error unknown platform
; 57   : #endif
; 58   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
CopyUINTEntryPointStructure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_64
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_64 PROC					; COMDAT

; 54   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 55   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 56   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_32
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_32 PROC					; COMDAT

; 48   :     {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 49   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR count$[rbp]
	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	ecx, eax
	rep movsd

; 50   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_BYTE PROC					; COMDAT

; 43   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsb

; 45   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT PMC_SINT_Initialize
_TEXT	SEGMENT
ep$ = 8
config$ = 256
PMC_SINT_Initialize PROC				; COMDAT

; 79   : {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 80   :     if (hLib_UINT == NULL)

	cmp	QWORD PTR hLib_UINT, 0
	jne	SHORT $LN2@PMC_SINT_I

; 81   :         LoadUINTLIbrary();

	call	LoadUINTLIbrary
$LN2@PMC_SINT_I:

; 82   :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	QWORD PTR fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN3@PMC_SINT_I

; 83   :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN3@PMC_SINT_I:

; 84   :     PMC_UINT_ENTRY_POINTS* ep = (*fp_PMC_UINT_Initialize)(config);

	mov	rcx, QWORD PTR config$[rbp]
	call	QWORD PTR fp_PMC_UINT_Initialize
	mov	QWORD PTR ep$[rbp], rax

; 85   :     if (ep == NULL)

	cmp	QWORD PTR ep$[rbp], 0
	jne	SHORT $LN4@PMC_SINT_I

; 86   :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN4@PMC_SINT_I:

; 87   : 
; 88   :     if (!initialized)

	cmp	DWORD PTR initialized, 0
	jne	$LN5@PMC_SINT_I

; 89   :     {
; 90   :         CopyUINTEntryPointStructure(&ep_uint, ep);

	mov	rdx, QWORD PTR ep$[rbp]
	lea	rcx, OFFSET FLAT:ep_uint
	call	CopyUINTEntryPointStructure

; 91   :         CopyUINTEntryPointStructure(&entry_points.uint, ep);

	mov	rdx, QWORD PTR ep$[rbp]
	lea	rcx, OFFSET FLAT:entry_points
	call	CopyUINTEntryPointStructure

; 92   : 
; 93   :         if (Initialize_Memory() != PMC_STATUS_OK)

	call	Initialize_Memory
	test	eax, eax
	je	SHORT $LN6@PMC_SINT_I

; 94   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN6@PMC_SINT_I:

; 95   : 
; 96   :         entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

	lea	rax, OFFSET FLAT:PMC_GetStatisticsInfo
	mov	QWORD PTR entry_points+560, rax

; 97   :         entry_points.From_I = PMC_From_I;

	lea	rax, OFFSET FLAT:PMC_From_I
	mov	QWORD PTR entry_points+568, rax

; 98   :         entry_points.From_L = PMC_From_L;

	lea	rax, OFFSET FLAT:PMC_From_L
	mov	QWORD PTR entry_points+576, rax

; 99   :         entry_points.FromByteArray = PMC_FromByteArray;

	lea	rax, OFFSET FLAT:PMC_FromByteArray
	mov	QWORD PTR entry_points+608, rax

; 100  :         entry_points.Dispose = PMC_Dispose;

	lea	rax, OFFSET FLAT:PMC_Dispose
	mov	QWORD PTR entry_points+584, rax

; 101  :         entry_points.To_X_I = PMC_To_X_I;

	lea	rax, OFFSET FLAT:PMC_To_X_I
	mov	QWORD PTR entry_points+632, rax

; 102  :         entry_points.To_X_L = PMC_To_X_L;

	lea	rax, OFFSET FLAT:PMC_To_X_L
	mov	QWORD PTR entry_points+640, rax

; 103  :         entry_points.ToByteArray = PMC_ToByteArray;

	lea	rax, OFFSET FLAT:PMC_ToByteArray
	mov	QWORD PTR entry_points+616, rax

; 104  :         /*
; 105  :         entry_points.ToString = PMC_ToString;
; 106  :         entry_points.TryParse = PMC_TryParse;
; 107  :         */
; 108  :         entry_points.Add_I_X = PMC_Add_I_X;

	lea	rax, OFFSET FLAT:PMC_Add_I_X
	mov	QWORD PTR entry_points+656, rax

; 109  :         entry_points.Add_L_X = PMC_Add_L_X;

	lea	rax, OFFSET FLAT:PMC_Add_L_X
	mov	QWORD PTR entry_points+664, rax

; 110  :         entry_points.Add_UX_X = PMC_Add_UX_X;

	lea	rax, OFFSET FLAT:PMC_Add_UX_X
	mov	QWORD PTR entry_points+672, rax

; 111  :         entry_points.Add_X_I = PMC_Add_X_I;

	lea	rax, OFFSET FLAT:PMC_Add_X_I
	mov	QWORD PTR entry_points+680, rax

; 112  :         entry_points.Add_X_L = PMC_Add_X_L;

	lea	rax, OFFSET FLAT:PMC_Add_X_L
	mov	QWORD PTR entry_points+688, rax

; 113  :         entry_points.Add_X_UX = PMC_Add_X_UX;

	lea	rax, OFFSET FLAT:PMC_Add_X_UX
	mov	QWORD PTR entry_points+696, rax

; 114  :         entry_points.Add_X_X = PMC_Add_X_X;

	lea	rax, OFFSET FLAT:PMC_Add_X_X
	mov	QWORD PTR entry_points+704, rax

; 115  :         entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_I_X
	mov	QWORD PTR entry_points+712, rax

; 116  :         entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_L_X
	mov	QWORD PTR entry_points+720, rax

; 117  :         entry_points.Subtruct_UX_X = PMC_Subtruct_UX_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_UX_X
	mov	QWORD PTR entry_points+728, rax

; 118  :         entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_I
	mov	QWORD PTR entry_points+736, rax

; 119  :         entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_L
	mov	QWORD PTR entry_points+744, rax

; 120  :         entry_points.Subtruct_X_UX = PMC_Subtruct_X_UX;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_UX
	mov	QWORD PTR entry_points+752, rax

; 121  :         entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_X
	mov	QWORD PTR entry_points+760, rax

; 122  :         /*
; 123  :         entry_points.Multiply_I_X = PMC_Multiply_I_X;
; 124  :         entry_points.Multiply_L_X = PMC_Multiply_L_X;
; 125  :         entry_points.Multiply_X_I = PMC_Multiply_X_I;
; 126  :         entry_points.Multiply_X_L = PMC_Multiply_X_L;
; 127  :         entry_points.Multiply_X_X = PMC_Multiply_X_X;
; 128  :         entry_points.DivRem_I_X = PMC_DivRem_I_X;
; 129  :         entry_points.DivRem_L_X = PMC_DivRem_L_X;
; 130  :         entry_points.DivRem_X_I = PMC_DivRem_X_I;
; 131  :         entry_points.DivRem_X_L = PMC_DivRem_X_L;
; 132  :         entry_points.DivRem_X_X = PMC_DivRem_X_X;
; 133  :         entry_points.RightShift_X_I = PMC_RightShift_X_I;
; 134  :         entry_points.LeftShift_X_I = PMC_LeftShift_X_I;
; 135  :         entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;
; 136  :         entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;
; 137  :         entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;
; 138  :         entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;
; 139  :         entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;
; 140  :         entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;
; 141  :         entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;
; 142  :         entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;
; 143  :         entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;
; 144  :         entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;
; 145  :         entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;
; 146  :         entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;
; 147  :         entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;
; 148  :         entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;
; 149  :         entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;
; 150  :         entry_points.Compare_I_X = PMC_Compare_I_X;
; 151  :         entry_points.Compare_L_X = PMC_Compare_L_X;
; 152  :         entry_points.Compare_X_I = PMC_Compare_X_I;
; 153  :         entry_points.Compare_X_L = PMC_Compare_X_L;
; 154  :         entry_points.Compare_X_X = PMC_Compare_X_X;
; 155  :         entry_points.Equals_I_X = PMC_Equals_I_X;
; 156  :         entry_points.Equals_L_X = PMC_Equals_L_X;
; 157  :         entry_points.Equals_X_I = PMC_Equals_X_I;
; 158  :         entry_points.Equals_X_L = PMC_Equals_X_L;
; 159  :         entry_points.Equals_X_X = PMC_Equals_X_X;
; 160  :         entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;
; 161  :         entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;
; 162  :         entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;
; 163  :         entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;
; 164  :         entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;
; 165  :         entry_points.Pow_X_I = PMC_Pow_X_I;
; 166  :         entry_points.ModPow_X_X_X = PMC_ModPow_X_X_X;
; 167  :         */
; 168  :         entry_points.GetNumberType_X = PMC_GetNumberType_X;

	lea	rax, OFFSET FLAT:PMC_GetNumberType_X
	mov	QWORD PTR entry_points+592, rax

; 169  :         entry_points.GetConstantValue_I = PMC_GetConstantValue_I;

	lea	rax, OFFSET FLAT:PMC_GetConstantValue_I
	mov	QWORD PTR entry_points+600, rax

; 170  :         entry_points.Clone_X = PMC_Clone_X;

	lea	rax, OFFSET FLAT:PMC_Clone_X
	mov	QWORD PTR entry_points+624, rax

; 171  :         entry_points.Negate_X = PMC_Negate_X;

	lea	rax, OFFSET FLAT:PMC_Negate_X
	mov	QWORD PTR entry_points+648, rax

; 172  : 
; 173  :         initialized = TRUE;

	mov	DWORD PTR initialized, 1
$LN5@PMC_SINT_I:

; 174  :     }
; 175  : 
; 176  :     return (&entry_points);

	lea	rax, OFFSET FLAT:entry_points
$LN1@PMC_SINT_I:

; 177  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_SINT_Initialize ENDP
_TEXT	ENDS
END
