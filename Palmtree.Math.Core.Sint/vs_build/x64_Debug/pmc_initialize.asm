; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	ep_uint:BYTE:0230H
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__331E732B_malloc@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__A52C17B2_pmc_initialize@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_SINT_Initialize
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ ; `string'
PUBLIC	??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@		; `string'
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	Initialize_Memory:PROC
EXTRN	PMC_GetStatisticsInfo:PROC
EXTRN	PMC_From_I:PROC
EXTRN	PMC_From_L:PROC
EXTRN	PMC_Dispose:PROC
EXTRN	PMC_GetConstantValue_I:PROC
EXTRN	PMC_FromByteArray:PROC
EXTRN	PMC_ToByteArray:PROC
EXTRN	PMC_Clone_X:PROC
EXTRN	PMC_To_X_I:PROC
EXTRN	PMC_To_X_L:PROC
EXTRN	PMC_Negate_X:PROC
EXTRN	PMC_TryParse:PROC
EXTRN	PMC_Add_I_X:PROC
EXTRN	PMC_Add_L_X:PROC
EXTRN	PMC_Add_UX_X:PROC
EXTRN	PMC_Add_X_I:PROC
EXTRN	PMC_Add_X_L:PROC
EXTRN	PMC_Add_X_UX:PROC
EXTRN	PMC_Add_X_X:PROC
EXTRN	PMC_Subtruct_I_X:PROC
EXTRN	PMC_Subtruct_L_X:PROC
EXTRN	PMC_Subtruct_UX_X:PROC
EXTRN	PMC_Subtruct_X_I:PROC
EXTRN	PMC_Subtruct_X_L:PROC
EXTRN	PMC_Subtruct_X_UX:PROC
EXTRN	PMC_Subtruct_X_X:PROC
EXTRN	PMC_Multiply_I_X:PROC
EXTRN	PMC_Multiply_L_X:PROC
EXTRN	PMC_Multiply_UX_X:PROC
EXTRN	PMC_Multiply_X_I:PROC
EXTRN	PMC_Multiply_X_L:PROC
EXTRN	PMC_Multiply_X_UX:PROC
EXTRN	PMC_Multiply_X_X:PROC
EXTRN	PMC_DivRem_I_X:PROC
EXTRN	PMC_DivRem_L_X:PROC
EXTRN	PMC_DivRem_UX_X:PROC
EXTRN	PMC_DivRem_X_I:PROC
EXTRN	PMC_DivRem_X_L:PROC
EXTRN	PMC_DivRem_X_UX:PROC
EXTRN	PMC_DivRem_X_X:PROC
EXTRN	PMC_Compare_I_X:PROC
EXTRN	PMC_Compare_L_X:PROC
EXTRN	PMC_Compare_UX_X:PROC
EXTRN	PMC_Compare_X_I:PROC
EXTRN	PMC_Compare_X_L:PROC
EXTRN	PMC_Compare_X_UX:PROC
EXTRN	PMC_Compare_X_X:PROC
EXTRN	PMC_Equals_I_X:PROC
EXTRN	PMC_Equals_L_X:PROC
EXTRN	PMC_Equals_UX_X:PROC
EXTRN	PMC_Equals_X_I:PROC
EXTRN	PMC_Equals_X_L:PROC
EXTRN	PMC_Equals_X_UX:PROC
EXTRN	PMC_Equals_X_X:PROC
EXTRN	PMC_GreatestCommonDivisor_I_X:PROC
EXTRN	PMC_GreatestCommonDivisor_L_X:PROC
EXTRN	PMC_GreatestCommonDivisor_UX_X:PROC
EXTRN	PMC_GreatestCommonDivisor_X_I:PROC
EXTRN	PMC_GreatestCommonDivisor_X_L:PROC
EXTRN	PMC_GreatestCommonDivisor_X_UX:PROC
EXTRN	PMC_GreatestCommonDivisor_X_X:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
entry_points DB	0418H DUP (?)
hLib_UINT DQ	01H DUP (?)
fp_PMC_UINT_Initialize DQ 01H DUP (?)
initialized DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_SINT_Initialize DD imagerel $LN9
	DD	imagerel $LN9+1075
	DD	imagerel $unwind$PMC_SINT_Initialize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_BYTE DD imagerel _COPY_MEMORY_BYTE
	DD	imagerel _COPY_MEMORY_BYTE+99
	DD	imagerel $unwind$_COPY_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_32 DD imagerel _COPY_MEMORY_32
	DD	imagerel _COPY_MEMORY_32+100
	DD	imagerel $unwind$_COPY_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_64 DD imagerel _COPY_MEMORY_64
	DD	imagerel _COPY_MEMORY_64+100
	DD	imagerel $unwind$_COPY_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_BYTE DD imagerel _ZERO_MEMORY_BYTE
	DD	imagerel _ZERO_MEMORY_BYTE+87
	DD	imagerel $unwind$_ZERO_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CopyUINTEntryPointStructure DD imagerel CopyUINTEntryPointStructure
	DD	imagerel CopyUINTEntryPointStructure+162
	DD	imagerel $unwind$CopyUINTEntryPointStructure
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadUINTLIbrary DD imagerel LoadUINTLIbrary
	DD	imagerel LoadUINTLIbrary+156
	DD	imagerel $unwind$LoadUINTLIbrary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SelfCheck DD imagerel SelfCheck
	DD	imagerel SelfCheck+336
	DD	imagerel $unwind$SelfCheck
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
CONST	SEGMENT
??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@ DB 'PMC_UINT_Initialize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
CONST	SEGMENT
??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@ DB 'Palmtree.Math.Cor'
	DB	'e.Uint.dll', 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SelfCheck DD 025052f19H
	DD	010a230fH
	DD	070030029H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
SelfCheck$rtcName$0 DB 06eH
	DB	068H
	DB	00H
	ORG $+13
SelfCheck$rtcVarDesc DD 028H
	DD	020H
	DQ	FLAT:SelfCheck$rtcName$0
	ORG $+48
SelfCheck$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:SelfCheck$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadUINTLIbrary DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CopyUINTEntryPointStructure DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_BYTE DD 025052f01H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_64 DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_32 DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_BYTE DD 025063501H
	DD	0119231eH
	DD	07012001cH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_SINT_Initialize DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT SelfCheck
_TEXT	SEGMENT
nh$ = 8
handle$ = 72
__$ArrayPad$ = 280
SelfCheck PROC						; COMDAT

; 79   : {

	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 80   :     NUMBER_HEADER nh;
; 81   :     PMC_HANDLE_SINT handle = (PMC_HANDLE_SINT)&nh;

	lea	rax, QWORD PTR nh$[rbp]
	mov	QWORD PTR handle$[rbp], rax

; 82   :     _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nh$[rbp]
	call	_ZERO_MEMORY_BYTE

; 83   :     nh.IS_EVEN = TRUE;

	mov	eax, DWORD PTR nh$[rbp]
	or	eax, 8
	mov	DWORD PTR nh$[rbp], eax

; 84   :     if (!handle->FLAGS.IS_EVEN)

	mov	rax, QWORD PTR handle$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 3
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@SelfCheck

; 85   :         return (FALSE);

	xor	eax, eax
	jmp	$LN1@SelfCheck
$LN2@SelfCheck:

; 86   :     _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nh$[rbp]
	call	_ZERO_MEMORY_BYTE

; 87   :     nh.IS_MINUS_ONE = TRUE;

	mov	eax, DWORD PTR nh$[rbp]
	or	eax, 4
	mov	DWORD PTR nh$[rbp], eax

; 88   :     if (!handle->FLAGS.IS_MINUS_ONE)

	mov	rax, QWORD PTR handle$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN3@SelfCheck

; 89   :         return (FALSE);

	xor	eax, eax
	jmp	$LN1@SelfCheck
$LN3@SelfCheck:

; 90   :     _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nh$[rbp]
	call	_ZERO_MEMORY_BYTE

; 91   :     nh.IS_ONE = TRUE;

	mov	eax, DWORD PTR nh$[rbp]
	or	eax, 2
	mov	DWORD PTR nh$[rbp], eax

; 92   :     if (!handle->FLAGS.IS_ONE)

	mov	rax, QWORD PTR handle$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN4@SelfCheck

; 93   :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@SelfCheck
$LN4@SelfCheck:

; 94   :     _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nh$[rbp]
	call	_ZERO_MEMORY_BYTE

; 95   :     nh.IS_POWER_OF_TWO = TRUE;

	mov	eax, DWORD PTR nh$[rbp]
	or	eax, 16
	mov	DWORD PTR nh$[rbp], eax

; 96   :     if (!handle->FLAGS.IS_POWER_OF_TWO)

	mov	rax, QWORD PTR handle$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 4
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@SelfCheck

; 97   :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@SelfCheck
$LN5@SelfCheck:

; 98   :     _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nh$[rbp]
	call	_ZERO_MEMORY_BYTE

; 99   :     nh.IS_ZERO = TRUE;

	mov	eax, DWORD PTR nh$[rbp]
	or	eax, 1
	mov	DWORD PTR nh$[rbp], eax

; 100  :     if (!handle->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR handle$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN6@SelfCheck

; 101  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@SelfCheck
$LN6@SelfCheck:

; 102  :     return(TRUE);

	mov	eax, 1
$LN1@SelfCheck:

; 103  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:SelfCheck$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
SelfCheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT LoadUINTLIbrary
_TEXT	SEGMENT
LoadUINTLIbrary PROC					; COMDAT

; 61   : {

	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 62   :     hLib_UINT = LoadLibraryA("Palmtree.Math.Core.Uint.dll");

	lea	rcx, OFFSET FLAT:??_C@_0BM@ONKLCLPJ@Palmtree?4Math?4Core?4Uint?4dll@
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR hLib_UINT, rax

; 63   :     if (hLib_UINT == NULL)

	cmp	QWORD PTR hLib_UINT, 0
	jne	SHORT $LN2@LoadUINTLI

; 64   :     {
; 65   :         fp_PMC_UINT_Initialize = NULL;

	mov	QWORD PTR fp_PMC_UINT_Initialize, 0

; 66   :         return;

	jmp	SHORT $LN1@LoadUINTLI
$LN2@LoadUINTLI:

; 67   :     }
; 68   :     fp_PMC_UINT_Initialize = (void*)GetProcAddress(hLib_UINT, "PMC_UINT_Initialize");

	lea	rdx, OFFSET FLAT:??_C@_0BE@LMKJAMNH@PMC_UINT_Initialize@
	mov	rcx, QWORD PTR hLib_UINT
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR fp_PMC_UINT_Initialize, rax

; 69   :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	QWORD PTR fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN3@LoadUINTLI

; 70   :     {
; 71   :         FreeLibrary(hLib_UINT);

	mov	rcx, QWORD PTR hLib_UINT
	call	QWORD PTR __imp_FreeLibrary

; 72   :         hLib_UINT = NULL;

	mov	QWORD PTR hLib_UINT, 0
$LN3@LoadUINTLI:
$LN1@LoadUINTLI:

; 73   :         return;
; 74   :     }
; 75   :     return;
; 76   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
LoadUINTLIbrary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT CopyUINTEntryPointStructure
_TEXT	SEGMENT
d$ = 224
s$ = 232
CopyUINTEntryPointStructure PROC			; COMDAT

; 42   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 43   : #ifdef _M_IX86
; 44   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)
; 45   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));
; 46   :     else
; 47   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));
; 48   : #elif defined(_M_IX64)
; 49   :     if (sizeof(*s) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@CopyUINTEn

; 50   :         _COPY_MEMORY_64((_UINT64_T*)d, (_UINT64_T*)s, sizeof(*s) / sizeof(_UINT64_T));

	mov	r8d, 70					; 00000046H
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_64
	jmp	SHORT $LN3@CopyUINTEn
$LN2@CopyUINTEn:

; 51   :     else if (sizeof(*s) % sizeof(_UINT64_T) == 0)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN4@CopyUINTEn

; 52   :         _COPY_MEMORY_32((_UINT32_T*)d, (_UINT32_T*)s, sizeof(*s) / sizeof(_UINT32_T));

	mov	r8d, 140				; 0000008cH
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_32
	jmp	SHORT $LN5@CopyUINTEn
$LN4@CopyUINTEn:

; 53   :     else
; 54   :         _COPY_MEMORY_BYTE(d, s, sizeof(*s));

	mov	r8d, 560				; 00000230H
	mov	rdx, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	call	_COPY_MEMORY_BYTE
$LN5@CopyUINTEn:
$LN3@CopyUINTEn:

; 55   : #else
; 56   : #error unknown platform
; 57   : #endif
; 58   : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
CopyUINTEntryPointStructure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
count$ = 232
_ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 89   :         __stosb(d, 0, count);

	mov	rdi, QWORD PTR d$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR count$[rbp]
	rep stosb

; 90   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_64
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_64 PROC					; COMDAT

; 54   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 55   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsq

; 56   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_32
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_32 PROC					; COMDAT

; 48   :     {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 49   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	eax, DWORD PTR count$[rbp]
	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	ecx, eax
	rep movsd

; 50   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 224
s$ = 232
count$ = 240
_COPY_MEMORY_BYTE PROC					; COMDAT

; 43   :     {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR d$[rbp]
	mov	rsi, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR count$[rbp]
	rep movsb

; 45   :     }

	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
_COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_initialize.c
;	COMDAT PMC_SINT_Initialize
_TEXT	SEGMENT
ep$ = 8
config$ = 256
PMC_SINT_Initialize PROC				; COMDAT

; 106  : {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__A52C17B2_pmc_initialize@c
	call	__CheckForDebuggerJustMyCode

; 107  :     if (hLib_UINT == NULL)

	cmp	QWORD PTR hLib_UINT, 0
	jne	SHORT $LN2@PMC_SINT_I

; 108  :         LoadUINTLIbrary();

	call	LoadUINTLIbrary
$LN2@PMC_SINT_I:

; 109  :     if (fp_PMC_UINT_Initialize == NULL)

	cmp	QWORD PTR fp_PMC_UINT_Initialize, 0
	jne	SHORT $LN3@PMC_SINT_I

; 110  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN3@PMC_SINT_I:

; 111  :     PMC_UINT_ENTRY_POINTS* ep = (*fp_PMC_UINT_Initialize)(config);

	mov	rcx, QWORD PTR config$[rbp]
	call	QWORD PTR fp_PMC_UINT_Initialize
	mov	QWORD PTR ep$[rbp], rax

; 112  :     if (ep == NULL)

	cmp	QWORD PTR ep$[rbp], 0
	jne	SHORT $LN4@PMC_SINT_I

; 113  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN4@PMC_SINT_I:

; 114  : 
; 115  :     if (!initialized)

	cmp	DWORD PTR initialized, 0
	jne	$LN5@PMC_SINT_I

; 116  :     {
; 117  :         if (!SelfCheck())

	call	SelfCheck
	test	eax, eax
	jne	SHORT $LN6@PMC_SINT_I

; 118  :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN6@PMC_SINT_I:

; 119  : 
; 120  :         CopyUINTEntryPointStructure(&ep_uint, ep);

	mov	rdx, QWORD PTR ep$[rbp]
	lea	rcx, OFFSET FLAT:ep_uint
	call	CopyUINTEntryPointStructure

; 121  :         CopyUINTEntryPointStructure(&entry_points.UINT_ENTRY_POINTS, ep);

	mov	rdx, QWORD PTR ep$[rbp]
	lea	rcx, OFFSET FLAT:entry_points
	call	CopyUINTEntryPointStructure

; 122  : 
; 123  :         if (Initialize_Memory() != PMC_STATUS_OK)

	call	Initialize_Memory
	test	eax, eax
	je	SHORT $LN7@PMC_SINT_I

; 124  :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_SINT_I
$LN7@PMC_SINT_I:

; 125  : 
; 126  :         entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

	lea	rax, OFFSET FLAT:PMC_GetStatisticsInfo
	mov	QWORD PTR entry_points+560, rax

; 127  :         entry_points.From_I = PMC_From_I;

	lea	rax, OFFSET FLAT:PMC_From_I
	mov	QWORD PTR entry_points+568, rax

; 128  :         entry_points.From_L = PMC_From_L;

	lea	rax, OFFSET FLAT:PMC_From_L
	mov	QWORD PTR entry_points+576, rax

; 129  :         entry_points.FromByteArray = PMC_FromByteArray;

	lea	rax, OFFSET FLAT:PMC_FromByteArray
	mov	QWORD PTR entry_points+600, rax

; 130  :         entry_points.Dispose = PMC_Dispose;

	lea	rax, OFFSET FLAT:PMC_Dispose
	mov	QWORD PTR entry_points+584, rax

; 131  :         entry_points.To_X_I = PMC_To_X_I;

	lea	rax, OFFSET FLAT:PMC_To_X_I
	mov	QWORD PTR entry_points+624, rax

; 132  :         entry_points.To_X_L = PMC_To_X_L;

	lea	rax, OFFSET FLAT:PMC_To_X_L
	mov	QWORD PTR entry_points+632, rax

; 133  :         entry_points.ToByteArray = PMC_ToByteArray;

	lea	rax, OFFSET FLAT:PMC_ToByteArray
	mov	QWORD PTR entry_points+608, rax

; 134  :         /*
; 135  :         entry_points.ToString = PMC_ToString;
; 136  :         */
; 137  :         entry_points.TryParse = PMC_TryParse;

	lea	rax, OFFSET FLAT:PMC_TryParse
	mov	QWORD PTR entry_points+648, rax

; 138  :         entry_points.Add_I_X = PMC_Add_I_X;

	lea	rax, OFFSET FLAT:PMC_Add_I_X
	mov	QWORD PTR entry_points+656, rax

; 139  :         entry_points.Add_L_X = PMC_Add_L_X;

	lea	rax, OFFSET FLAT:PMC_Add_L_X
	mov	QWORD PTR entry_points+664, rax

; 140  :         entry_points.Add_UX_X = PMC_Add_UX_X;

	lea	rax, OFFSET FLAT:PMC_Add_UX_X
	mov	QWORD PTR entry_points+672, rax

; 141  :         entry_points.Add_X_I = PMC_Add_X_I;

	lea	rax, OFFSET FLAT:PMC_Add_X_I
	mov	QWORD PTR entry_points+680, rax

; 142  :         entry_points.Add_X_L = PMC_Add_X_L;

	lea	rax, OFFSET FLAT:PMC_Add_X_L
	mov	QWORD PTR entry_points+688, rax

; 143  :         entry_points.Add_X_UX = PMC_Add_X_UX;

	lea	rax, OFFSET FLAT:PMC_Add_X_UX
	mov	QWORD PTR entry_points+696, rax

; 144  :         entry_points.Add_X_X = PMC_Add_X_X;

	lea	rax, OFFSET FLAT:PMC_Add_X_X
	mov	QWORD PTR entry_points+704, rax

; 145  :         entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_I_X
	mov	QWORD PTR entry_points+712, rax

; 146  :         entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_L_X
	mov	QWORD PTR entry_points+720, rax

; 147  :         entry_points.Subtruct_UX_X = PMC_Subtruct_UX_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_UX_X
	mov	QWORD PTR entry_points+728, rax

; 148  :         entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_I
	mov	QWORD PTR entry_points+736, rax

; 149  :         entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_L
	mov	QWORD PTR entry_points+744, rax

; 150  :         entry_points.Subtruct_X_UX = PMC_Subtruct_X_UX;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_UX
	mov	QWORD PTR entry_points+752, rax

; 151  :         entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_X
	mov	QWORD PTR entry_points+760, rax

; 152  :         entry_points.Multiply_I_X = PMC_Multiply_I_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_I_X
	mov	QWORD PTR entry_points+768, rax

; 153  :         entry_points.Multiply_L_X = PMC_Multiply_L_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_L_X
	mov	QWORD PTR entry_points+776, rax

; 154  :         entry_points.Multiply_UX_X = PMC_Multiply_UX_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_UX_X
	mov	QWORD PTR entry_points+784, rax

; 155  :         entry_points.Multiply_X_I = PMC_Multiply_X_I;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_I
	mov	QWORD PTR entry_points+792, rax

; 156  :         entry_points.Multiply_X_L = PMC_Multiply_X_L;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_L
	mov	QWORD PTR entry_points+800, rax

; 157  :         entry_points.Multiply_X_UX = PMC_Multiply_X_UX;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_UX
	mov	QWORD PTR entry_points+808, rax

; 158  :         entry_points.Multiply_X_X = PMC_Multiply_X_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_X
	mov	QWORD PTR entry_points+816, rax

; 159  :         entry_points.DivRem_I_X = PMC_DivRem_I_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_I_X
	mov	QWORD PTR entry_points+824, rax

; 160  :         entry_points.DivRem_L_X = PMC_DivRem_L_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_L_X
	mov	QWORD PTR entry_points+832, rax

; 161  :         entry_points.DivRem_UX_X = PMC_DivRem_UX_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_UX_X
	mov	QWORD PTR entry_points+840, rax

; 162  :         entry_points.DivRem_X_I = PMC_DivRem_X_I;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_I
	mov	QWORD PTR entry_points+848, rax

; 163  :         entry_points.DivRem_X_L = PMC_DivRem_X_L;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_L
	mov	QWORD PTR entry_points+856, rax

; 164  :         entry_points.DivRem_X_UX = PMC_DivRem_X_UX;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_UX
	mov	QWORD PTR entry_points+864, rax

; 165  :         entry_points.DivRem_X_X = PMC_DivRem_X_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_X
	mov	QWORD PTR entry_points+872, rax

; 166  :         /*
; 167  :         entry_points.RightShift_X_I = PMC_RightShift_X_I;
; 168  :         entry_points.LeftShift_X_I = PMC_LeftShift_X_I;
; 169  :         entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;
; 170  :         entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;
; 171  :         entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;
; 172  :         entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;
; 173  :         entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;
; 174  :         entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;
; 175  :         entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;
; 176  :         entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;
; 177  :         entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;
; 178  :         entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;
; 179  :         entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;
; 180  :         entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;
; 181  :         entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;
; 182  :         entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;
; 183  :         entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;
; 184  :         */
; 185  :         entry_points.Compare_I_X = PMC_Compare_I_X;

	lea	rax, OFFSET FLAT:PMC_Compare_I_X
	mov	QWORD PTR entry_points+880, rax

; 186  :         entry_points.Compare_L_X = PMC_Compare_L_X;

	lea	rax, OFFSET FLAT:PMC_Compare_L_X
	mov	QWORD PTR entry_points+888, rax

; 187  :         entry_points.Compare_UX_X = PMC_Compare_UX_X;

	lea	rax, OFFSET FLAT:PMC_Compare_UX_X
	mov	QWORD PTR entry_points+896, rax

; 188  :         entry_points.Compare_X_I = PMC_Compare_X_I;

	lea	rax, OFFSET FLAT:PMC_Compare_X_I
	mov	QWORD PTR entry_points+904, rax

; 189  :         entry_points.Compare_X_L = PMC_Compare_X_L;

	lea	rax, OFFSET FLAT:PMC_Compare_X_L
	mov	QWORD PTR entry_points+912, rax

; 190  :         entry_points.Compare_X_UX = PMC_Compare_X_UX;

	lea	rax, OFFSET FLAT:PMC_Compare_X_UX
	mov	QWORD PTR entry_points+920, rax

; 191  :         entry_points.Compare_X_X = PMC_Compare_X_X;

	lea	rax, OFFSET FLAT:PMC_Compare_X_X
	mov	QWORD PTR entry_points+928, rax

; 192  :         entry_points.Equals_I_X = PMC_Equals_I_X;

	lea	rax, OFFSET FLAT:PMC_Equals_I_X
	mov	QWORD PTR entry_points+936, rax

; 193  :         entry_points.Equals_L_X = PMC_Equals_L_X;

	lea	rax, OFFSET FLAT:PMC_Equals_L_X
	mov	QWORD PTR entry_points+944, rax

; 194  :         entry_points.Equals_UX_X = PMC_Equals_UX_X;

	lea	rax, OFFSET FLAT:PMC_Equals_UX_X
	mov	QWORD PTR entry_points+952, rax

; 195  :         entry_points.Equals_X_I = PMC_Equals_X_I;

	lea	rax, OFFSET FLAT:PMC_Equals_X_I
	mov	QWORD PTR entry_points+960, rax

; 196  :         entry_points.Equals_X_L = PMC_Equals_X_L;

	lea	rax, OFFSET FLAT:PMC_Equals_X_L
	mov	QWORD PTR entry_points+968, rax

; 197  :         entry_points.Equals_X_UX = PMC_Equals_X_UX;

	lea	rax, OFFSET FLAT:PMC_Equals_X_UX
	mov	QWORD PTR entry_points+976, rax

; 198  :         entry_points.Equals_X_X = PMC_Equals_X_X;

	lea	rax, OFFSET FLAT:PMC_Equals_X_X
	mov	QWORD PTR entry_points+984, rax

; 199  :         entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_I_X
	mov	QWORD PTR entry_points+992, rax

; 200  :         entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_L_X
	mov	QWORD PTR entry_points+1000, rax

; 201  :         entry_points.GreatestCommonDivisor_UX_X = PMC_GreatestCommonDivisor_UX_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_UX_X
	mov	QWORD PTR entry_points+1008, rax

; 202  :         entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_I
	mov	QWORD PTR entry_points+1016, rax

; 203  :         entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_L
	mov	QWORD PTR entry_points+1024, rax

; 204  :         entry_points.GreatestCommonDivisor_X_UX = PMC_GreatestCommonDivisor_X_UX;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_UX
	mov	QWORD PTR entry_points+1032, rax

; 205  :         entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_X
	mov	QWORD PTR entry_points+1040, rax

; 206  :         entry_points.GetConstantValue_I = PMC_GetConstantValue_I;

	lea	rax, OFFSET FLAT:PMC_GetConstantValue_I
	mov	QWORD PTR entry_points+592, rax

; 207  :         entry_points.Clone_X = PMC_Clone_X;

	lea	rax, OFFSET FLAT:PMC_Clone_X
	mov	QWORD PTR entry_points+616, rax

; 208  :         entry_points.Negate_X = PMC_Negate_X;

	lea	rax, OFFSET FLAT:PMC_Negate_X
	mov	QWORD PTR entry_points+640, rax

; 209  : 
; 210  :         initialized = TRUE;

	mov	DWORD PTR initialized, 1
$LN5@PMC_SINT_I:

; 211  :     }
; 212  : 
; 213  :     return (&entry_points);

	lea	rax, OFFSET FLAT:entry_points
$LN1@PMC_SINT_I:

; 214  : }

	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
PMC_SINT_Initialize ENDP
_TEXT	ENDS
END
