; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__BB37DE88_pmc_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_Equals_I_X
PUBLIC	PMC_Equals_L_X
PUBLIC	PMC_Equals_UX_X
PUBLIC	PMC_Equals_X_I
PUBLIC	PMC_Equals_X_L
PUBLIC	PMC_Equals_X_UX
PUBLIC	PMC_Equals_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_I_X DD imagerel $LN10
	DD	imagerel $LN10+319
	DD	imagerel $unwind$PMC_Equals_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_L_X DD imagerel $LN10
	DD	imagerel $LN10+324
	DD	imagerel $unwind$PMC_Equals_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_UX_X DD imagerel $LN15
	DD	imagerel $LN15+340
	DD	imagerel $unwind$PMC_Equals_UX_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_I DD imagerel $LN10
	DD	imagerel $LN10+321
	DD	imagerel $unwind$PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_L DD imagerel $LN10
	DD	imagerel $LN10+325
	DD	imagerel $unwind$PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_UX DD imagerel $LN15
	DD	imagerel $LN15+339
	DD	imagerel $unwind$PMC_Equals_X_UX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_X DD imagerel $LN12
	DD	imagerel $LN12+316
	DD	imagerel $unwind$PMC_Equals_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_32 DD imagerel GET_ABS_32
	DD	imagerel GET_ABS_32+175
	DD	imagerel $unwind$GET_ABS_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_64 DD imagerel GET_ABS_64
	DD	imagerel GET_ABS_64+198
	DD	imagerel $unwind$GET_ABS_64
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_64 DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_32 DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_X DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_UX DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_L DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Equals_X_L$rtcName$0 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Equals_X_L$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Equals_X_L$rtcName$0
	ORG $+48
PMC_Equals_X_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Equals_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_I DD 025054419H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Equals_X_I$rtcName$0 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Equals_X_I$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Equals_X_I$rtcName$0
	ORG $+48
PMC_Equals_X_I$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Equals_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_UX_X DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_L_X DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Equals_L_X$rtcName$0 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Equals_L_X$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Equals_L_X$rtcName$0
	ORG $+48
PMC_Equals_L_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Equals_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_I_X DD 025054319H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Equals_I_X$rtcName$0 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Equals_I_X$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Equals_I_X$rtcName$0
	ORG $+48
PMC_Equals_I_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Equals_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_64
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_64 PROC						; COMDAT

; 800  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 801  :         if (u > 0)

	cmp	QWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_64

; 802  :         {
; 803  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 804  :             return ((_UINT64_T)u);

	mov	rax, QWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN3@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 809  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN5@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	mov	rax, -9223372036854775808		; 8000000000000000H
	cmp	QWORD PTR u$[rbp], rax
	jne	SHORT $LN7@GET_ABS_64
	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	rax, QWORD PTR u$[rbp]
	neg	rax
	mov	QWORD PTR tv68[rbp], rax
$LN8@GET_ABS_64:
	mov	rax, QWORD PTR tv68[rbp]
$LN5@GET_ABS_64:
$LN3@GET_ABS_64:
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_32
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_32 PROC						; COMDAT

; 780  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 781  :         if (u > 0)

	cmp	DWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN3@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN5@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR u$[rbp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[rbp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR u$[rbp]
	neg	eax
	mov	DWORD PTR tv68[rbp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[rbp]
$LN5@GET_ABS_32:
$LN3@GET_ABS_32:
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_X_X
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nv$ = 72
u$ = 320
v$ = 328
w$ = 336
PMC_Equals_X_X PROC					; COMDAT

; 176  : {

$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 177  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 178  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 179  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 180  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 181  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 182  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 183  :     PMC_STATUS_CODE result;
; 184  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 185  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 186  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 187  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 188  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Equals

; 189  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN6@PMC_Equals:

; 190  :     if (nu->SIGN != nv->SIGN)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	mov	rcx, QWORD PTR nv$[rbp]
	movsx	ecx, BYTE PTR [rcx+24]
	cmp	eax, ecx
	je	SHORT $LN7@PMC_Equals

; 191  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN8@PMC_Equals
$LN7@PMC_Equals:

; 192  :     else if ((result = ep_uint.Equals_X_X(nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+472
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Equals

; 193  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN9@PMC_Equals:
$LN8@PMC_Equals:

; 194  : #ifdef _DEBUG
; 195  :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN10@PMC_Equals

; 196  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN10@PMC_Equals:

; 197  : #endif
; 198  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 199  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_X_UX
_TEXT	SEGMENT
result$ = 4
nu$ = 40
u$ = 288
v$ = 296
w$ = 304
PMC_Equals_X_UX PROC					; COMDAT

; 149  : {

$LN15:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 150  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 151  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 152  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 153  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 154  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 155  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 156  :     PMC_STATUS_CODE result;
; 157  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 158  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 159  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 160  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN6@PMC_Equals

; 161  :         *w = v->FLAGS.IS_ZERO;

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN7@PMC_Equals
$LN6@PMC_Equals:

; 162  :     else if (nu->SIGN < 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jge	SHORT $LN8@PMC_Equals

; 163  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 164  :     else if (v->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@PMC_Equals

; 165  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN11@PMC_Equals
$LN10@PMC_Equals:

; 166  :     else if ((result = ep_uint.Equals_X_X(nu->ABS, v, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+472
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN12@PMC_Equals

; 167  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN12@PMC_Equals:
$LN11@PMC_Equals:
$LN9@PMC_Equals:
$LN7@PMC_Equals:

; 168  : #ifdef _DEBUG
; 169  :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN13@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN13@PMC_Equals

; 170  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN13@PMC_Equals:

; 171  : #endif
; 172  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 173  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_X_L
_TEXT	SEGMENT
result$ = 4
nu$ = 40
v_sign$ = 68
v_abs$ = 104
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Equals_X_L PROC					; COMDAT

; 126  : {

$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 127  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 128  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 129  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 130  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 131  :     PMC_STATUS_CODE result;
; 132  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 133  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Equals

; 134  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 135  :     char v_sign;
; 136  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR v_abs$[rbp], rax

; 137  :     if (nu->SIGN != v_sign)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	movsx	ecx, BYTE PTR v_sign$[rbp]
	cmp	eax, ecx
	je	SHORT $LN5@PMC_Equals

; 138  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN6@PMC_Equals
$LN5@PMC_Equals:

; 139  :     else if ((result = ep_uint.Equals_X_L(nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+464
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Equals

; 140  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN7@PMC_Equals:
$LN6@PMC_Equals:

; 141  : #ifdef _DEBUG
; 142  :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN8@PMC_Equals

; 143  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN8@PMC_Equals:

; 144  : #endif
; 145  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 146  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Equals_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_X_I
_TEXT	SEGMENT
result$ = 4
nu$ = 40
v_sign$ = 68
v_abs$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Equals_X_I PROC					; COMDAT

; 103  : {

$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 104  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 105  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 106  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 107  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 108  :     PMC_STATUS_CODE result;
; 109  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 110  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Equals

; 111  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 112  :     char v_sign;
; 113  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR v_abs$[rbp], eax

; 114  :     if (nu->SIGN != v_sign)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	movsx	ecx, BYTE PTR v_sign$[rbp]
	cmp	eax, ecx
	je	SHORT $LN5@PMC_Equals

; 115  :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN6@PMC_Equals
$LN5@PMC_Equals:

; 116  :     else if ((result = ep_uint.Equals_X_I(nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+456
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Equals

; 117  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN7@PMC_Equals:
$LN6@PMC_Equals:

; 118  : #ifdef _DEBUG
; 119  :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN8@PMC_Equals

; 120  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN8@PMC_Equals:

; 121  : #endif
; 122  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 123  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Equals_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_UX_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
tv76 = 244
u$ = 288
v$ = 296
w$ = 304
PMC_Equals_UX_X PROC					; COMDAT

; 78   : {

$LN15:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 79   :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 80   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 81   :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 82   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 83   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Equals

; 84   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 85   :     PMC_STATUS_CODE result;
; 86   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 87   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Equals

; 88   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 89   :     if (u->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@PMC_Equals

; 90   :         *w = nv->SIGN == 0;

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN13@PMC_Equals
	mov	DWORD PTR tv76[rbp], 1
	jmp	SHORT $LN14@PMC_Equals
$LN13@PMC_Equals:
	mov	DWORD PTR tv76[rbp], 0
$LN14@PMC_Equals:
	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR tv76[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN7@PMC_Equals
$LN6@PMC_Equals:

; 91   :     else if (nv->SIGN <= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jg	SHORT $LN8@PMC_Equals

; 92   :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN9@PMC_Equals
$LN8@PMC_Equals:

; 93   :     else if ((result = ep_uint.Equals_X_X(u, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+472
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN10@PMC_Equals

; 94   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN10@PMC_Equals:
$LN9@PMC_Equals:
$LN7@PMC_Equals:

; 95   : #ifdef _DEBUG
; 96   :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN11@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN11@PMC_Equals

; 97   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN11@PMC_Equals:

; 98   : #endif
; 99   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 100  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_L_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
u_sign$ = 68
u_abs$ = 104
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Equals_L_X PROC					; COMDAT

; 55   : {

$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 56   :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 57   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 58   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 59   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 60   :     PMC_STATUS_CODE result;
; 61   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 62   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Equals

; 63   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 64   :     char u_sign;
; 65   :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR u_abs$[rbp], rax

; 66   :     if (u_sign != nv->SIGN)

	movsx	eax, BYTE PTR u_sign$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	movsx	ecx, BYTE PTR [rcx+24]
	cmp	eax, ecx
	je	SHORT $LN5@PMC_Equals

; 67   :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN6@PMC_Equals
$LN5@PMC_Equals:

; 68   :     else if ((result = ep_uint.Equals_L_X(u_abs, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR u_abs$[rbp]
	call	QWORD PTR ep_uint+448
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Equals

; 69   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_Equals
$LN7@PMC_Equals:
$LN6@PMC_Equals:

; 70   : #ifdef _DEBUG
; 71   :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN8@PMC_Equals

; 72   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN8@PMC_Equals:

; 73   : #endif
; 74   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 75   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Equals_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_equals.c
;	COMDAT PMC_Equals_I_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
u_sign$ = 68
u_abs$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Equals_I_X PROC					; COMDAT

; 32   : {

$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__BB37DE88_pmc_equals@c
	call	__CheckForDebuggerJustMyCode

; 33   :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Equals

; 34   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 35   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Equals

; 36   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 37   :     PMC_STATUS_CODE result;
; 38   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 39   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Equals

; 40   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 41   :     char u_sign;
; 42   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR u_abs$[rbp], eax

; 43   :     if (u_sign != nv->SIGN)

	movsx	eax, BYTE PTR u_sign$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	movsx	ecx, BYTE PTR [rcx+24]
	cmp	eax, ecx
	je	SHORT $LN5@PMC_Equals

; 44   :         *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN6@PMC_Equals
$LN5@PMC_Equals:

; 45   :     else if ((result = ep_uint.Equals_I_X(u_abs, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	ecx, DWORD PTR u_abs$[rbp]
	call	QWORD PTR ep_uint+440
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN7@PMC_Equals

; 46   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_Equals
$LN7@PMC_Equals:
$LN6@PMC_Equals:

; 47   : #ifdef _DEBUG
; 48   :     if (*w != 0 && *w != 1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@PMC_Equals
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN8@PMC_Equals

; 49   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN8@PMC_Equals:

; 50   : #endif
; 51   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 52   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Equals_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Equals_I_X ENDP
_TEXT	ENDS
END
