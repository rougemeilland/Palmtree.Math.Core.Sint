; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__B21D7C08_pmc_from@c DB 01H
msvcjmc	ENDS
PUBLIC	From_I_Imp
PUBLIC	From_L_Imp
PUBLIC	PMC_From_I
PUBLIC	PMC_From_L
PUBLIC	__JustMyCode_Default
EXTRN	AllocateNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	number_zero:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$From_I_Imp DD imagerel $LN7
	DD	imagerel $LN7+225
	DD	imagerel $unwind$From_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$From_L_Imp DD imagerel $LN7
	DD	imagerel $LN7+227
	DD	imagerel $unwind$From_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_From_I DD imagerel $LN10
	DD	imagerel $LN10+258
	DD	imagerel $unwind$PMC_From_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_From_L DD imagerel $LN10
	DD	imagerel $LN10+267
	DD	imagerel $unwind$PMC_From_L
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_From_L DD 025054019H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_From_L$rtcName$0 DB 070H
	DB	00H
	ORG $+14
PMC_From_L$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:PMC_From_L$rtcName$0
	ORG $+48
PMC_From_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_From_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_From_I DD 025053e19H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_From_I$rtcName$0 DB 070H
	DB	00H
	ORG $+14
PMC_From_I$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:PMC_From_I$rtcName$0
	ORG $+48
PMC_From_I$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_From_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$From_L_Imp DD 025054419H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
From_L_Imp$rtcName$0 DB 06fH
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
From_L_Imp$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:From_L_Imp$rtcName$0
	ORG $+48
From_L_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:From_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$From_I_Imp DD 025054319H
	DD	0116231bH
	DD	0700f0025H
	DD	0500eH
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
From_I_Imp$rtcName$0 DB 06fH
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
From_I_Imp$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:From_I_Imp$rtcName$0
	ORG $+48
From_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:From_I_Imp$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT PMC_From_L
_TEXT	SEGMENT
result$ = 4
p$4 = 40
__$ArrayPad$ = 248
x$ = 288
o$ = 296
PMC_From_L PROC						; COMDAT

; 84   : {

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B21D7C08_pmc_from@c
	call	__CheckForDebuggerJustMyCode

; 85   :     PMC_STATUS_CODE result;
; 86   :     if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN2@PMC_From_L

; 87   :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@PMC_From_L
$LN2@PMC_From_L:

; 88   :     else
; 89   :     {
; 90   :         NUMBER_HEADER* p;
; 91   :         if (x == 0)

	cmp	QWORD PTR x$[rbp], 0
	jne	SHORT $LN4@PMC_From_L

; 92   :             result = From_L_Imp(0, 0, &p);

	lea	r8, QWORD PTR p$4[rbp]
	xor	edx, edx
	xor	ecx, ecx
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN5@PMC_From_L
$LN4@PMC_From_L:

; 93   :         else if (x > 0)

	cmp	QWORD PTR x$[rbp], 0
	jle	SHORT $LN6@PMC_From_L

; 94   :             result = From_L_Imp(1, x, &p);

	lea	r8, QWORD PTR p$4[rbp]
	mov	rdx, QWORD PTR x$[rbp]
	mov	cl, 1
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN7@PMC_From_L
$LN6@PMC_From_L:

; 95   :         else
; 96   :             result = From_L_Imp(-1, -x, &p);

	mov	rax, QWORD PTR x$[rbp]
	neg	rax
	lea	r8, QWORD PTR p$4[rbp]
	mov	rdx, rax
	mov	cl, -1
	call	From_L_Imp
	mov	DWORD PTR result$[rbp], eax
$LN7@PMC_From_L:
$LN5@PMC_From_L:

; 97   :         if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_From_L

; 98   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_From_L
$LN8@PMC_From_L:

; 99   :         *o = (PMC_HANDLE_SINT)p;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p$4[rbp]
	mov	QWORD PTR [rax], rcx
$LN3@PMC_From_L:

; 100  :     }
; 101  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_L:

; 102  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_From_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT PMC_From_I
_TEXT	SEGMENT
result$ = 4
p$4 = 40
__$ArrayPad$ = 248
x$ = 288
o$ = 296
PMC_From_I PROC						; COMDAT

; 63   : {

$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B21D7C08_pmc_from@c
	call	__CheckForDebuggerJustMyCode

; 64   :     PMC_STATUS_CODE result;
; 65   :     if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN2@PMC_From_I

; 66   :         *o = (PMC_HANDLE_SINT)&number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@PMC_From_I
$LN2@PMC_From_I:

; 67   :     else
; 68   :     {
; 69   :         NUMBER_HEADER* p;
; 70   :         if (x == 0)

	cmp	DWORD PTR x$[rbp], 0
	jne	SHORT $LN4@PMC_From_I

; 71   :             result = From_I_Imp(0, 0, &p);

	lea	r8, QWORD PTR p$4[rbp]
	xor	edx, edx
	xor	ecx, ecx
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN5@PMC_From_I
$LN4@PMC_From_I:

; 72   :         else if (x > 0)

	cmp	DWORD PTR x$[rbp], 0
	jle	SHORT $LN6@PMC_From_I

; 73   :             result = From_I_Imp(1, x, &p);

	lea	r8, QWORD PTR p$4[rbp]
	mov	edx, DWORD PTR x$[rbp]
	mov	cl, 1
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN7@PMC_From_I
$LN6@PMC_From_I:

; 74   :         else
; 75   :             result = From_I_Imp(-1, -x, &p);

	mov	eax, DWORD PTR x$[rbp]
	neg	eax
	lea	r8, QWORD PTR p$4[rbp]
	mov	edx, eax
	mov	cl, -1
	call	From_I_Imp
	mov	DWORD PTR result$[rbp], eax
$LN7@PMC_From_I:
$LN5@PMC_From_I:

; 76   :         if (result != PMC_STATUS_OK)

	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN8@PMC_From_I

; 77   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_From_I
$LN8@PMC_From_I:

; 78   :         *o = (PMC_HANDLE_SINT)p;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p$4[rbp]
	mov	QWORD PTR [rax], rcx
$LN3@PMC_From_I:

; 79   :     }
; 80   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_From_I:

; 81   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_From_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_From_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT From_L_Imp
_TEXT	SEGMENT
result$ = 4
o_abs$4 = 40
__$ArrayPad$ = 248
x_sign$ = 288
x_abs$ = 296
o$ = 304
From_L_Imp PROC						; COMDAT

; 47   : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B21D7C08_pmc_from@c
	call	__CheckForDebuggerJustMyCode

; 48   :     PMC_STATUS_CODE result;
; 49   :     if (x_sign == 0)

	movsx	eax, BYTE PTR x_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN2@From_L_Imp

; 50   :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@From_L_Imp
$LN2@From_L_Imp:

; 51   :     else
; 52   :     {
; 53   :         PMC_HANDLE_UINT o_abs;
; 54   :         if ((result = ep_uint.From_L(x_abs, &o_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR o_abs$4[rbp]
	mov	rcx, QWORD PTR x_abs$[rbp]
	call	QWORD PTR ep_uint+24
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@From_L_Imp

; 55   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@From_L_Imp
$LN4@From_L_Imp:

; 56   :         if ((result = AllocateNumber(o, x_sign, o_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR o_abs$4[rbp]
	movzx	edx, BYTE PTR x_sign$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@From_L_Imp

; 57   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@From_L_Imp
$LN5@From_L_Imp:
$LN3@From_L_Imp:

; 58   :     }
; 59   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_L_Imp:

; 60   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:From_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
From_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_from.c
;	COMDAT From_I_Imp
_TEXT	SEGMENT
result$ = 4
o_abs$4 = 40
__$ArrayPad$ = 248
x_sign$ = 288
x_abs$ = 296
o$ = 304
From_I_Imp PROC						; COMDAT

; 31   : {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B21D7C08_pmc_from@c
	call	__CheckForDebuggerJustMyCode

; 32   :     PMC_STATUS_CODE result;
; 33   :     if (x_sign == 0)

	movsx	eax, BYTE PTR x_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN2@From_I_Imp

; 34   :         *o = &number_zero;

	mov	rax, QWORD PTR o$[rbp]
	lea	rcx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN3@From_I_Imp
$LN2@From_I_Imp:

; 35   :     else
; 36   :     {
; 37   :         PMC_HANDLE_UINT o_abs;
; 38   :         if ((result = ep_uint.From_I(x_abs, &o_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR o_abs$4[rbp]
	mov	ecx, DWORD PTR x_abs$[rbp]
	call	QWORD PTR ep_uint+16
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@From_I_Imp

; 39   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@From_I_Imp
$LN4@From_I_Imp:

; 40   :         if ((result = AllocateNumber(o, x_sign, o_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR o_abs$4[rbp]
	movzx	edx, BYTE PTR x_sign$[rbp]
	mov	rcx, QWORD PTR o$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@From_I_Imp

; 41   :             return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@From_I_Imp
$LN5@From_I_Imp:
$LN3@From_I_Imp:

; 42   :     }
; 43   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_I_Imp:

; 44   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:From_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
From_I_Imp ENDP
_TEXT	ENDS
END
