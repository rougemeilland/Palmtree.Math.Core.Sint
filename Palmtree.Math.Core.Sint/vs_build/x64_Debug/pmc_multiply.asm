; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__6265BA8B_pmc_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_Multiply_I_X
PUBLIC	PMC_Multiply_L_X
PUBLIC	PMC_Multiply_UX_X
PUBLIC	PMC_Multiply_X_I
PUBLIC	PMC_Multiply_X_L
PUBLIC	PMC_Multiply_X_UX
PUBLIC	PMC_Multiply_X_X
PUBLIC	__JustMyCode_Default
EXTRN	AllocateNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	IsZero_UINT:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	number_zero:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_I_X DD imagerel $LN16
	DD	imagerel $LN16+421
	DD	imagerel $unwind$PMC_Multiply_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_L_X DD imagerel $LN16
	DD	imagerel $LN16+425
	DD	imagerel $unwind$PMC_Multiply_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_UX_X DD imagerel $LN13
	DD	imagerel $LN13+363
	DD	imagerel $unwind$PMC_Multiply_UX_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I DD imagerel $LN16
	DD	imagerel $LN16+414
	DD	imagerel $unwind$PMC_Multiply_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L DD imagerel $LN16
	DD	imagerel $LN16+417
	DD	imagerel $unwind$PMC_Multiply_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_UX DD imagerel $LN13
	DD	imagerel $LN13+363
	DD	imagerel $unwind$PMC_Multiply_X_UX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_X DD imagerel $LN18
	DD	imagerel $LN18+469
	DD	imagerel $unwind$PMC_Multiply_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_32 DD imagerel GET_ABS_32
	DD	imagerel GET_ABS_32+175
	DD	imagerel $unwind$GET_ABS_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_64 DD imagerel GET_ABS_64
	DD	imagerel GET_ABS_64+198
	DD	imagerel $unwind$GET_ABS_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyU_X_I_Imp DD imagerel MultiplyU_X_I_Imp
	DD	imagerel MultiplyU_X_I_Imp+218
	DD	imagerel $unwind$MultiplyU_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyU_X_L_Imp DD imagerel MultiplyU_X_L_Imp
	DD	imagerel MultiplyU_X_L_Imp+219
	DD	imagerel $unwind$MultiplyU_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyU_X_X_Imp DD imagerel MultiplyU_X_X_Imp
	DD	imagerel MultiplyU_X_X_Imp+219
	DD	imagerel $unwind$MultiplyU_X_X_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyU_X_X_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MultiplyU_X_X_Imp$rtcName$0 DB 077H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
MultiplyU_X_X_Imp$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:MultiplyU_X_X_Imp$rtcName$0
	ORG $+48
MultiplyU_X_X_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MultiplyU_X_X_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyU_X_L_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MultiplyU_X_L_Imp$rtcName$0 DB 077H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
MultiplyU_X_L_Imp$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:MultiplyU_X_L_Imp$rtcName$0
	ORG $+48
MultiplyU_X_L_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MultiplyU_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyU_X_I_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
MultiplyU_X_I_Imp$rtcName$0 DB 077H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
MultiplyU_X_I_Imp$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:MultiplyU_X_I_Imp$rtcName$0
	ORG $+48
MultiplyU_X_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:MultiplyU_X_I_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_64 DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_32 DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_X DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+13
PMC_Multiply_X_X$rtcVarDesc DD 088H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_X$rtcName$0
	ORG $+48
PMC_Multiply_X_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_UX DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_UX$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+5
PMC_Multiply_X_UX$rtcName$1 DB 076H
	DB	05fH
	DB	069H
	DB	073H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+14
PMC_Multiply_X_UX$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_X_UX$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_UX$rtcName$0
	ORG $+96
PMC_Multiply_X_UX$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_UX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L DD 025054519H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_L$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+1
PMC_Multiply_X_L$rtcName$1 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
PMC_Multiply_X_L$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_X_L$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_L$rtcName$0
	ORG $+96
PMC_Multiply_X_L$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I DD 025054419H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_X_I$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+1
PMC_Multiply_X_I$rtcName$1 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
PMC_Multiply_X_I$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_X_I$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_X_I$rtcName$0
	ORG $+96
PMC_Multiply_X_I$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_UX_X DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_UX_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+5
PMC_Multiply_UX_X$rtcName$1 DB 075H
	DB	05fH
	DB	069H
	DB	073H
	DB	05fH
	DB	07aH
	DB	065H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+14
PMC_Multiply_UX_X$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_UX_X$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_UX_X$rtcName$0
	ORG $+96
PMC_Multiply_UX_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_UX_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_L_X DD 025054519H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_L_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+1
PMC_Multiply_L_X$rtcName$1 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
PMC_Multiply_L_X$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_L_X$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_L_X$rtcName$0
	ORG $+96
PMC_Multiply_L_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_I_X DD 025054319H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Multiply_I_X$rtcName$0 DB 06eH
	DB	077H
	DB	00H
	ORG $+1
PMC_Multiply_I_X$rtcName$1 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+5
PMC_Multiply_I_X$rtcVarDesc DD 084H
	DD	01H
	DQ	FLAT:PMC_Multiply_I_X$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:PMC_Multiply_I_X$rtcName$0
	ORG $+96
PMC_Multiply_I_X$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:PMC_Multiply_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT MultiplyU_X_X_Imp
_TEXT	SEGMENT
result$ = 4
w_abs$ = 40
__$ArrayPad$ = 248
w_sign$ = 288
u$ = 296
v$ = 304
w$ = 312
MultiplyU_X_X_Imp PROC					; COMDAT

; 60   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 61   :     PMC_STATUS_CODE result;
; 62   :     PMC_HANDLE_UINT w_abs;
; 63   :     if ((result = ep_uint.Multiply_X_X(u, v, &w_abs)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_abs$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+240
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@MultiplyU_

; 64   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN2@MultiplyU_:

; 65   :     if ((result = AllocateNumber(w, w_sign, w_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w_abs$[rbp]
	movzx	edx, BYTE PTR w_sign$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@MultiplyU_

; 66   :     {
; 67   :         ep_uint.Dispose(w_abs);

	mov	rcx, QWORD PTR w_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 68   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN3@MultiplyU_:

; 69   :     }
; 70   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@MultiplyU_:

; 71   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:MultiplyU_X_X_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
MultiplyU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT MultiplyU_X_L_Imp
_TEXT	SEGMENT
result$ = 4
w_abs$ = 40
__$ArrayPad$ = 248
w_sign$ = 288
u$ = 296
v$ = 304
w$ = 312
MultiplyU_X_L_Imp PROC					; COMDAT

; 46   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 47   :     PMC_STATUS_CODE result;
; 48   :     PMC_HANDLE_UINT w_abs;
; 49   :     if ((result = ep_uint.Multiply_X_L(u, v, &w_abs)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_abs$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+232
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@MultiplyU_

; 50   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN2@MultiplyU_:

; 51   :     if ((result = AllocateNumber(w, w_sign, w_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w_abs$[rbp]
	movzx	edx, BYTE PTR w_sign$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@MultiplyU_

; 52   :     {
; 53   :         ep_uint.Dispose(w_abs);

	mov	rcx, QWORD PTR w_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 54   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN3@MultiplyU_:

; 55   :     }
; 56   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@MultiplyU_:

; 57   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:MultiplyU_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
MultiplyU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT MultiplyU_X_I_Imp
_TEXT	SEGMENT
result$ = 4
w_abs$ = 40
__$ArrayPad$ = 248
w_sign$ = 288
u$ = 296
v$ = 304
w$ = 312
MultiplyU_X_I_Imp PROC					; COMDAT

; 32   : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 33   :     PMC_STATUS_CODE result;
; 34   :     PMC_HANDLE_UINT w_abs;
; 35   :     if ((result = ep_uint.Multiply_X_I(u, v, &w_abs)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_abs$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+224
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@MultiplyU_

; 36   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN2@MultiplyU_:

; 37   :     if ((result = AllocateNumber(w, w_sign, w_abs)) != PMC_STATUS_OK)

	mov	r8, QWORD PTR w_abs$[rbp]
	movzx	edx, BYTE PTR w_sign$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	call	AllocateNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@MultiplyU_

; 38   :     {
; 39   :         ep_uint.Dispose(w_abs);

	mov	rcx, QWORD PTR w_abs$[rbp]
	call	QWORD PTR ep_uint+32

; 40   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@MultiplyU_
$LN3@MultiplyU_:

; 41   :     }
; 42   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@MultiplyU_:

; 43   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:MultiplyU_X_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
MultiplyU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_64
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_64 PROC						; COMDAT

; 800  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 801  :         if (u > 0)

	cmp	QWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_64

; 802  :         {
; 803  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 804  :             return ((_UINT64_T)u);

	mov	rax, QWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN3@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 809  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN5@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	mov	rax, -9223372036854775808		; 8000000000000000H
	cmp	QWORD PTR u$[rbp], rax
	jne	SHORT $LN7@GET_ABS_64
	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	rax, QWORD PTR u$[rbp]
	neg	rax
	mov	QWORD PTR tv68[rbp], rax
$LN8@GET_ABS_64:
	mov	rax, QWORD PTR tv68[rbp]
$LN5@GET_ABS_64:
$LN3@GET_ABS_64:
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_32
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_32 PROC						; COMDAT

; 780  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 781  :         if (u > 0)

	cmp	DWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN3@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN5@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR u$[rbp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[rbp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR u$[rbp]
	neg	eax
	mov	DWORD PTR tv68[rbp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[rbp]
$LN5@GET_ABS_32:
$LN3@GET_ABS_32:
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_X
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nv$ = 72
nw$ = 104
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Multiply_X_X PROC					; COMDAT

; 425  : {

$LN18:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 426  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 427  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 428  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 429  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 430  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 431  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 432  :     PMC_STATUS_CODE result;
; 433  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 434  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 435  :     NUMBER_HEADER* nw;
; 436  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 437  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN5@PMC_Multip:

; 438  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 439  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN6@PMC_Multip:

; 440  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN7@PMC_Multip

; 441  :     {
; 442  :         // u == 0 の場合
; 443  : 
; 444  :         // 0 を返す
; 445  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 446  :     }

	jmp	$LN8@PMC_Multip
$LN7@PMC_Multip:

; 447  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jle	SHORT $LN9@PMC_Multip

; 448  :     {
; 449  :         // u > 0 の場合
; 450  : 
; 451  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN11@PMC_Multip

; 452  :         {
; 453  :             // v == 0 の場合
; 454  : 
; 455  :             // 0 を返す
; 456  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 457  :         }

	jmp	SHORT $LN12@PMC_Multip
$LN11@PMC_Multip:

; 458  :         else
; 459  :         {
; 460  :             // v != 0 の場合
; 461  : 
; 462  :             // abs(u) * v を返す
; 463  :             if ((result = MultiplyU_X_X_Imp(nv->SIGN, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	movzx	ecx, BYTE PTR [rax+16]
	call	MultiplyU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Multip

; 464  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN13@PMC_Multip:
$LN12@PMC_Multip:

; 465  :         }
; 466  :     }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 467  :     else
; 468  :     {
; 469  :         // u < 0 の場合
; 470  : 
; 471  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN14@PMC_Multip

; 472  :         {
; 473  :             // v == 0 の場合
; 474  : 
; 475  :             // 0 を返す
; 476  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 477  :         }

	jmp	SHORT $LN15@PMC_Multip
$LN14@PMC_Multip:

; 478  :         else
; 479  :         {
; 480  :             // v != 0 の場合
; 481  : 
; 482  :             // -abs(u) * v を返す
; 483  :             if ((result = MultiplyU_X_X_Imp(-nv->SIGN, nu->ABS, nv->ABS, &nw)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	neg	eax
	lea	r9, QWORD PTR nw$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rcx+8]
	movzx	ecx, al
	call	MultiplyU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Multip

; 484  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN16@PMC_Multip:
$LN15@PMC_Multip:
$LN10@PMC_Multip:
$LN8@PMC_Multip:

; 485  :         }
; 486  :     }
; 487  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 488  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 489  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_UX
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nw$ = 72
v_is_zero$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Multiply_X_UX PROC					; COMDAT

; 377  : {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 378  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 379  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 380  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 381  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 382  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 383  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 384  :     PMC_STATUS_CODE result;
; 385  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 386  :     NUMBER_HEADER* nw;
; 387  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 388  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN5@PMC_Multip:

; 389  :     char v_is_zero;
; 390  :     if ((result = IsZero_UINT(v, &v_is_zero)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR v_is_zero$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	IsZero_UINT
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 391  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 392  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN7@PMC_Multip

; 393  :     {
; 394  :         // u == 0 の場合
; 395  : 
; 396  :         // 0 を返す
; 397  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 398  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 399  :     else
; 400  :     {
; 401  :         // u != 0 の場合
; 402  : 
; 403  :         if (v_is_zero)

	movsx	eax, BYTE PTR v_is_zero$[rbp]
	test	eax, eax
	je	SHORT $LN9@PMC_Multip

; 404  :         {
; 405  :             // v == 0 の場合
; 406  : 
; 407  :             // 0 を返す
; 408  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 409  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 410  :         else
; 411  :         {
; 412  :             // v > 0 の場合
; 413  : 
; 414  :             // u * v を返す
; 415  :             if ((result = MultiplyU_X_X_Imp(nu->SIGN, nu->ABS, v, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nu$[rbp]
	movzx	ecx, BYTE PTR [rax+16]
	call	MultiplyU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 416  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:
$LN8@PMC_Multip:

; 417  :         }
; 418  : 
; 419  :     }
; 420  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 421  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 422  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_UX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nw$ = 72
v_sign$ = 100
v_abs$ = 136
__$ArrayPad$ = 344
u$ = 384
v$ = 392
w$ = 400
PMC_Multiply_X_L PROC					; COMDAT

; 313  : {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 314  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 315  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 316  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 317  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 318  :     PMC_STATUS_CODE result;
; 319  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 320  :     NUMBER_HEADER* nw;
; 321  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Multip

; 322  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 323  :     char v_sign;
; 324  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR v_abs$[rbp], rax

; 325  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN5@PMC_Multip

; 326  :     {
; 327  :         // u == 0 の場合
; 328  : 
; 329  :         // 0 を返す
; 330  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 331  :     }

	jmp	$LN6@PMC_Multip
$LN5@PMC_Multip:

; 332  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jle	SHORT $LN7@PMC_Multip

; 333  :     {
; 334  :         // u > 0 の場合
; 335  : 
; 336  :         if (v_sign == 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN9@PMC_Multip

; 337  :         {
; 338  :             // v == 0 の場合
; 339  : 
; 340  :             // 0 を返す
; 341  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 342  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 343  :         else
; 344  :         {
; 345  :             // v != 0 の場合
; 346  : 
; 347  :             // abs(u) * abs(v) を返す
; 348  :             if ((result = MultiplyU_X_L_Imp(v_sign, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	movzx	ecx, BYTE PTR v_sign$[rbp]
	call	MultiplyU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 349  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:

; 350  :         }
; 351  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 352  :     else
; 353  :     {
; 354  :         // u < 0 の場合
; 355  : 
; 356  :         if (v_sign == 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Multip

; 357  :         {
; 358  :             // v == 0 の場合
; 359  : 
; 360  :             // 0 を返す
; 361  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 362  :         }

	jmp	SHORT $LN13@PMC_Multip
$LN12@PMC_Multip:

; 363  :         else
; 364  :         {
; 365  :             // v != 0 の場合
; 366  : 
; 367  :             // -abs(u) * abs(v) を返す
; 368  :             if ((result = MultiplyU_X_L_Imp(-v_sign, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	movsx	eax, BYTE PTR v_sign$[rbp]
	neg	eax
	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR v_abs$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rcx+8]
	movzx	ecx, al
	call	MultiplyU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Multip

; 369  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:
$LN13@PMC_Multip:
$LN8@PMC_Multip:
$LN6@PMC_Multip:

; 370  :         }
; 371  :     }
; 372  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 373  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 374  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nw$ = 72
v_sign$ = 100
v_abs$ = 132
__$ArrayPad$ = 344
u$ = 384
v$ = 392
w$ = 400
PMC_Multiply_X_I PROC					; COMDAT

; 249  : {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 250  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 251  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 252  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 253  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 254  :     PMC_STATUS_CODE result;
; 255  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 256  :     NUMBER_HEADER* nw;
; 257  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Multip

; 258  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 259  :     char v_sign;
; 260  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR v_abs$[rbp], eax

; 261  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN5@PMC_Multip

; 262  :     {
; 263  :         // u == 0 の場合
; 264  : 
; 265  :         // 0 を返す
; 266  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 267  :     }

	jmp	$LN6@PMC_Multip
$LN5@PMC_Multip:

; 268  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jle	SHORT $LN7@PMC_Multip

; 269  :     {
; 270  :         // u > 0 の場合
; 271  : 
; 272  :         if (v_sign == 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN9@PMC_Multip

; 273  :         {
; 274  :             // v == 0 の場合
; 275  : 
; 276  :             // 0 を返す
; 277  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 278  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 279  :         else
; 280  :         {
; 281  :             // v != 0 の場合
; 282  : 
; 283  :             // abs(u) * abs(v) を返す
; 284  :             if ((result = MultiplyU_X_I_Imp(v_sign, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8d, DWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	movzx	ecx, BYTE PTR v_sign$[rbp]
	call	MultiplyU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 285  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:

; 286  :         }
; 287  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 288  :     else
; 289  :     {
; 290  :         // u < 0 の場合
; 291  : 
; 292  :         if (v_sign == 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN12@PMC_Multip

; 293  :         {
; 294  :             // v == 0 の場合
; 295  : 
; 296  :             // 0 を返す
; 297  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 298  :         }

	jmp	SHORT $LN13@PMC_Multip
$LN12@PMC_Multip:

; 299  :         else
; 300  :         {
; 301  :             // v != 0 の場合
; 302  : 
; 303  :             // -abs(u) * abs(v) を返す
; 304  :             if ((result = MultiplyU_X_I_Imp(-v_sign, nu->ABS, v_abs, &nw)) != PMC_STATUS_OK)

	movsx	eax, BYTE PTR v_sign$[rbp]
	neg	eax
	lea	r9, QWORD PTR nw$[rbp]
	mov	r8d, DWORD PTR v_abs$[rbp]
	mov	rcx, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rcx+8]
	movzx	ecx, al
	call	MultiplyU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Multip

; 305  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:
$LN13@PMC_Multip:
$LN8@PMC_Multip:
$LN6@PMC_Multip:

; 306  :         }
; 307  :     }
; 308  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 309  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 310  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_UX_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
nw$ = 72
u_is_zero$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Multiply_UX_X PROC					; COMDAT

; 202  : {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 203  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 204  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 205  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 206  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 207  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Multip

; 208  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 209  :     PMC_STATUS_CODE result;
; 210  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 211  :     NUMBER_HEADER* nw;
; 212  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Multip

; 213  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN5@PMC_Multip:

; 214  :     char u_is_zero;
; 215  :     if ((result = IsZero_UINT(u, &u_is_zero)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR u_is_zero$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	IsZero_UINT
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Multip

; 216  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN6@PMC_Multip:

; 217  :     if (u_is_zero)

	movsx	eax, BYTE PTR u_is_zero$[rbp]
	test	eax, eax
	je	SHORT $LN7@PMC_Multip

; 218  :     {
; 219  :         // u == 0 の場合
; 220  : 
; 221  :         // 0 を返す
; 222  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 223  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 224  :     else
; 225  :     {
; 226  :         // u > 0 の場合
; 227  : 
; 228  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN9@PMC_Multip

; 229  :         {
; 230  :             // v == 0 の場合
; 231  : 
; 232  :             // 0 を返す
; 233  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 234  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 235  :         else
; 236  :         {
; 237  :             // u != 0 の場合
; 238  : 
; 239  :             // abs(u) * v を返す
; 240  :             if ((result = MultiplyU_X_X_Imp(nv->SIGN, nv->ABS, u, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	movzx	ecx, BYTE PTR [rax+16]
	call	MultiplyU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 241  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:
$LN8@PMC_Multip:

; 242  :         }
; 243  :     }
; 244  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 245  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 246  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_UX_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_L_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
nw$ = 72
u_sign$ = 100
u_abs$ = 136
__$ArrayPad$ = 344
u$ = 384
v$ = 392
w$ = 400
PMC_Multiply_L_X PROC					; COMDAT

; 138  : {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 139  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 140  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 141  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 142  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 143  :     PMC_STATUS_CODE result;
; 144  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 145  :     NUMBER_HEADER* nw;
; 146  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Multip

; 147  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 148  :     char u_sign;
; 149  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR u_abs$[rbp], rax

; 150  :     if (u_sign == 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Multip

; 151  :     {
; 152  :         // u == 0 の場合
; 153  : 
; 154  :         // 0 を返す
; 155  :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 156  :     }

	jmp	$LN6@PMC_Multip
$LN5@PMC_Multip:

; 157  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Multip

; 158  :     {
; 159  :         // u > 0 の場合
; 160  : 
; 161  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN9@PMC_Multip

; 162  :         {
; 163  :             // v == 0 の場合
; 164  : 
; 165  :             // 0 を返す
; 166  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 167  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 168  :         else
; 169  :         {
; 170  :             // v != 0 の場合
; 171  : 
; 172  :             // abs(u) * v を返す
; 173  :             if ((result = MultiplyU_X_L_Imp(nv->SIGN, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	movzx	ecx, BYTE PTR [rax+16]
	call	MultiplyU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 174  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:

; 175  :         }
; 176  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 177  :     else
; 178  :     {
; 179  :         // u < 0 の場合
; 180  : 
; 181  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN12@PMC_Multip

; 182  :         {
; 183  :             // v == 0 の場合
; 184  : 
; 185  :             // 0 を返す
; 186  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 187  :         }

	jmp	SHORT $LN13@PMC_Multip
$LN12@PMC_Multip:

; 188  :         else
; 189  :         {
; 190  :             // v != 0 の場合
; 191  : 
; 192  :             // -abs(u) * v を返す
; 193  :             if ((result = MultiplyU_X_L_Imp(-nv->SIGN, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	neg	eax
	lea	r9, QWORD PTR nw$[rbp]
	mov	r8, QWORD PTR u_abs$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rcx+8]
	movzx	ecx, al
	call	MultiplyU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Multip

; 194  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:
$LN13@PMC_Multip:
$LN8@PMC_Multip:
$LN6@PMC_Multip:

; 195  :         }
; 196  :     }
; 197  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 198  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 199  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_multiply.c
;	COMDAT PMC_Multiply_I_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
nw$ = 72
u_sign$ = 100
u_abs$ = 132
__$ArrayPad$ = 344
u$ = 384
v$ = 392
w$ = 400
PMC_Multiply_I_X PROC					; COMDAT

; 74   : {

$LN16:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__6265BA8B_pmc_multiply@c
	call	__CheckForDebuggerJustMyCode

; 75   :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Multip

; 76   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN2@PMC_Multip:

; 77   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Multip

; 78   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Multip
$LN3@PMC_Multip:

; 79   :     PMC_STATUS_CODE result;
; 80   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 81   :     NUMBER_HEADER* nw;
; 82   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Multip

; 83   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Multip
$LN4@PMC_Multip:

; 84   :     char u_sign;
; 85   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR u_abs$[rbp], eax

; 86   :     if (u_sign == 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Multip

; 87   :     {
; 88   :         // u == 0 の場合
; 89   : 
; 90   :         // 0 を返す
; 91   :         nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 92   :     }

	jmp	$LN6@PMC_Multip
$LN5@PMC_Multip:

; 93   :     else if (u_sign > 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Multip

; 94   :     {
; 95   :         // u > 0 の場合
; 96   : 
; 97   :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN9@PMC_Multip

; 98   :         {
; 99   :             // v == 0 の場合
; 100  : 
; 101  :             // 0 を返す
; 102  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 103  :         }

	jmp	SHORT $LN10@PMC_Multip
$LN9@PMC_Multip:

; 104  :         else
; 105  :         {
; 106  :             // v != 0 の場合
; 107  : 
; 108  :             // abs(u) * v を返す
; 109  :             if ((result = MultiplyU_X_I_Imp(nv->SIGN, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR nw$[rbp]
	mov	r8d, DWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR nv$[rbp]
	movzx	ecx, BYTE PTR [rax+16]
	call	MultiplyU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Multip

; 110  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN11@PMC_Multip:
$LN10@PMC_Multip:

; 111  :         }
; 112  :     }

	jmp	SHORT $LN8@PMC_Multip
$LN7@PMC_Multip:

; 113  :     else
; 114  :     {
; 115  :         // u < 0 の場合
; 116  : 
; 117  :         if (nv->SIGN == 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	test	eax, eax
	jne	SHORT $LN12@PMC_Multip

; 118  :         {
; 119  :             // v == 0 の場合
; 120  : 
; 121  :             // 0 を返す
; 122  :             nw = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR nw$[rbp], rax

; 123  :         }

	jmp	SHORT $LN13@PMC_Multip
$LN12@PMC_Multip:

; 124  :         else
; 125  :         {
; 126  :             // v != 0 の場合
; 127  : 
; 128  :             // -abs(u) * v を返す
; 129  :             if ((result = MultiplyU_X_I_Imp(-nv->SIGN, nv->ABS, u_abs, &nw)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+16]
	neg	eax
	lea	r9, QWORD PTR nw$[rbp]
	mov	r8d, DWORD PTR u_abs$[rbp]
	mov	rcx, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rcx+8]
	movzx	ecx, al
	call	MultiplyU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Multip

; 130  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Multip
$LN14@PMC_Multip:
$LN13@PMC_Multip:
$LN8@PMC_Multip:
$LN6@PMC_Multip:

; 131  :         }
; 132  :     }
; 133  :     *w = (PMC_HANDLE_SINT)nw;

	mov	rax, QWORD PTR w$[rbp]
	mov	rcx, QWORD PTR nw$[rbp]
	mov	QWORD PTR [rax], rcx

; 134  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 135  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Multiply_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
PMC_Multiply_I_X ENDP
_TEXT	ENDS
END
