; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__C8C7A597_pmc_compare@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_Compare_I_X
PUBLIC	PMC_Compare_L_X
PUBLIC	PMC_Compare_UX_X
PUBLIC	PMC_Compare_X_I
PUBLIC	PMC_Compare_X_L
PUBLIC	PMC_Compare_X_UX
PUBLIC	PMC_Compare_X_X
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_I_X DD imagerel $LN17
	DD	imagerel $LN17+442
	DD	imagerel $unwind$PMC_Compare_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_L_X DD imagerel $LN17
	DD	imagerel $LN17+446
	DD	imagerel $unwind$PMC_Compare_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_UX_X DD imagerel $LN12
	DD	imagerel $LN12+303
	DD	imagerel $unwind$PMC_Compare_UX_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_I DD imagerel $LN17
	DD	imagerel $LN17+439
	DD	imagerel $unwind$PMC_Compare_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_L DD imagerel $LN17
	DD	imagerel $LN17+442
	DD	imagerel $unwind$PMC_Compare_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_UX DD imagerel $LN17
	DD	imagerel $LN17+375
	DD	imagerel $unwind$PMC_Compare_X_UX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Compare_X_X DD imagerel $LN19
	DD	imagerel $LN19+445
	DD	imagerel $unwind$PMC_Compare_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_32 DD imagerel GET_ABS_32
	DD	imagerel GET_ABS_32+175
	DD	imagerel $unwind$GET_ABS_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GET_ABS_64 DD imagerel GET_ABS_64
	DD	imagerel GET_ABS_64+198
	DD	imagerel $unwind$GET_ABS_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CompareU_X_I_Imp DD imagerel CompareU_X_I_Imp
	DD	imagerel CompareU_X_I_Imp+230
	DD	imagerel $unwind$CompareU_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CompareU_X_L_Imp DD imagerel CompareU_X_L_Imp
	DD	imagerel CompareU_X_L_Imp+231
	DD	imagerel $unwind$CompareU_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CompareU_X_X_Imp DD imagerel CompareU_X_X_Imp
	DD	imagerel CompareU_X_X_Imp+231
	DD	imagerel $unwind$CompareU_X_X_Imp
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CompareU_X_X_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CompareU_X_X_Imp$rtcName$0 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+9
CompareU_X_X_Imp$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:CompareU_X_X_Imp$rtcName$0
	ORG $+48
CompareU_X_X_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:CompareU_X_X_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CompareU_X_L_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CompareU_X_L_Imp$rtcName$0 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+9
CompareU_X_L_Imp$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:CompareU_X_L_Imp$rtcName$0
	ORG $+48
CompareU_X_L_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:CompareU_X_L_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CompareU_X_I_Imp DD 025054919H
	DD	011c2321H
	DD	070150025H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
CompareU_X_I_Imp$rtcName$0 DB 074H
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	077H
	DB	00H
	ORG $+9
CompareU_X_I_Imp$rtcVarDesc DD 044H
	DD	04H
	DQ	FLAT:CompareU_X_I_Imp$rtcName$0
	ORG $+48
CompareU_X_I_Imp$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:CompareU_X_I_Imp$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_64 DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GET_ABS_32 DD 025052d01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_X DD 025053401H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_UX DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_L DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_X_L$rtcName$0 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Compare_X_L$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Compare_X_L$rtcName$0
	ORG $+48
PMC_Compare_X_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_X_I DD 025054419H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_X_I$rtcName$0 DB 076H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Compare_X_I$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Compare_X_I$rtcName$0
	ORG $+48
PMC_Compare_X_I$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_UX_X DD 025053401H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_L_X DD 025054519H
	DD	0118231dH
	DD	07011002dH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_L_X$rtcName$0 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Compare_L_X$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Compare_L_X$rtcName$0
	ORG $+48
PMC_Compare_L_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Compare_I_X DD 025054319H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_Compare_I_X$rtcName$0 DB 075H
	DB	05fH
	DB	073H
	DB	069H
	DB	067H
	DB	06eH
	DB	00H
	ORG $+9
PMC_Compare_I_X$rtcVarDesc DD 064H
	DD	01H
	DQ	FLAT:PMC_Compare_I_X$rtcName$0
	ORG $+48
PMC_Compare_I_X$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_Compare_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT CompareU_X_X_Imp
_TEXT	SEGMENT
result$ = 4
temp_w$ = 36
__$ArrayPad$ = 248
sign$ = 288
u$ = 296
v$ = 304
w$ = 312
CompareU_X_X_Imp PROC					; COMDAT

; 66   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 67   :     PMC_STATUS_CODE result;
; 68   :     _INT32_T temp_w;
; 69   :     if ((result = ep_uint.Compare_X_X(u, v, &temp_w)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR temp_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+432
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@CompareU_X

; 70   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 71   :     if (sign > 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 72   :         *w = temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR temp_w$[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 73   : #ifdef _DEBUG
; 74   :     else if (sign == 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 75   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN6@CompareU_X
$LN5@CompareU_X:

; 76   : #endif
; 77   :     else
; 78   :         *w = -temp_w;

	mov	eax, DWORD PTR temp_w$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@CompareU_X:
$LN4@CompareU_X:

; 79   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 80   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:CompareU_X_X_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CompareU_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT CompareU_X_L_Imp
_TEXT	SEGMENT
result$ = 4
temp_w$ = 36
__$ArrayPad$ = 248
sign$ = 288
u$ = 296
v$ = 304
w$ = 312
CompareU_X_L_Imp PROC					; COMDAT

; 49   : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 50   :     PMC_STATUS_CODE result;
; 51   :     _INT32_T temp_w;
; 52   :     if ((result = ep_uint.Compare_X_L(u, v, &temp_w)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR temp_w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+424
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@CompareU_X

; 53   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 54   :     if (sign > 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 55   :         *w = temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR temp_w$[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 56   : #ifdef _DEBUG
; 57   :     else if (sign == 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 58   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN6@CompareU_X
$LN5@CompareU_X:

; 59   : #endif
; 60   :     else
; 61   :         *w = -temp_w;

	mov	eax, DWORD PTR temp_w$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@CompareU_X:
$LN4@CompareU_X:

; 62   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 63   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:CompareU_X_L_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CompareU_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT CompareU_X_I_Imp
_TEXT	SEGMENT
result$ = 4
temp_w$ = 36
__$ArrayPad$ = 248
sign$ = 288
u$ = 296
v$ = 304
w$ = 312
CompareU_X_I_Imp PROC					; COMDAT

; 32   : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 33   :     PMC_STATUS_CODE result;
; 34   :     _INT32_T temp_w;
; 35   :     if ((result = ep_uint.Compare_X_I(u, v, &temp_w)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR temp_w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	QWORD PTR ep_uint+416
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@CompareU_X

; 36   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@CompareU_X
$LN2@CompareU_X:

; 37   :     if (sign > 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jle	SHORT $LN3@CompareU_X

; 38   :         *w = temp_w;

	mov	rax, QWORD PTR w$[rbp]
	mov	ecx, DWORD PTR temp_w$[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN4@CompareU_X
$LN3@CompareU_X:

; 39   : #ifdef _DEBUG
; 40   :     else if (sign == 0)

	movsx	eax, BYTE PTR sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@CompareU_X

; 41   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@CompareU_X
	jmp	SHORT $LN6@CompareU_X
$LN5@CompareU_X:

; 42   : #endif
; 43   :     else
; 44   :         *w = -temp_w;

	mov	eax, DWORD PTR temp_w$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@CompareU_X:
$LN4@CompareU_X:

; 45   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CompareU_X:

; 46   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:CompareU_X_I_Imp$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
CompareU_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_64
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_64 PROC						; COMDAT

; 800  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 801  :         if (u > 0)

	cmp	QWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_64

; 802  :         {
; 803  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 804  :             return ((_UINT64_T)u);

	mov	rax, QWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_64

; 805  :         }

	jmp	SHORT $LN3@GET_ABS_64
$LN2@GET_ABS_64:

; 806  :         else if (u == 0)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_64

; 807  :         {
; 808  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 809  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_64

; 810  :         }

	jmp	SHORT $LN5@GET_ABS_64
$LN4@GET_ABS_64:

; 811  :         else
; 812  :         {
; 813  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 814  :             return ((_UINT64_T)u == 0x8000000000000000UL ? 0x8000000000000000UL : (_UINT64_T)-u);

	mov	rax, -9223372036854775808		; 8000000000000000H
	cmp	QWORD PTR u$[rbp], rax
	jne	SHORT $LN7@GET_ABS_64
	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN8@GET_ABS_64
$LN7@GET_ABS_64:
	mov	rax, QWORD PTR u$[rbp]
	neg	rax
	mov	QWORD PTR tv68[rbp], rax
$LN8@GET_ABS_64:
	mov	rax, QWORD PTR tv68[rbp]
$LN5@GET_ABS_64:
$LN3@GET_ABS_64:
$LN1@GET_ABS_64:

; 815  :         }
; 816  :     }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT GET_ABS_32
_TEXT	SEGMENT
tv68 = 192
u$ = 240
sign$ = 248
GET_ABS_32 PROC						; COMDAT

; 780  :     {

	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__8CA3E54E_pmc_inline_func@h
	call	__CheckForDebuggerJustMyCode

; 781  :         if (u > 0)

	cmp	DWORD PTR u$[rbp], 0
	jle	SHORT $LN2@GET_ABS_32

; 782  :         {
; 783  :             *sign = 1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 1

; 784  :             return ((_UINT32_T)u);

	mov	eax, DWORD PTR u$[rbp]
	jmp	SHORT $LN1@GET_ABS_32

; 785  :         }

	jmp	SHORT $LN3@GET_ABS_32
$LN2@GET_ABS_32:

; 786  :         else if (u == 0)

	cmp	DWORD PTR u$[rbp], 0
	jne	SHORT $LN4@GET_ABS_32

; 787  :         {
; 788  :             *sign = 0;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], 0

; 789  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GET_ABS_32

; 790  :         }

	jmp	SHORT $LN5@GET_ABS_32
$LN4@GET_ABS_32:

; 791  :         else
; 792  :         {
; 793  :             *sign = -1;

	mov	rax, QWORD PTR sign$[rbp]
	mov	BYTE PTR [rax], -1

; 794  :             return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

	cmp	DWORD PTR u$[rbp], -2147483648		; 80000000H
	jne	SHORT $LN7@GET_ABS_32
	mov	DWORD PTR tv68[rbp], -2147483648	; 80000000H
	jmp	SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
	mov	eax, DWORD PTR u$[rbp]
	neg	eax
	mov	DWORD PTR tv68[rbp], eax
$LN8@GET_ABS_32:
	mov	eax, DWORD PTR tv68[rbp]
$LN5@GET_ABS_32:
$LN3@GET_ABS_32:
$LN1@GET_ABS_32:

; 795  :         }
; 796  : }

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_X_X
_TEXT	SEGMENT
result$ = 4
nu$ = 40
nv$ = 72
u$ = 320
v$ = 328
w$ = 336
PMC_Compare_X_X PROC					; COMDAT

; 456  : {

$LN19:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 457  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 458  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 459  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 460  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 461  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 462  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 463  :     PMC_STATUS_CODE result;
; 464  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 465  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 466  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 467  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 468  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN6@PMC_Compar

; 469  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 470  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN7@PMC_Compar

; 471  :     {
; 472  :         // u == 0 の場合
; 473  : 
; 474  :         // v の符号の反対を返す
; 475  :         *w = -nv->SIGN;

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 476  :     }

	jmp	$LN8@PMC_Compar
$LN7@PMC_Compar:

; 477  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jle	SHORT $LN9@PMC_Compar

; 478  :     {
; 479  :         // u > 0 の場合
; 480  : 
; 481  :         if (nv->SIGN <= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jg	SHORT $LN11@PMC_Compar

; 482  :         {
; 483  :             // v == 0 の場合
; 484  : 
; 485  :             // 1 を返す
; 486  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 487  :         }

	jmp	SHORT $LN12@PMC_Compar
$LN11@PMC_Compar:

; 488  :         else
; 489  :         {
; 490  :             // v > 0 の場合
; 491  : 
; 492  :             // abs(u) と abs(v) の比較結果を返す
; 493  :             if ((result = CompareU_X_X_Imp(1, nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN13@PMC_Compar

; 494  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN13@PMC_Compar:
$LN12@PMC_Compar:

; 495  :         }
; 496  :     }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 497  :     else
; 498  :     {
; 499  :         // u < 0 の場合
; 500  : 
; 501  :         if (nv->SIGN >= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jl	SHORT $LN14@PMC_Compar

; 502  :         {
; 503  :             // v == 0 の場合
; 504  : 
; 505  :             // -1 を返す
; 506  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 507  :         }

	jmp	SHORT $LN15@PMC_Compar
$LN14@PMC_Compar:

; 508  :         else
; 509  :         {
; 510  :             // v < 0 の場合
; 511  : 
; 512  :             // -abs(u) と -abs(v) の比較結果を返す
; 513  :             if ((result = CompareU_X_X_Imp(-1, nu->ABS, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, -1
	call	CompareU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN16@PMC_Compar

; 514  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN16@PMC_Compar:
$LN15@PMC_Compar:
$LN10@PMC_Compar:
$LN8@PMC_Compar:

; 515  :         }
; 516  :     }
; 517  : #ifdef _DEBUG
; 518  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN17@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN17@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN17@PMC_Compar

; 519  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN17@PMC_Compar:

; 520  : #endif
; 521  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 522  : }

	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_X_UX
_TEXT	SEGMENT
result$ = 4
nu$ = 40
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_X_UX PROC					; COMDAT

; 391  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 392  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 393  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 394  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 395  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 396  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN4@PMC_Compar

; 397  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 398  :     PMC_STATUS_CODE result;
; 399  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 400  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN5@PMC_Compar

; 401  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 402  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN6@PMC_Compar

; 403  :     {
; 404  :         // u == 0 の場合
; 405  : 
; 406  :         if (v->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@PMC_Compar

; 407  :         {
; 408  :             // v == 0 の場合
; 409  : 
; 410  :             // 0 を返す
; 411  :             *w = 0;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 0

; 412  :         }

	jmp	SHORT $LN9@PMC_Compar
$LN8@PMC_Compar:

; 413  :         else
; 414  :         {
; 415  :             // v > 0 の場合
; 416  : 
; 417  :             // -1 を返す
; 418  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
$LN9@PMC_Compar:

; 419  :         }
; 420  :     }

	jmp	SHORT $LN7@PMC_Compar
$LN6@PMC_Compar:

; 421  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jle	SHORT $LN10@PMC_Compar

; 422  :     {
; 423  :         // u > 0 の場合
; 424  : 
; 425  :         if (v->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@PMC_Compar

; 426  :         {
; 427  :             // v == 0 の場合
; 428  : 
; 429  :             // 1 を返す
; 430  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 431  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 432  :         else
; 433  :         {
; 434  :             // v > 0 の場合
; 435  : 
; 436  :             // abs(u) と abs(v) の比較結果を返す
; 437  :             if ((result = CompareU_X_X_Imp(1, nu->ABS, v, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Compar

; 438  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:
$LN13@PMC_Compar:

; 439  :         }
; 440  :     }

	jmp	SHORT $LN11@PMC_Compar
$LN10@PMC_Compar:

; 441  :     else
; 442  :     {
; 443  :         // u < 0 の場合
; 444  : 
; 445  :         // -1 を返す
; 446  :         *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1
$LN11@PMC_Compar:
$LN7@PMC_Compar:

; 447  :     }
; 448  : #ifdef _DEBUG
; 449  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN15@PMC_Compar

; 450  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 451  : #endif
; 452  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 453  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_X_L
_TEXT	SEGMENT
result$ = 4
nu$ = 40
v_sign$ = 68
v_abs$ = 104
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Compare_X_L PROC					; COMDAT

; 325  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 326  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 327  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 328  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 329  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 330  :     PMC_STATUS_CODE result;
; 331  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 332  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Compar

; 333  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 334  :     char v_sign;
; 335  :     _UINT64_T v_abs = GET_ABS_64(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR v_abs$[rbp], rax

; 336  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 337  :     {
; 338  :         // u == 0 の場合
; 339  : 
; 340  :         // v の符号の反対を返す
; 341  :         *w = -v_sign;

	movsx	eax, BYTE PTR v_sign$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 342  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 343  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 344  :     {
; 345  :         // u > 0 の場合
; 346  : 
; 347  :         if (v_sign <= 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 348  :         {
; 349  :             // v == 0 の場合
; 350  : 
; 351  :             // 1 を返す
; 352  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 353  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 354  :         else
; 355  :         {
; 356  :             // v > 0 の場合
; 357  : 
; 358  :             // abs(u) と abs(v) の比較結果を返す
; 359  :             if ((result = CompareU_X_L_Imp(1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Compar

; 360  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN11@PMC_Compar:
$LN10@PMC_Compar:

; 361  :         }
; 362  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 363  :     else
; 364  :     {
; 365  :         // u < 0 の場合
; 366  : 
; 367  :         if (v_sign >= 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 368  :         {
; 369  :             // v == 0 の場合
; 370  : 
; 371  :             // -1 を返す
; 372  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 373  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 374  :         else
; 375  :         {
; 376  :             // v < 0 の場合
; 377  : 
; 378  :             // -abs(u) と -abs(v) の比較結果を返す
; 379  :             if ((result = CompareU_X_L_Imp(-1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, -1
	call	CompareU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Compar

; 380  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:
$LN13@PMC_Compar:
$LN8@PMC_Compar:
$LN6@PMC_Compar:

; 381  :         }
; 382  :     }
; 383  : #ifdef _DEBUG
; 384  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN15@PMC_Compar

; 385  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 386  : #endif
; 387  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 388  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_X_I
_TEXT	SEGMENT
result$ = 4
nu$ = 40
v_sign$ = 68
v_abs$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Compare_X_I PROC					; COMDAT

; 259  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 260  :     if (u == NULL)

	cmp	QWORD PTR u$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 262  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 263  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 264  :     PMC_STATUS_CODE result;
; 265  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	rax, QWORD PTR u$[rbp]
	mov	QWORD PTR nu$[rbp], rax

; 266  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nu$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Compar

; 267  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 268  :     char v_sign;
; 269  :     _UINT32_T v_abs = GET_ABS_32(v, &v_sign);

	lea	rdx, QWORD PTR v_sign$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR v_abs$[rbp], eax

; 270  :     if (nu->SIGN == 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 271  :     {
; 272  :         // u == 0 の場合
; 273  : 
; 274  :         // v の符号の反対を返す
; 275  :         *w = -v_sign;

	movsx	eax, BYTE PTR v_sign$[rbp]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 276  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 277  :     else if (nu->SIGN > 0)

	mov	rax, QWORD PTR nu$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 278  :     {
; 279  :         // u > 0 の場合
; 280  : 
; 281  :         if (v_sign <= 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 282  :         {
; 283  :             // v == 0 の場合
; 284  : 
; 285  :             // 1 を返す
; 286  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 287  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 288  :         else
; 289  :         {
; 290  :             // v > 0 の場合
; 291  : 
; 292  :             // abs(u) と abs(v) の比較結果を返す
; 293  :             if ((result = CompareU_X_I_Imp(1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8d, DWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Compar

; 294  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN11@PMC_Compar:
$LN10@PMC_Compar:

; 295  :         }
; 296  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 297  :     else
; 298  :     {
; 299  :         // u < 0 の場合
; 300  : 
; 301  :         if (v_sign >= 0)

	movsx	eax, BYTE PTR v_sign$[rbp]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 302  :         {
; 303  :             // v == 0 の場合
; 304  : 
; 305  :             // -1 を返す
; 306  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 307  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 308  :         else
; 309  :         {
; 310  :             // v < 0 の場合
; 311  : 
; 312  :             // -abs(u) と -abs(v) の比較結果を返す
; 313  :             if ((result = CompareU_X_I_Imp(-1, nu->ABS, v_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8d, DWORD PTR v_abs$[rbp]
	mov	rax, QWORD PTR nu$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, -1
	call	CompareU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Compar

; 314  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:
$LN13@PMC_Compar:
$LN8@PMC_Compar:
$LN6@PMC_Compar:

; 315  :         }
; 316  :     }
; 317  : #ifdef _DEBUG
; 318  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN15@PMC_Compar

; 319  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 320  : #endif
; 321  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 322  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_UX_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
u$ = 288
v$ = 296
w$ = 304
PMC_Compare_UX_X PROC					; COMDAT

; 215  : {

$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 216  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 217  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 218  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 219  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 220  :     PMC_STATUS_CODE result;
; 221  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 222  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Compar

; 223  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 224  :     if (u->FLAGS.IS_ZERO)

	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@PMC_Compar

; 225  :     {
; 226  :         // u == 0 の場合
; 227  : 
; 228  :         // v の符号の反対を返す
; 229  :         *w = -nv->SIGN;

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 230  :     }

	jmp	SHORT $LN6@PMC_Compar
$LN5@PMC_Compar:

; 231  :     else
; 232  :     {
; 233  :         // u > 0 の場合
; 234  : 
; 235  :         if (nv->SIGN <= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jg	SHORT $LN7@PMC_Compar

; 236  :         {
; 237  :             // v == 0 の場合
; 238  : 
; 239  :             // 1 を返す
; 240  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 241  :         }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 242  :         else
; 243  :         {
; 244  :             // v > 0 の場合
; 245  : 
; 246  :             // abs(u) と abs(v) の比較結果を返す
; 247  :             if ((result = CompareU_X_X_Imp(1, u, nv->ABS, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	r8, QWORD PTR [rax+16]
	mov	rdx, QWORD PTR u$[rbp]
	mov	cl, 1
	call	CompareU_X_X_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN9@PMC_Compar

; 248  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN9@PMC_Compar:
$LN8@PMC_Compar:
$LN6@PMC_Compar:

; 249  :         }
; 250  :     }
; 251  : #ifdef _DEBUG
; 252  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN10@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN10@PMC_Compar

; 253  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 254  : #endif
; 255  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 256  : }

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_L_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
u_sign$ = 68
u_abs$ = 104
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Compare_L_X PROC					; COMDAT

; 149  : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 150  :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 151  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 152  :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 153  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 154  :     PMC_STATUS_CODE result;
; 155  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 156  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Compar

; 157  :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 158  :     char u_sign;
; 159  :     _UINT64_T u_abs = GET_ABS_64(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	call	GET_ABS_64
	mov	QWORD PTR u_abs$[rbp], rax

; 160  :     if (u_sign == 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 161  :     {
; 162  :         // u == 0 の場合
; 163  : 
; 164  :         // v の符号の反対を返す
; 165  :         *w = - nv->SIGN;

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 166  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 167  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 168  :     {
; 169  :         // u > 0 の場合
; 170  : 
; 171  :         if (nv->SIGN <= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 172  :         {
; 173  :             // v <= 0 の場合
; 174  : 
; 175  :             // 1 を返す
; 176  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 177  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 178  :         else
; 179  :         {
; 180  :             // v > 0 の場合
; 181  : 
; 182  :             // abs(u) と abs(v) の比較結果を返す
; 183  :             if ((result = CompareU_X_L_Imp(-1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, -1
	call	CompareU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Compar

; 184  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN11@PMC_Compar:
$LN10@PMC_Compar:

; 185  :         }
; 186  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 187  :     else
; 188  :     {
; 189  :         // u < 0 の場合
; 190  : 
; 191  :         if (nv->SIGN >= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 192  :         {
; 193  :             // v == 0 の場合
; 194  : 
; 195  :             // -1 を返す
; 196  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 197  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 198  :         else
; 199  :         {
; 200  :             // v < 0 の場合
; 201  : 
; 202  :             // -abs(u) と -abs(v) の比較結果を返す
; 203  :             if ((result = CompareU_X_L_Imp(1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8, QWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_L_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Compar

; 204  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:
$LN13@PMC_Compar:
$LN8@PMC_Compar:
$LN6@PMC_Compar:

; 205  :         }
; 206  :     }
; 207  : #ifdef _DEBUG
; 208  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN15@PMC_Compar

; 209  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 210  : #endif
; 211  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 212  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_compare.c
;	COMDAT PMC_Compare_I_X
_TEXT	SEGMENT
result$ = 4
nv$ = 40
u_sign$ = 68
u_abs$ = 100
__$ArrayPad$ = 312
u$ = 352
v$ = 360
w$ = 368
PMC_Compare_I_X PROC					; COMDAT

; 83   : {

$LN17:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C8C7A597_pmc_compare@c
	call	__CheckForDebuggerJustMyCode

; 84   :     if (v == NULL)

	cmp	QWORD PTR v$[rbp], 0
	jne	SHORT $LN2@PMC_Compar

; 85   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 86   :     if (w == NULL)

	cmp	QWORD PTR w$[rbp], 0
	jne	SHORT $LN3@PMC_Compar

; 87   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 88   :     PMC_STATUS_CODE result;
; 89   :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR nv$[rbp], rax

; 90   :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nv$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN4@PMC_Compar

; 91   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 92   :     char u_sign;
; 93   :     _UINT32_T u_abs = GET_ABS_32(u, &u_sign);

	lea	rdx, QWORD PTR u_sign$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	call	GET_ABS_32
	mov	DWORD PTR u_abs$[rbp], eax

; 94   :     if (u_sign == 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN5@PMC_Compar

; 95   :     {
; 96   :         // u == 0 の場合
; 97   : 
; 98   :         // v の符号の反対を返す
; 99   :         *w = - nv->SIGN;

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	neg	eax
	mov	rcx, QWORD PTR w$[rbp]
	mov	DWORD PTR [rcx], eax

; 100  :     }

	jmp	$LN6@PMC_Compar
$LN5@PMC_Compar:

; 101  :     else if (u_sign > 0)

	movsx	eax, BYTE PTR u_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN7@PMC_Compar

; 102  :     {
; 103  :         // u > 0 の場合
; 104  : 
; 105  :         if (nv->SIGN <= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jg	SHORT $LN9@PMC_Compar

; 106  :         {
; 107  :             // v <= 0 の場合
; 108  : 
; 109  :             // 1 を返す
; 110  :             *w = 1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], 1

; 111  :         }

	jmp	SHORT $LN10@PMC_Compar
$LN9@PMC_Compar:

; 112  :         else
; 113  :         {
; 114  :             // v > 0 の場合
; 115  : 
; 116  :             // abs(u) と abs(v) の比較結果を返す
; 117  :             if ((result = CompareU_X_I_Imp(-1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8d, DWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, -1
	call	CompareU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN11@PMC_Compar

; 118  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN11@PMC_Compar:
$LN10@PMC_Compar:

; 119  :         }
; 120  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 121  :     else
; 122  :     {
; 123  :         // u < 0 の場合
; 124  : 
; 125  :         if (nv->SIGN >= 0)

	mov	rax, QWORD PTR nv$[rbp]
	movsx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jl	SHORT $LN12@PMC_Compar

; 126  :         {
; 127  :             // v >= 0 の場合
; 128  : 
; 129  :             // -1 を返す
; 130  :             *w = -1;

	mov	rax, QWORD PTR w$[rbp]
	mov	DWORD PTR [rax], -1

; 131  :         }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 132  :         else
; 133  :         {
; 134  :             // v < 0 の場合
; 135  : 
; 136  :             // -abs(u) と -abs(v) の比較結果を返す
; 137  :             if ((result = CompareU_X_I_Imp(1, nv->ABS, u_abs, w)) != PMC_STATUS_OK)

	mov	r9, QWORD PTR w$[rbp]
	mov	r8d, DWORD PTR u_abs$[rbp]
	mov	rax, QWORD PTR nv$[rbp]
	mov	rdx, QWORD PTR [rax+16]
	mov	cl, 1
	call	CompareU_X_I_Imp
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN14@PMC_Compar

; 138  :                 return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:
$LN13@PMC_Compar:
$LN8@PMC_Compar:
$LN6@PMC_Compar:

; 139  :         }
; 140  :     }
; 141  : #ifdef _DEBUG
; 142  :     if (*w != 0 && *w != 1 && *w != -1)

	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN15@PMC_Compar
	mov	rax, QWORD PTR w$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN15@PMC_Compar

; 143  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN15@PMC_Compar:

; 144  : #endif
; 145  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 146  : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_Compare_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_Compare_I_X ENDP
_TEXT	ENDS
END
