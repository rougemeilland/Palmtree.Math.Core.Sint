; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__9DF65EBA_pmc_to@c DB 01H
msvcjmc	ENDS
PUBLIC	PMC_To_X_I
PUBLIC	PMC_To_X_L
PUBLIC	__JustMyCode_Default
EXTRN	CheckNumber:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	ep_uint:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_To_X_I DD imagerel $LN11
	DD	imagerel $LN11+296
	DD	imagerel $unwind$PMC_To_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_To_X_L DD imagerel $LN11
	DD	imagerel $LN11+316
	DD	imagerel $unwind$PMC_To_X_L
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_To_X_L DD 025054019H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_To_X_L$rtcName$0 DB 070H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
PMC_To_X_L$rtcVarDesc DD 088H
	DD	08H
	DQ	FLAT:PMC_To_X_L$rtcName$0
	ORG $+48
PMC_To_X_L$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_To_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_To_X_I DD 025054019H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
PMC_To_X_I$rtcName$0 DB 070H
	DB	05fH
	DB	061H
	DB	062H
	DB	073H
	DB	00H
	ORG $+10
PMC_To_X_I$rtcVarDesc DD 084H
	DD	04H
	DQ	FLAT:PMC_To_X_I$rtcName$0
	ORG $+48
PMC_To_X_I$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:PMC_To_X_I$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_to.c
;	COMDAT PMC_To_X_L
_TEXT	SEGMENT
np$ = 8
result$ = 36
p_sign$ = 68
p_abs$ = 104
__$ArrayPad$ = 312
p$ = 352
o$ = 360
PMC_To_X_L PROC						; COMDAT

; 58   : {

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9DF65EBA_pmc_to@c
	call	__CheckForDebuggerJustMyCode

; 59   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 60   :     PMC_STATUS_CODE result;
; 61   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@PMC_To_X_L

; 62   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_To_X_L
$LN2@PMC_To_X_L:

; 63   :     char p_sign = np->SIGN;

	mov	rax, QWORD PTR np$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	mov	BYTE PTR p_sign$[rbp], al

; 64   :     _UINT64_T p_abs;
; 65   :     if ((result = ep_uint.To_X_L(np->ABS, &p_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR p_abs$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+96
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_To_X_L

; 66   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_To_X_L
$LN3@PMC_To_X_L:

; 67   :     if (p_sign == 0)

	movsx	eax, BYTE PTR p_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN4@PMC_To_X_L

; 68   :         *o = 0;

	mov	rax, QWORD PTR o$[rbp]
	mov	QWORD PTR [rax], 0
	jmp	SHORT $LN5@PMC_To_X_L
$LN4@PMC_To_X_L:

; 69   :     else if (p_sign > 0)

	movsx	eax, BYTE PTR p_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN6@PMC_To_X_L

; 70   :     {
; 71   :         if (p_abs > 0x7fffffffffffffffLU)

	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	cmp	QWORD PTR p_abs$[rbp], rax
	jbe	SHORT $LN8@PMC_To_X_L

; 72   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_To_X_L
$LN8@PMC_To_X_L:

; 73   :         *o = (_INT64_T)p_abs;

	mov	rax, QWORD PTR o$[rbp]
	mov	rcx, QWORD PTR p_abs$[rbp]
	mov	QWORD PTR [rax], rcx

; 74   :     }

	jmp	SHORT $LN7@PMC_To_X_L
$LN6@PMC_To_X_L:

; 75   :     else
; 76   :     {
; 77   :         if (p_abs > 0x8000000000000000LU)

	mov	rax, -9223372036854775808		; 8000000000000000H
	cmp	QWORD PTR p_abs$[rbp], rax
	jbe	SHORT $LN9@PMC_To_X_L

; 78   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_To_X_L
$LN9@PMC_To_X_L:

; 79   :         *o = -(_INT64_T)p_abs;

	mov	rax, QWORD PTR p_abs$[rbp]
	neg	rax
	mov	rcx, QWORD PTR o$[rbp]
	mov	QWORD PTR [rcx], rax
$LN7@PMC_To_X_L:
$LN5@PMC_To_X_L:

; 80   :     }
; 81   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_L:

; 82   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_To_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_To_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_to.c
;	COMDAT PMC_To_X_I
_TEXT	SEGMENT
np$ = 8
result$ = 36
p_sign$ = 68
p_abs$ = 100
__$ArrayPad$ = 312
p$ = 352
o$ = 360
PMC_To_X_I PROC						; COMDAT

; 31   : {

$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9DF65EBA_pmc_to@c
	call	__CheckForDebuggerJustMyCode

; 32   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR np$[rbp], rax

; 33   :     PMC_STATUS_CODE result;
; 34   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR np$[rbp]
	call	CheckNumber
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN2@PMC_To_X_I

; 35   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	$LN1@PMC_To_X_I
$LN2@PMC_To_X_I:

; 36   :     char p_sign = np->SIGN;

	mov	rax, QWORD PTR np$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	mov	BYTE PTR p_sign$[rbp], al

; 37   :     _UINT32_T p_abs;
; 38   :     if ((result = ep_uint.To_X_I(np->ABS, &p_abs)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR p_abs$[rbp]
	mov	rax, QWORD PTR np$[rbp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR ep_uint+88
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	je	SHORT $LN3@PMC_To_X_I

; 39   :         return (result);

	mov	eax, DWORD PTR result$[rbp]
	jmp	SHORT $LN1@PMC_To_X_I
$LN3@PMC_To_X_I:

; 40   :     if (p_sign == 0)

	movsx	eax, BYTE PTR p_sign$[rbp]
	test	eax, eax
	jne	SHORT $LN4@PMC_To_X_I

; 41   :         *o = 0;

	mov	rax, QWORD PTR o$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN5@PMC_To_X_I
$LN4@PMC_To_X_I:

; 42   :     else if (p_sign > 0)

	movsx	eax, BYTE PTR p_sign$[rbp]
	test	eax, eax
	jle	SHORT $LN6@PMC_To_X_I

; 43   :     {
; 44   :         if (p_abs > 0x7fffffffU)

	cmp	DWORD PTR p_abs$[rbp], 2147483647	; 7fffffffH
	jbe	SHORT $LN8@PMC_To_X_I

; 45   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_To_X_I
$LN8@PMC_To_X_I:

; 46   :         *o = (_INT32_T)p_abs;

	mov	rax, QWORD PTR o$[rbp]
	mov	ecx, DWORD PTR p_abs$[rbp]
	mov	DWORD PTR [rax], ecx

; 47   :     }

	jmp	SHORT $LN7@PMC_To_X_I
$LN6@PMC_To_X_I:

; 48   :     else
; 49   :     {
; 50   :         if (p_abs > 0x80000000U)

	cmp	DWORD PTR p_abs$[rbp], -2147483648	; 80000000H
	jbe	SHORT $LN9@PMC_To_X_I

; 51   :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2
	jmp	SHORT $LN1@PMC_To_X_I
$LN9@PMC_To_X_I:

; 52   :         *o = -(_INT32_T)p_abs;

	mov	eax, DWORD PTR p_abs$[rbp]
	neg	eax
	mov	rcx, QWORD PTR o$[rbp]
	mov	DWORD PTR [rcx], eax
$LN7@PMC_To_X_I:
$LN5@PMC_To_X_I:

; 53   :     }
; 54   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_I:

; 55   : }   

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:PMC_To_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
PMC_To_X_I ENDP
_TEXT	ENDS
END
