; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	uint_number_zero:QWORD
COMM	uint_number_one:QWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__059414E1_pmc_sint_debug@h DB 01H
__9E9C72DE_test_op_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	TEST_Multiply_I_X
PUBLIC	TEST_Multiply_L_X
PUBLIC	TEST_Multiply_UX_X
PUBLIC	TEST_Multiply_X_I
PUBLIC	TEST_Multiply_X_L
PUBLIC	TEST_Multiply_X_UX
PUBLIC	TEST_Multiply_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ ; `string'
PUBLIC	??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ ; `string'
PUBLIC	??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@ ; `string'
PUBLIC	??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@ ; `string'
PUBLIC	??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@ ; `string'
PUBLIC	??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ ; `string'
EXTRN	TEST_Assert:PROC
EXTRN	FormatTestLabel:PROC
EXTRN	FormatTestMesssage:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_I_X DD imagerel $LN13
	DD	imagerel $LN13+734
	DD	imagerel $unwind$TEST_Multiply_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_L_X DD imagerel $LN13
	DD	imagerel $LN13+735
	DD	imagerel $unwind$TEST_Multiply_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_UX_X DD imagerel $LN16
	DD	imagerel $LN16+901
	DD	imagerel $unwind$TEST_Multiply_UX_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_X_I DD imagerel $LN13
	DD	imagerel $LN13+734
	DD	imagerel $unwind$TEST_Multiply_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_X_L DD imagerel $LN13
	DD	imagerel $LN13+735
	DD	imagerel $unwind$TEST_Multiply_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_X_UX DD imagerel $LN16
	DD	imagerel $LN16+901
	DD	imagerel $unwind$TEST_Multiply_X_UX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TEST_Multiply_X_X DD imagerel $LN16
	DD	imagerel $LN16+907
	DD	imagerel $unwind$TEST_Multiply_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_EQUALS_MEMORY DD imagerel _EQUALS_MEMORY
	DD	imagerel _EQUALS_MEMORY+198
	DD	imagerel $unwind$_EQUALS_MEMORY
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
CONST	SEGMENT
??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@ DB 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'U', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
CONST	SEGMENT
??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'U', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' '
	DB	00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
CONST	SEGMENT
??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@ DB 0c7H
	DB	'0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H, 'N', 0f4H
	DB	081H, 'W0j0D0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
CONST	SEGMENT
??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@ DB 'T'
	DB	00H, 'o', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
CONST	SEGMENT
??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
CONST	SEGMENT
??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@ DB 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
CONST	SEGMENT
??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@ DB 'F'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H
	DB	'e', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n'
	DB	'0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H
	DB	'_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_EQUALS_MEMORY DD 025053901H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_X_X DD 025054a19H
	DD	011d2322H
	DD	07016007bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_X_X$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Multiply_X_X$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Multiply_X_X$rtcName$2 DB 077H
	DB	00H
	ORG $+6
TEST_Multiply_X_X$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	07aH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_X_X$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	07aH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+14
TEST_Multiply_X_X$rtcVarDesc DD 01a8H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_X$rtcName$4
	DD	090H
	DD	0100H
	DQ	FLAT:TEST_Multiply_X_X$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_X$rtcName$0
	ORG $+240
TEST_Multiply_X_X$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:TEST_Multiply_X_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_X_UX DD 025054a19H
	DD	011d2322H
	DD	07016007bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_X_UX$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Multiply_X_UX$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Multiply_X_UX$rtcName$2 DB 077H
	DB	00H
	ORG $+6
TEST_Multiply_X_UX$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	07aH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_X_UX$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	07aH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+14
TEST_Multiply_X_UX$rtcVarDesc DD 01a8H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_UX$rtcName$4
	DD	090H
	DD	0100H
	DQ	FLAT:TEST_Multiply_X_UX$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_UX$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_UX$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_UX$rtcName$0
	ORG $+240
TEST_Multiply_X_UX$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:TEST_Multiply_X_UX$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_X_L DD 025054a19H
	DD	011d2322H
	DD	07016005bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_X_L$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Multiply_X_L$rtcName$1 DB 077H
	DB	00H
	ORG $+2
TEST_Multiply_X_L$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_X_L$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_Multiply_X_L$rtcVarDesc DD 0188H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_L$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_Multiply_X_L$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_L$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_L$rtcName$0
	ORG $+192
TEST_Multiply_X_L$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:TEST_Multiply_X_L$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_X_I DD 025054a19H
	DD	011d2322H
	DD	07016005bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_X_I$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Multiply_X_I$rtcName$1 DB 077H
	DB	00H
	ORG $+2
TEST_Multiply_X_I$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_X_I$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_Multiply_X_I$rtcVarDesc DD 0188H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_I$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_Multiply_X_I$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_I$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_X_I$rtcName$0
	ORG $+192
TEST_Multiply_X_I$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:TEST_Multiply_X_I$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_UX_X DD 025054a19H
	DD	011d2322H
	DD	07016007bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_UX_X$rtcName$0 DB 075H
	DB	00H
	ORG $+2
TEST_Multiply_UX_X$rtcName$1 DB 076H
	DB	00H
	ORG $+2
TEST_Multiply_UX_X$rtcName$2 DB 077H
	DB	00H
	ORG $+6
TEST_Multiply_UX_X$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_UX_X$rtcName$4 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+14
TEST_Multiply_UX_X$rtcVarDesc DD 01a8H
	DD	08H
	DQ	FLAT:TEST_Multiply_UX_X$rtcName$4
	DD	090H
	DD	0100H
	DQ	FLAT:TEST_Multiply_UX_X$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:TEST_Multiply_UX_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_UX_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_UX_X$rtcName$0
	ORG $+240
TEST_Multiply_UX_X$rtcFrameData DD 05H
	DD	00H
	DQ	FLAT:TEST_Multiply_UX_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_L_X DD 025054a19H
	DD	011d2322H
	DD	07016005bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_L_X$rtcName$0 DB 076H
	DB	00H
	ORG $+2
TEST_Multiply_L_X$rtcName$1 DB 077H
	DB	00H
	ORG $+2
TEST_Multiply_L_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_L_X$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_Multiply_L_X$rtcVarDesc DD 0188H
	DD	08H
	DQ	FLAT:TEST_Multiply_L_X$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_Multiply_L_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_L_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_L_X$rtcName$0
	ORG $+192
TEST_Multiply_L_X$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:TEST_Multiply_L_X$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TEST_Multiply_I_X DD 025054a19H
	DD	011d2322H
	DD	07016005bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
TEST_Multiply_I_X$rtcName$0 DB 076H
	DB	00H
	ORG $+2
TEST_Multiply_I_X$rtcName$1 DB 077H
	DB	00H
	ORG $+2
TEST_Multiply_I_X$rtcName$2 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+3
TEST_Multiply_I_X$rtcName$3 DB 061H
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
TEST_Multiply_I_X$rtcVarDesc DD 0188H
	DD	08H
	DQ	FLAT:TEST_Multiply_I_X$rtcName$3
	DD	070H
	DD	0100H
	DQ	FLAT:TEST_Multiply_I_X$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:TEST_Multiply_I_X$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:TEST_Multiply_I_X$rtcName$0
	ORG $+192
TEST_Multiply_I_X$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:TEST_Multiply_I_X$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\pmc_sint_debug.h
;	COMDAT _EQUALS_MEMORY
_TEXT	SEGMENT
buffer1$ = 224
count1$ = 232
buffer2$ = 240
count2$ = 248
_EQUALS_MEMORY PROC					; COMDAT

; 125  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	lea	rcx, OFFSET FLAT:__059414E1_pmc_sint_debug@h
	call	__CheckForDebuggerJustMyCode

; 126  :     if (count1 != count2)

	mov	rax, QWORD PTR count2$[rbp]
	cmp	QWORD PTR count1$[rbp], rax
	je	SHORT $LN4@EQUALS_MEM

; 127  :         return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN4@EQUALS_MEM:
$LN2@EQUALS_MEM:

; 128  :     while (count1 > 0)

	cmp	QWORD PTR count1$[rbp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 129  :     {
; 130  :         if (*buffer1 != *buffer2)

	mov	rax, QWORD PTR buffer1$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR buffer2$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN5@EQUALS_MEM

; 131  :             return (-1);

	mov	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 132  :         ++buffer1;

	mov	rax, QWORD PTR buffer1$[rbp]
	inc	rax
	mov	QWORD PTR buffer1$[rbp], rax

; 133  :         ++buffer2;

	mov	rax, QWORD PTR buffer2$[rbp]
	inc	rax
	mov	QWORD PTR buffer2$[rbp], rax

; 134  :         --count1;

	mov	rax, QWORD PTR count1$[rbp]
	dec	rax
	mov	QWORD PTR count1$[rbp], rax

; 135  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 136  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 137  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_X_X
_TEXT	SEGMENT
u$ = 8
v$ = 40
w$ = 72
actual_z_buf$ = 112
actual_z_buf_size$ = 392
result$ = 420
u_result$ = 452
v_result$ = 484
w_result$ = 516
tv176 = 916
tv161 = 916
tv142 = 916
tv92 = 916
tv74 = 916
tv150 = 920
tv132 = 920
tv82 = 920
tv64 = 920
__$ArrayPad$ = 928
env$ = 976
ep$ = 984
no$ = 992
u_buf$ = 1000
u_buf_size$ = 1008
v_buf$ = 1016
v_buf_size$ = 1024
desired_w_buf$ = 1032
desired_w_buf_size$ = 1040
TEST_Multiply_X_X PROC					; COMDAT

; 156  : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 984				; 000003d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1016]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 157  :     PMC_HANDLE_SINT u;
; 158  :     PMC_HANDLE_SINT v;
; 159  :     PMC_HANDLE_SINT w;
; 160  :     unsigned char actual_z_buf[256];
; 161  :     size_t actual_z_buf_size;
; 162  :     PMC_STATUS_CODE result;
; 163  :     PMC_STATUS_CODE u_result;
; 164  :     PMC_STATUS_CODE v_result;
; 165  :     PMC_STATUS_CODE w_result;
; 166  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EK@HDEICNAJ@?$AAP?$AAM?$AAC?$AA_?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 167  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 168  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 3), (w_result = ep->Multiply_X_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Xの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+800]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[rbp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EA@FBIDJKKB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 169  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_z_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[rbp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[rbp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv150[rbp], rax
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv150[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv161[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 170  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_z_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_z_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[rbp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[rbp], 0
$LN15@TEST_Multi:
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@JMONHJCM@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv176[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 171  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 172  :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 173  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 174  :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 175  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_Multi

; 176  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN4@TEST_Multi:

; 177  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_X_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+952]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_X_UX
_TEXT	SEGMENT
u$ = 8
v$ = 40
w$ = 72
actual_z_buf$ = 112
actual_z_buf_size$ = 392
result$ = 420
u_result$ = 452
v_result$ = 484
w_result$ = 516
tv176 = 916
tv161 = 916
tv142 = 916
tv92 = 916
tv74 = 916
tv150 = 920
tv132 = 920
tv82 = 920
tv64 = 920
__$ArrayPad$ = 928
env$ = 976
ep$ = 984
no$ = 992
u_buf$ = 1000
u_buf_size$ = 1008
v_buf$ = 1016
v_buf_size$ = 1024
desired_w_buf$ = 1032
desired_w_buf_size$ = 1040
TEST_Multiply_X_UX PROC					; COMDAT

; 133  : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 984				; 000003d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1016]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 134  :     PMC_HANDLE_SINT u;
; 135  :     PMC_HANDLE_UINT v;
; 136  :     PMC_HANDLE_SINT w;
; 137  :     unsigned char actual_z_buf[256];
; 138  :     size_t actual_z_buf_size;
; 139  :     PMC_STATUS_CODE result;
; 140  :     PMC_STATUS_CODE u_result;
; 141  :     PMC_STATUS_CODE v_result;
; 142  :     PMC_STATUS_CODE w_result;
; 143  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 144  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 2), (v_result = ep->UINT_ENTRY_POINTS.FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 145  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 3), (w_result = ep->Multiply_X_UX(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_UXの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+792]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[rbp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@ONJOCOKL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 146  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_z_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_z_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[rbp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[rbp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv150[rbp], rax
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv150[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv161[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 147  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_UX (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_z_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_z_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[rbp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[rbp], 0
$LN15@TEST_Multi:
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@NLOJAHFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAU?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv176[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 148  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 149  :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 150  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 151  :         ep->UINT_ENTRY_POINTS.Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN3@TEST_Multi:

; 152  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_Multi

; 153  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN4@TEST_Multi:

; 154  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_X_UX$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+952]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_X_UX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_X_L
_TEXT	SEGMENT
u$ = 8
w$ = 40
actual_w_buf$ = 80
actual_w_buf_size$ = 360
result$ = 388
u_result$ = 420
w_result$ = 452
tv158 = 660
tv143 = 660
tv92 = 660
tv74 = 660
tv132 = 664
tv82 = 664
tv64 = 664
__$ArrayPad$ = 672
env$ = 720
ep$ = 728
no$ = 736
u_buf$ = 744
u_buf_size$ = 752
v$ = 760
desired_w_buf$ = 768
desired_w_buf_size$ = 776
TEST_Multiply_X_L PROC					; COMDAT

; 114  : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 115  :     PMC_HANDLE_SINT u;
; 116  :     PMC_HANDLE_SINT w;
; 117  :     unsigned char actual_w_buf[256];
; 118  :     size_t actual_w_buf_size;
; 119  :     PMC_STATUS_CODE result;
; 120  :     PMC_STATUS_CODE u_result;
; 121  :     PMC_STATUS_CODE w_result;
; 122  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 123  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 2), (w_result = ep->Multiply_X_L(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Lの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+784]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EA@KLMAOKLE@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AAn?$PP?$KJ?$AA0@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 124  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_w_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[rbp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv143[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 125  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_w_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_w_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[rbp], 0
$LN12@TEST_Multi:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@DCMGDJFA@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAL?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv158[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 126  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 127  :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 128  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 129  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 130  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_X_L$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_X_I
_TEXT	SEGMENT
u$ = 8
w$ = 40
actual_w_buf$ = 80
actual_w_buf_size$ = 360
result$ = 388
u_result$ = 420
w_result$ = 452
tv158 = 660
tv143 = 660
tv92 = 660
tv74 = 660
tv132 = 664
tv82 = 664
tv64 = 664
__$ArrayPad$ = 672
env$ = 720
ep$ = 728
no$ = 736
u_buf$ = 744
u_buf_size$ = 752
v$ = 760
desired_w_buf$ = 768
desired_w_buf_size$ = 776
TEST_Multiply_X_I PROC					; COMDAT

; 95   : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 96   :     PMC_HANDLE_SINT u;
; 97   :     PMC_HANDLE_SINT w;
; 98   :     unsigned char actual_w_buf[256];
; 99   :     size_t actual_w_buf_size;
; 100  :     PMC_STATUS_CODE result;
; 101  :     PMC_STATUS_CODE u_result;
; 102  :     PMC_STATUS_CODE w_result;
; 103  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 104  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 2), (w_result = ep->Multiply_X_I(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_X_Iの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	edx, DWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+776]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EA@ODIMHHCB@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AAn?$PP?$KJ?$AA0@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 105  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_w_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[rbp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv143[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 106  :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_w_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_w_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[rbp], 0
$LN12@TEST_Multi:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@BJEMOJEP@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAX?$AA_?$AAI?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv158[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 107  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 108  :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 109  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 110  :         ep->Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 111  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_X_I$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_UX_X
_TEXT	SEGMENT
u$ = 8
v$ = 40
w$ = 72
actual_w_buf$ = 112
actual_w_buf_size$ = 392
result$ = 420
u_result$ = 452
v_result$ = 484
w_result$ = 516
tv176 = 916
tv161 = 916
tv142 = 916
tv92 = 916
tv74 = 916
tv150 = 920
tv132 = 920
tv82 = 920
tv64 = 920
__$ArrayPad$ = 928
env$ = 976
ep$ = 984
no$ = 992
u_buf$ = 1000
u_buf_size$ = 1008
v_buf$ = 1016
v_buf_size$ = 1024
desired_w_buf$ = 1032
desired_w_buf_size$ = 1040
TEST_Multiply_UX_X PROC					; COMDAT

; 71   : {

$LN16:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 984				; 000003d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1016]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 72   :     PMC_HANDLE_UINT u;
; 73   :     PMC_HANDLE_SINT v;
; 74   :     PMC_HANDLE_SINT w;
; 75   :     unsigned char actual_w_buf[256];
; 76   :     size_t actual_w_buf_size;
; 77   :     PMC_STATUS_CODE result;
; 78   :     PMC_STATUS_CODE u_result;
; 79   :     PMC_STATUS_CODE v_result;
; 80   :     PMC_STATUS_CODE w_result;
; 81   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 1), (u_result = ep->UINT_ENTRY_POINTS.FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	lea	r8, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR u_buf_size$[rbp]
	mov	rcx, QWORD PTR u_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR u_result$[rbp], eax
	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN6@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN7@TEST_Multi
$LN6@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN7@TEST_Multi:
	mov	edx, DWORD PTR u_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 82   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN8@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN9@TEST_Multi
$LN8@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN9@TEST_Multi:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 83   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 3), (w_result = ep->Multiply_UX_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_UX_Xの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+768]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN10@TEST_Multi
	mov	DWORD PTR tv142[rbp], 1
	jmp	SHORT $LN11@TEST_Multi
$LN10@TEST_Multi:
	mov	DWORD PTR tv142[rbp], 0
$LN11@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@GKHLGAIL@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv142[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 84   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_w_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN12@TEST_Multi
	mov	DWORD PTR tv161[rbp], 1
	jmp	SHORT $LN13@TEST_Multi
$LN12@TEST_Multi:
	mov	DWORD PTR tv161[rbp], 0
$LN13@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv150[rbp], rax
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv150[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv161[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 85   :     TEST_Assert(env, FormatTestLabel(L"Multiply_UX_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_w_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_w_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN14@TEST_Multi
	mov	DWORD PTR tv176[rbp], 1
	jmp	SHORT $LN15@TEST_Multi
$LN14@TEST_Multi:
	mov	DWORD PTR tv176[rbp], 0
$LN15@TEST_Multi:
	mov	r8d, 5
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CM@OFECMCFC@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAU?$AAX?$AA_?$AAX?$AA?5?$AA?$CI@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv176[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 86   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 87   :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 88   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 89   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 90   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR u_result$[rbp], 0
	jne	SHORT $LN4@TEST_Multi

; 91   :         ep->UINT_ENTRY_POINTS.Dispose(u);

	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+32]
$LN4@TEST_Multi:

; 92   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_UX_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+952]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_UX_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_L_X
_TEXT	SEGMENT
v$ = 8
w$ = 40
actual_w_buf$ = 80
actual_w_buf_size$ = 360
result$ = 388
v_result$ = 420
w_result$ = 452
tv158 = 660
tv143 = 660
tv92 = 660
tv74 = 660
tv132 = 664
tv82 = 664
tv64 = 664
__$ArrayPad$ = 672
env$ = 720
ep$ = 728
no$ = 736
u$ = 744
v_buf$ = 752
v_buf_size$ = 760
desired_w_buf$ = 768
desired_w_buf_size$ = 776
TEST_Multiply_L_X PROC					; COMDAT

; 52   : {

$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 53   :     PMC_HANDLE_SINT v;
; 54   :     PMC_HANDLE_SINT w;
; 55   :     unsigned char actual_w_buf[256];
; 56   :     size_t actual_w_buf_size;
; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_STATUS_CODE v_result;
; 59   :     PMC_STATUS_CODE w_result;
; 60   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 61   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 2), (w_result = ep->Multiply_L_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_L_Xの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+760]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EA@OEIJFCJI@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 62   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_w_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[rbp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv143[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 63   :     TEST_Assert(env, FormatTestLabel(L"Multiply_L_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_w_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_w_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[rbp], 0
$LN12@TEST_Multi:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@IKIAJIEO@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAL?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv158[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 64   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 65   :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 66   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 67   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 68   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_L_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.sint\palmtree.math.core.sint\test_op_multiply.c
;	COMDAT TEST_Multiply_I_X
_TEXT	SEGMENT
v$ = 8
w$ = 40
actual_w_buf$ = 80
actual_w_buf_size$ = 360
result$ = 388
v_result$ = 420
w_result$ = 452
tv158 = 660
tv143 = 660
tv92 = 660
tv74 = 660
tv132 = 664
tv82 = 664
tv64 = 664
__$ArrayPad$ = 672
env$ = 720
ep$ = 728
no$ = 736
u$ = 744
v_buf$ = 752
v_buf_size$ = 760
desired_w_buf$ = 768
desired_w_buf_size$ = 776
TEST_Multiply_I_X PROC					; COMDAT

; 33   : {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__9E9C72DE_test_op_multiply@c
	call	__CheckForDebuggerJustMyCode

; 34   :     PMC_HANDLE_SINT v;
; 35   :     PMC_HANDLE_SINT w;
; 36   :     unsigned char actual_w_buf[256];
; 37   :     size_t actual_w_buf_size;
; 38   :     PMC_STATUS_CODE result;
; 39   :     PMC_STATUS_CODE v_result;
; 40   :     PMC_STATUS_CODE w_result;
; 41   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	lea	r8, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR v_buf_size$[rbp]
	mov	rcx, QWORD PTR v_buf$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+592]
	mov	DWORD PTR v_result$[rbp], eax
	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN5@TEST_Multi
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN6@TEST_Multi
$LN5@TEST_Multi:
	mov	DWORD PTR tv74[rbp], 0
$LN6@TEST_Multi:
	mov	edx, DWORD PTR v_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EC@NPMCAPKO@?$AAF?$AAr?$AAo?$AAm?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ@
	call	FormatTestMesssage
	mov	QWORD PTR tv64[rbp], rax
	mov	r8d, 1
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv64[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv74[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 42   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 2), (w_result = ep->Multiply_I_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"Multiply_I_Xの復帰コードが期待通りではない(%d)", w_result));

	lea	r8, QWORD PTR w$[rbp]
	mov	rdx, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+752]
	mov	DWORD PTR w_result$[rbp], eax
	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN7@TEST_Multi
	mov	DWORD PTR tv92[rbp], 1
	jmp	SHORT $LN8@TEST_Multi
$LN7@TEST_Multi:
	mov	DWORD PTR tv92[rbp], 0
$LN8@TEST_Multi:
	mov	edx, DWORD PTR w_result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1EA@LPBHKBAG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AAn?$PP?$KJ?$AA0@
	call	FormatTestMesssage
	mov	QWORD PTR tv82[rbp], rax
	mov	r8d, 2
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv82[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv92[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 43   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"ToByteArrayの復帰コードが期待通りではない(%d)", result));

	lea	r9, QWORD PTR actual_w_buf_size$[rbp]
	mov	r8d, 256				; 00000100H
	lea	rdx, QWORD PTR actual_w_buf$[rbp]
	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+600]
	mov	DWORD PTR result$[rbp], eax
	cmp	DWORD PTR result$[rbp], 0
	jne	SHORT $LN9@TEST_Multi
	mov	DWORD PTR tv143[rbp], 1
	jmp	SHORT $LN10@TEST_Multi
$LN9@TEST_Multi:
	mov	DWORD PTR tv143[rbp], 0
$LN10@TEST_Multi:
	mov	edx, DWORD PTR result$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1DO@DOHJEMND@?$AAT?$AAo?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AAn?$PP?$KJ?$AA0?$PP?$LD@
	call	FormatTestMesssage
	mov	QWORD PTR tv132[rbp], rax
	mov	r8d, 3
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	mov	rcx, QWORD PTR tv132[rbp]
	mov	r9, rcx
	mov	r8d, DWORD PTR tv143[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 44   :     TEST_Assert(env, FormatTestLabel(L"Multiply_I_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	r9, QWORD PTR desired_w_buf_size$[rbp]
	mov	r8, QWORD PTR desired_w_buf$[rbp]
	mov	rdx, QWORD PTR actual_w_buf_size$[rbp]
	lea	rcx, QWORD PTR actual_w_buf$[rbp]
	call	_EQUALS_MEMORY
	test	eax, eax
	jne	SHORT $LN11@TEST_Multi
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN12@TEST_Multi
$LN11@TEST_Multi:
	mov	DWORD PTR tv158[rbp], 0
$LN12@TEST_Multi:
	mov	r8d, 4
	mov	edx, DWORD PTR no$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_1CK@GCKDGDDG@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAy?$AA_?$AAI?$AA_?$AAX?$AA?5?$AA?$CI?$AA?$CF@
	call	FormatTestLabel
	lea	r9, OFFSET FLAT:??_C@_1BK@CBDJCOBM@?$PP?G?$PP?$PM?$PP?$LP?$AAn?$PP?$IF?$PP?$LJ?$AAL?$AA?$AA?$PP?t?$AAW?$AAj?$AAD@
	mov	r8d, DWORD PTR tv158[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR env$[rbp]
	call	TEST_Assert

; 45   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR w_result$[rbp], 0
	jne	SHORT $LN2@TEST_Multi

; 46   :         ep->Dispose(w);

	mov	rcx, QWORD PTR w$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN2@TEST_Multi:

; 47   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR v_result$[rbp], 0
	jne	SHORT $LN3@TEST_Multi

; 48   :         ep->Dispose(v);

	mov	rcx, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR ep$[rbp]
	call	QWORD PTR [rax+576]
$LN3@TEST_Multi:

; 49   : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:TEST_Multiply_I_X$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
TEST_Multiply_I_X ENDP
_TEXT	ENDS
END
